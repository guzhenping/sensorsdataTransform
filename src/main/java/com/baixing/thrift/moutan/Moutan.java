/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baixing.thrift.moutan;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-13")
public class Moutan {

  public interface Iface {

    public void ping() throws SystemException, CodeException, org.apache.thrift.TException;

    public TSite getSite(java.lang.String gid) throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.Map<java.lang.String,TSite> getMultiSite(java.util.List<java.lang.String> gids) throws SystemException, CodeException, org.apache.thrift.TException;

    public TSite getSiteByName(java.lang.String name) throws SystemException, CodeException, org.apache.thrift.TException;

    public TSearchResult querySiteByUser(java.lang.String userId) throws SystemException, CodeException, org.apache.thrift.TException;

    public TSite updateSite(java.lang.String sitegid, TSiteUpdate attrs) throws SystemException, CodeException, org.apache.thrift.TException;

    public TSearchResult getAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws SystemException, CodeException, org.apache.thrift.TException;

    public TSearchResult getOrganicAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws SystemException, CodeException, org.apache.thrift.TException;

    public TSearchResult getCollectedAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws SystemException, CodeException, org.apache.thrift.TException;

    public TSearchResult getCollectibleAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws SystemException, CodeException, org.apache.thrift.TException;

    public TSearchResult getAdsByUser(java.lang.String siteId, java.lang.String userId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean collectAdToSite(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public TMoutanAd getMoutanAd(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.Map<java.lang.String,TMoutanAd> getMoutanAds(java.util.List<java.lang.String> adIds, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public TSiteAdStatus getAdStatus(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.Map<java.lang.String,TSiteAdStatus> getAdsStatus(java.util.List<java.lang.String> adIds, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean returnToModify(java.lang.String adId, java.lang.String siteId, java.lang.String reason) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean modifyToReview(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean updateAdStatus(java.lang.String adId, java.lang.String siteId, SiteAdStatus status) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean eliminate(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean refresh(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean ding(java.lang.String adId, java.lang.String siteId, int days) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean isInDing(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.List<java.lang.String> getDingAdIds(java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public int getAdCount(java.lang.String uid, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public int getAdCountToday(java.lang.String uid, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public int getPaidAdCount(java.lang.String uid, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public int getPaidAdCountToday(java.lang.String uid, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean sendRuleNotice(java.lang.String adId, java.lang.String reason, java.lang.String action) throws SystemException, CodeException, org.apache.thrift.TException;

    public java.lang.String createAdDraft(java.lang.String adId, java.lang.String siteId, java.lang.String data) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean updateAdDraft(java.lang.String draftId, java.lang.String data) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean updateAdDraftPostOrderId(java.lang.String draftId, java.lang.String postOrderId) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean setPaidAdDraft(java.lang.String draftId) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean isAdDraftPaid(java.lang.String draftId) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean deleteAdDraft(java.lang.String draftId) throws SystemException, CodeException, org.apache.thrift.TException;

    public TAdDraft getAdDraft(java.lang.String draftId) throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.List<TAdDraft> queryAdDraftsByUser(java.lang.String uid, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.Map<java.lang.String,java.lang.Integer> getUnreadCount(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.Integer> types) throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.Map<java.lang.String,TImageConfig> getImageConfig() throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.List<java.lang.String> getSensitiveWords() throws SystemException, CodeException, org.apache.thrift.TException;

    public int sendSMS(java.util.List<java.lang.String> mobiles, java.lang.String content, java.lang.String source) throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.Map<MoutanSiteStatusType,java.lang.String> getSiteStatus(java.lang.String gid, java.lang.String time) throws SystemException, CodeException, org.apache.thrift.TException;

    public long createOrder(java.lang.String uid, int type, java.lang.String consumerUid, int price, java.lang.String siteId, java.lang.String addition) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean disposeOrder(long orderId) throws SystemException, CodeException, org.apache.thrift.TException;

    public TDashboardInfo getDashboardInfo(java.lang.String uid, int limit, int offset) throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.Map<java.lang.String,TArea> getAreaLevelFirstMulti(java.util.List<java.lang.String> gids) throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.Map<java.lang.String,TCategory> getAllCategories() throws SystemException, CodeException, org.apache.thrift.TException;

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getSchema(java.lang.String categoryId, java.lang.String areaId) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean log(int type, java.lang.String siteId, java.lang.String userId, java.lang.String objectId, java.lang.String objectInfo, java.lang.String description, java.util.Map<java.lang.String,java.lang.String> attributeData) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean addSiteStatus(java.lang.String site, MoutanSiteStatusType type, int time, int count) throws SystemException, CodeException, org.apache.thrift.TException;

    public boolean smsUnsubscribe(java.lang.String mobile) throws SystemException, CodeException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

    public void getSite(java.lang.String gid, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler) throws org.apache.thrift.TException;

    public void getMultiSite(java.util.List<java.lang.String> gids, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSite>> resultHandler) throws org.apache.thrift.TException;

    public void getSiteByName(java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler) throws org.apache.thrift.TException;

    public void querySiteByUser(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException;

    public void updateSite(java.lang.String sitegid, TSiteUpdate attrs, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler) throws org.apache.thrift.TException;

    public void getAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException;

    public void getOrganicAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException;

    public void getCollectedAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException;

    public void getCollectibleAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException;

    public void getAdsByUser(java.lang.String siteId, java.lang.String userId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException;

    public void collectAdToSite(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getMoutanAd(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<TMoutanAd> resultHandler) throws org.apache.thrift.TException;

    public void getMoutanAds(java.util.List<java.lang.String> adIds, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TMoutanAd>> resultHandler) throws org.apache.thrift.TException;

    public void getAdStatus(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<TSiteAdStatus> resultHandler) throws org.apache.thrift.TException;

    public void getAdsStatus(java.util.List<java.lang.String> adIds, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSiteAdStatus>> resultHandler) throws org.apache.thrift.TException;

    public void returnToModify(java.lang.String adId, java.lang.String siteId, java.lang.String reason, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void modifyToReview(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void updateAdStatus(java.lang.String adId, java.lang.String siteId, SiteAdStatus status, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void eliminate(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void refresh(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void ding(java.lang.String adId, java.lang.String siteId, int days, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void isInDing(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getDingAdIds(java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void getAdCount(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void getAdCountToday(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void getPaidAdCount(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void getPaidAdCountToday(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void sendRuleNotice(java.lang.String adId, java.lang.String reason, java.lang.String action, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void createAdDraft(java.lang.String adId, java.lang.String siteId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void updateAdDraft(java.lang.String draftId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void updateAdDraftPostOrderId(java.lang.String draftId, java.lang.String postOrderId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void setPaidAdDraft(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void isAdDraftPaid(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void deleteAdDraft(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getAdDraft(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<TAdDraft> resultHandler) throws org.apache.thrift.TException;

    public void queryAdDraftsByUser(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAdDraft>> resultHandler) throws org.apache.thrift.TException;

    public void getUnreadCount(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.Integer> types, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler) throws org.apache.thrift.TException;

    public void getImageConfig(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TImageConfig>> resultHandler) throws org.apache.thrift.TException;

    public void getSensitiveWords(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void sendSMS(java.util.List<java.lang.String> mobiles, java.lang.String content, java.lang.String source, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void getSiteStatus(java.lang.String gid, java.lang.String time, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<MoutanSiteStatusType,java.lang.String>> resultHandler) throws org.apache.thrift.TException;

    public void createOrder(java.lang.String uid, int type, java.lang.String consumerUid, int price, java.lang.String siteId, java.lang.String addition, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void disposeOrder(long orderId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void getDashboardInfo(java.lang.String uid, int limit, int offset, org.apache.thrift.async.AsyncMethodCallback<TDashboardInfo> resultHandler) throws org.apache.thrift.TException;

    public void getAreaLevelFirstMulti(java.util.List<java.lang.String> gids, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TArea>> resultHandler) throws org.apache.thrift.TException;

    public void getAllCategories(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TCategory>> resultHandler) throws org.apache.thrift.TException;

    public void getSchema(java.lang.String categoryId, java.lang.String areaId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException;

    public void log(int type, java.lang.String siteId, java.lang.String userId, java.lang.String objectId, java.lang.String objectInfo, java.lang.String description, java.util.Map<java.lang.String,java.lang.String> attributeData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void addSiteStatus(java.lang.String site, MoutanSiteStatusType type, int time, int count, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void smsUnsubscribe(java.lang.String mobile, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void ping() throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_ping();
      recv_ping();
    }

    public void send_ping() throws org.apache.thrift.TException
    {
      ping_args args = new ping_args();
      sendBase("ping", args);
    }

    public void recv_ping() throws SystemException, CodeException, org.apache.thrift.TException
    {
      ping_result result = new ping_result();
      receiveBase(result, "ping");
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      return;
    }

    public TSite getSite(java.lang.String gid) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getSite(gid);
      return recv_getSite();
    }

    public void send_getSite(java.lang.String gid) throws org.apache.thrift.TException
    {
      getSite_args args = new getSite_args();
      args.setGid(gid);
      sendBase("getSite", args);
    }

    public TSite recv_getSite() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getSite_result result = new getSite_result();
      receiveBase(result, "getSite");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSite failed: unknown result");
    }

    public java.util.Map<java.lang.String,TSite> getMultiSite(java.util.List<java.lang.String> gids) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getMultiSite(gids);
      return recv_getMultiSite();
    }

    public void send_getMultiSite(java.util.List<java.lang.String> gids) throws org.apache.thrift.TException
    {
      getMultiSite_args args = new getMultiSite_args();
      args.setGids(gids);
      sendBase("getMultiSite", args);
    }

    public java.util.Map<java.lang.String,TSite> recv_getMultiSite() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getMultiSite_result result = new getMultiSite_result();
      receiveBase(result, "getMultiSite");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMultiSite failed: unknown result");
    }

    public TSite getSiteByName(java.lang.String name) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getSiteByName(name);
      return recv_getSiteByName();
    }

    public void send_getSiteByName(java.lang.String name) throws org.apache.thrift.TException
    {
      getSiteByName_args args = new getSiteByName_args();
      args.setName(name);
      sendBase("getSiteByName", args);
    }

    public TSite recv_getSiteByName() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getSiteByName_result result = new getSiteByName_result();
      receiveBase(result, "getSiteByName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSiteByName failed: unknown result");
    }

    public TSearchResult querySiteByUser(java.lang.String userId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_querySiteByUser(userId);
      return recv_querySiteByUser();
    }

    public void send_querySiteByUser(java.lang.String userId) throws org.apache.thrift.TException
    {
      querySiteByUser_args args = new querySiteByUser_args();
      args.setUserId(userId);
      sendBase("querySiteByUser", args);
    }

    public TSearchResult recv_querySiteByUser() throws SystemException, CodeException, org.apache.thrift.TException
    {
      querySiteByUser_result result = new querySiteByUser_result();
      receiveBase(result, "querySiteByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySiteByUser failed: unknown result");
    }

    public TSite updateSite(java.lang.String sitegid, TSiteUpdate attrs) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_updateSite(sitegid, attrs);
      return recv_updateSite();
    }

    public void send_updateSite(java.lang.String sitegid, TSiteUpdate attrs) throws org.apache.thrift.TException
    {
      updateSite_args args = new updateSite_args();
      args.setSitegid(sitegid);
      args.setAttrs(attrs);
      sendBase("updateSite", args);
    }

    public TSite recv_updateSite() throws SystemException, CodeException, org.apache.thrift.TException
    {
      updateSite_result result = new updateSite_result();
      receiveBase(result, "updateSite");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateSite failed: unknown result");
    }

    public TSearchResult getAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getAds(siteId, arguments, options);
      return recv_getAds();
    }

    public void send_getAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws org.apache.thrift.TException
    {
      getAds_args args = new getAds_args();
      args.setSiteId(siteId);
      args.setArguments(arguments);
      args.setOptions(options);
      sendBase("getAds", args);
    }

    public TSearchResult recv_getAds() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getAds_result result = new getAds_result();
      receiveBase(result, "getAds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAds failed: unknown result");
    }

    public TSearchResult getOrganicAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getOrganicAds(siteId, arguments, options);
      return recv_getOrganicAds();
    }

    public void send_getOrganicAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws org.apache.thrift.TException
    {
      getOrganicAds_args args = new getOrganicAds_args();
      args.setSiteId(siteId);
      args.setArguments(arguments);
      args.setOptions(options);
      sendBase("getOrganicAds", args);
    }

    public TSearchResult recv_getOrganicAds() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getOrganicAds_result result = new getOrganicAds_result();
      receiveBase(result, "getOrganicAds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getOrganicAds failed: unknown result");
    }

    public TSearchResult getCollectedAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getCollectedAds(siteId, arguments, options);
      return recv_getCollectedAds();
    }

    public void send_getCollectedAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws org.apache.thrift.TException
    {
      getCollectedAds_args args = new getCollectedAds_args();
      args.setSiteId(siteId);
      args.setArguments(arguments);
      args.setOptions(options);
      sendBase("getCollectedAds", args);
    }

    public TSearchResult recv_getCollectedAds() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getCollectedAds_result result = new getCollectedAds_result();
      receiveBase(result, "getCollectedAds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectedAds failed: unknown result");
    }

    public TSearchResult getCollectibleAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getCollectibleAds(siteId, arguments, options);
      return recv_getCollectibleAds();
    }

    public void send_getCollectibleAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws org.apache.thrift.TException
    {
      getCollectibleAds_args args = new getCollectibleAds_args();
      args.setSiteId(siteId);
      args.setArguments(arguments);
      args.setOptions(options);
      sendBase("getCollectibleAds", args);
    }

    public TSearchResult recv_getCollectibleAds() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getCollectibleAds_result result = new getCollectibleAds_result();
      receiveBase(result, "getCollectibleAds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getCollectibleAds failed: unknown result");
    }

    public TSearchResult getAdsByUser(java.lang.String siteId, java.lang.String userId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getAdsByUser(siteId, userId, arguments, options);
      return recv_getAdsByUser();
    }

    public void send_getAdsByUser(java.lang.String siteId, java.lang.String userId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options) throws org.apache.thrift.TException
    {
      getAdsByUser_args args = new getAdsByUser_args();
      args.setSiteId(siteId);
      args.setUserId(userId);
      args.setArguments(arguments);
      args.setOptions(options);
      sendBase("getAdsByUser", args);
    }

    public TSearchResult recv_getAdsByUser() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getAdsByUser_result result = new getAdsByUser_result();
      receiveBase(result, "getAdsByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdsByUser failed: unknown result");
    }

    public boolean collectAdToSite(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_collectAdToSite(adId, siteId);
      return recv_collectAdToSite();
    }

    public void send_collectAdToSite(java.lang.String adId, java.lang.String siteId) throws org.apache.thrift.TException
    {
      collectAdToSite_args args = new collectAdToSite_args();
      args.setAdId(adId);
      args.setSiteId(siteId);
      sendBase("collectAdToSite", args);
    }

    public boolean recv_collectAdToSite() throws SystemException, CodeException, org.apache.thrift.TException
    {
      collectAdToSite_result result = new collectAdToSite_result();
      receiveBase(result, "collectAdToSite");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "collectAdToSite failed: unknown result");
    }

    public TMoutanAd getMoutanAd(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getMoutanAd(adId, siteId);
      return recv_getMoutanAd();
    }

    public void send_getMoutanAd(java.lang.String adId, java.lang.String siteId) throws org.apache.thrift.TException
    {
      getMoutanAd_args args = new getMoutanAd_args();
      args.setAdId(adId);
      args.setSiteId(siteId);
      sendBase("getMoutanAd", args);
    }

    public TMoutanAd recv_getMoutanAd() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getMoutanAd_result result = new getMoutanAd_result();
      receiveBase(result, "getMoutanAd");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMoutanAd failed: unknown result");
    }

    public java.util.Map<java.lang.String,TMoutanAd> getMoutanAds(java.util.List<java.lang.String> adIds, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getMoutanAds(adIds, siteId);
      return recv_getMoutanAds();
    }

    public void send_getMoutanAds(java.util.List<java.lang.String> adIds, java.lang.String siteId) throws org.apache.thrift.TException
    {
      getMoutanAds_args args = new getMoutanAds_args();
      args.setAdIds(adIds);
      args.setSiteId(siteId);
      sendBase("getMoutanAds", args);
    }

    public java.util.Map<java.lang.String,TMoutanAd> recv_getMoutanAds() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getMoutanAds_result result = new getMoutanAds_result();
      receiveBase(result, "getMoutanAds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getMoutanAds failed: unknown result");
    }

    public TSiteAdStatus getAdStatus(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getAdStatus(adId, siteId);
      return recv_getAdStatus();
    }

    public void send_getAdStatus(java.lang.String adId, java.lang.String siteId) throws org.apache.thrift.TException
    {
      getAdStatus_args args = new getAdStatus_args();
      args.setAdId(adId);
      args.setSiteId(siteId);
      sendBase("getAdStatus", args);
    }

    public TSiteAdStatus recv_getAdStatus() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getAdStatus_result result = new getAdStatus_result();
      receiveBase(result, "getAdStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdStatus failed: unknown result");
    }

    public java.util.Map<java.lang.String,TSiteAdStatus> getAdsStatus(java.util.List<java.lang.String> adIds, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getAdsStatus(adIds, siteId);
      return recv_getAdsStatus();
    }

    public void send_getAdsStatus(java.util.List<java.lang.String> adIds, java.lang.String siteId) throws org.apache.thrift.TException
    {
      getAdsStatus_args args = new getAdsStatus_args();
      args.setAdIds(adIds);
      args.setSiteId(siteId);
      sendBase("getAdsStatus", args);
    }

    public java.util.Map<java.lang.String,TSiteAdStatus> recv_getAdsStatus() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getAdsStatus_result result = new getAdsStatus_result();
      receiveBase(result, "getAdsStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdsStatus failed: unknown result");
    }

    public boolean returnToModify(java.lang.String adId, java.lang.String siteId, java.lang.String reason) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_returnToModify(adId, siteId, reason);
      return recv_returnToModify();
    }

    public void send_returnToModify(java.lang.String adId, java.lang.String siteId, java.lang.String reason) throws org.apache.thrift.TException
    {
      returnToModify_args args = new returnToModify_args();
      args.setAdId(adId);
      args.setSiteId(siteId);
      args.setReason(reason);
      sendBase("returnToModify", args);
    }

    public boolean recv_returnToModify() throws SystemException, CodeException, org.apache.thrift.TException
    {
      returnToModify_result result = new returnToModify_result();
      receiveBase(result, "returnToModify");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "returnToModify failed: unknown result");
    }

    public boolean modifyToReview(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_modifyToReview(adId, siteId);
      return recv_modifyToReview();
    }

    public void send_modifyToReview(java.lang.String adId, java.lang.String siteId) throws org.apache.thrift.TException
    {
      modifyToReview_args args = new modifyToReview_args();
      args.setAdId(adId);
      args.setSiteId(siteId);
      sendBase("modifyToReview", args);
    }

    public boolean recv_modifyToReview() throws SystemException, CodeException, org.apache.thrift.TException
    {
      modifyToReview_result result = new modifyToReview_result();
      receiveBase(result, "modifyToReview");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "modifyToReview failed: unknown result");
    }

    public boolean updateAdStatus(java.lang.String adId, java.lang.String siteId, SiteAdStatus status) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_updateAdStatus(adId, siteId, status);
      return recv_updateAdStatus();
    }

    public void send_updateAdStatus(java.lang.String adId, java.lang.String siteId, SiteAdStatus status) throws org.apache.thrift.TException
    {
      updateAdStatus_args args = new updateAdStatus_args();
      args.setAdId(adId);
      args.setSiteId(siteId);
      args.setStatus(status);
      sendBase("updateAdStatus", args);
    }

    public boolean recv_updateAdStatus() throws SystemException, CodeException, org.apache.thrift.TException
    {
      updateAdStatus_result result = new updateAdStatus_result();
      receiveBase(result, "updateAdStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAdStatus failed: unknown result");
    }

    public boolean eliminate(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_eliminate(adId, siteId);
      return recv_eliminate();
    }

    public void send_eliminate(java.lang.String adId, java.lang.String siteId) throws org.apache.thrift.TException
    {
      eliminate_args args = new eliminate_args();
      args.setAdId(adId);
      args.setSiteId(siteId);
      sendBase("eliminate", args);
    }

    public boolean recv_eliminate() throws SystemException, CodeException, org.apache.thrift.TException
    {
      eliminate_result result = new eliminate_result();
      receiveBase(result, "eliminate");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "eliminate failed: unknown result");
    }

    public boolean refresh(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_refresh(adId, siteId);
      return recv_refresh();
    }

    public void send_refresh(java.lang.String adId, java.lang.String siteId) throws org.apache.thrift.TException
    {
      refresh_args args = new refresh_args();
      args.setAdId(adId);
      args.setSiteId(siteId);
      sendBase("refresh", args);
    }

    public boolean recv_refresh() throws SystemException, CodeException, org.apache.thrift.TException
    {
      refresh_result result = new refresh_result();
      receiveBase(result, "refresh");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "refresh failed: unknown result");
    }

    public boolean ding(java.lang.String adId, java.lang.String siteId, int days) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_ding(adId, siteId, days);
      return recv_ding();
    }

    public void send_ding(java.lang.String adId, java.lang.String siteId, int days) throws org.apache.thrift.TException
    {
      ding_args args = new ding_args();
      args.setAdId(adId);
      args.setSiteId(siteId);
      args.setDays(days);
      sendBase("ding", args);
    }

    public boolean recv_ding() throws SystemException, CodeException, org.apache.thrift.TException
    {
      ding_result result = new ding_result();
      receiveBase(result, "ding");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ding failed: unknown result");
    }

    public boolean isInDing(java.lang.String adId, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_isInDing(adId, siteId);
      return recv_isInDing();
    }

    public void send_isInDing(java.lang.String adId, java.lang.String siteId) throws org.apache.thrift.TException
    {
      isInDing_args args = new isInDing_args();
      args.setAdId(adId);
      args.setSiteId(siteId);
      sendBase("isInDing", args);
    }

    public boolean recv_isInDing() throws SystemException, CodeException, org.apache.thrift.TException
    {
      isInDing_result result = new isInDing_result();
      receiveBase(result, "isInDing");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isInDing failed: unknown result");
    }

    public java.util.List<java.lang.String> getDingAdIds(java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getDingAdIds(siteId);
      return recv_getDingAdIds();
    }

    public void send_getDingAdIds(java.lang.String siteId) throws org.apache.thrift.TException
    {
      getDingAdIds_args args = new getDingAdIds_args();
      args.setSiteId(siteId);
      sendBase("getDingAdIds", args);
    }

    public java.util.List<java.lang.String> recv_getDingAdIds() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getDingAdIds_result result = new getDingAdIds_result();
      receiveBase(result, "getDingAdIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDingAdIds failed: unknown result");
    }

    public int getAdCount(java.lang.String uid, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getAdCount(uid, siteId);
      return recv_getAdCount();
    }

    public void send_getAdCount(java.lang.String uid, java.lang.String siteId) throws org.apache.thrift.TException
    {
      getAdCount_args args = new getAdCount_args();
      args.setUid(uid);
      args.setSiteId(siteId);
      sendBase("getAdCount", args);
    }

    public int recv_getAdCount() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getAdCount_result result = new getAdCount_result();
      receiveBase(result, "getAdCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdCount failed: unknown result");
    }

    public int getAdCountToday(java.lang.String uid, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getAdCountToday(uid, siteId);
      return recv_getAdCountToday();
    }

    public void send_getAdCountToday(java.lang.String uid, java.lang.String siteId) throws org.apache.thrift.TException
    {
      getAdCountToday_args args = new getAdCountToday_args();
      args.setUid(uid);
      args.setSiteId(siteId);
      sendBase("getAdCountToday", args);
    }

    public int recv_getAdCountToday() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getAdCountToday_result result = new getAdCountToday_result();
      receiveBase(result, "getAdCountToday");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdCountToday failed: unknown result");
    }

    public int getPaidAdCount(java.lang.String uid, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getPaidAdCount(uid, siteId);
      return recv_getPaidAdCount();
    }

    public void send_getPaidAdCount(java.lang.String uid, java.lang.String siteId) throws org.apache.thrift.TException
    {
      getPaidAdCount_args args = new getPaidAdCount_args();
      args.setUid(uid);
      args.setSiteId(siteId);
      sendBase("getPaidAdCount", args);
    }

    public int recv_getPaidAdCount() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getPaidAdCount_result result = new getPaidAdCount_result();
      receiveBase(result, "getPaidAdCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPaidAdCount failed: unknown result");
    }

    public int getPaidAdCountToday(java.lang.String uid, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getPaidAdCountToday(uid, siteId);
      return recv_getPaidAdCountToday();
    }

    public void send_getPaidAdCountToday(java.lang.String uid, java.lang.String siteId) throws org.apache.thrift.TException
    {
      getPaidAdCountToday_args args = new getPaidAdCountToday_args();
      args.setUid(uid);
      args.setSiteId(siteId);
      sendBase("getPaidAdCountToday", args);
    }

    public int recv_getPaidAdCountToday() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getPaidAdCountToday_result result = new getPaidAdCountToday_result();
      receiveBase(result, "getPaidAdCountToday");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPaidAdCountToday failed: unknown result");
    }

    public boolean sendRuleNotice(java.lang.String adId, java.lang.String reason, java.lang.String action) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_sendRuleNotice(adId, reason, action);
      return recv_sendRuleNotice();
    }

    public void send_sendRuleNotice(java.lang.String adId, java.lang.String reason, java.lang.String action) throws org.apache.thrift.TException
    {
      sendRuleNotice_args args = new sendRuleNotice_args();
      args.setAdId(adId);
      args.setReason(reason);
      args.setAction(action);
      sendBase("sendRuleNotice", args);
    }

    public boolean recv_sendRuleNotice() throws SystemException, CodeException, org.apache.thrift.TException
    {
      sendRuleNotice_result result = new sendRuleNotice_result();
      receiveBase(result, "sendRuleNotice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendRuleNotice failed: unknown result");
    }

    public java.lang.String createAdDraft(java.lang.String adId, java.lang.String siteId, java.lang.String data) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_createAdDraft(adId, siteId, data);
      return recv_createAdDraft();
    }

    public void send_createAdDraft(java.lang.String adId, java.lang.String siteId, java.lang.String data) throws org.apache.thrift.TException
    {
      createAdDraft_args args = new createAdDraft_args();
      args.setAdId(adId);
      args.setSiteId(siteId);
      args.setData(data);
      sendBase("createAdDraft", args);
    }

    public java.lang.String recv_createAdDraft() throws SystemException, CodeException, org.apache.thrift.TException
    {
      createAdDraft_result result = new createAdDraft_result();
      receiveBase(result, "createAdDraft");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAdDraft failed: unknown result");
    }

    public boolean updateAdDraft(java.lang.String draftId, java.lang.String data) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_updateAdDraft(draftId, data);
      return recv_updateAdDraft();
    }

    public void send_updateAdDraft(java.lang.String draftId, java.lang.String data) throws org.apache.thrift.TException
    {
      updateAdDraft_args args = new updateAdDraft_args();
      args.setDraftId(draftId);
      args.setData(data);
      sendBase("updateAdDraft", args);
    }

    public boolean recv_updateAdDraft() throws SystemException, CodeException, org.apache.thrift.TException
    {
      updateAdDraft_result result = new updateAdDraft_result();
      receiveBase(result, "updateAdDraft");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAdDraft failed: unknown result");
    }

    public boolean updateAdDraftPostOrderId(java.lang.String draftId, java.lang.String postOrderId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_updateAdDraftPostOrderId(draftId, postOrderId);
      return recv_updateAdDraftPostOrderId();
    }

    public void send_updateAdDraftPostOrderId(java.lang.String draftId, java.lang.String postOrderId) throws org.apache.thrift.TException
    {
      updateAdDraftPostOrderId_args args = new updateAdDraftPostOrderId_args();
      args.setDraftId(draftId);
      args.setPostOrderId(postOrderId);
      sendBase("updateAdDraftPostOrderId", args);
    }

    public boolean recv_updateAdDraftPostOrderId() throws SystemException, CodeException, org.apache.thrift.TException
    {
      updateAdDraftPostOrderId_result result = new updateAdDraftPostOrderId_result();
      receiveBase(result, "updateAdDraftPostOrderId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateAdDraftPostOrderId failed: unknown result");
    }

    public boolean setPaidAdDraft(java.lang.String draftId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_setPaidAdDraft(draftId);
      return recv_setPaidAdDraft();
    }

    public void send_setPaidAdDraft(java.lang.String draftId) throws org.apache.thrift.TException
    {
      setPaidAdDraft_args args = new setPaidAdDraft_args();
      args.setDraftId(draftId);
      sendBase("setPaidAdDraft", args);
    }

    public boolean recv_setPaidAdDraft() throws SystemException, CodeException, org.apache.thrift.TException
    {
      setPaidAdDraft_result result = new setPaidAdDraft_result();
      receiveBase(result, "setPaidAdDraft");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setPaidAdDraft failed: unknown result");
    }

    public boolean isAdDraftPaid(java.lang.String draftId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_isAdDraftPaid(draftId);
      return recv_isAdDraftPaid();
    }

    public void send_isAdDraftPaid(java.lang.String draftId) throws org.apache.thrift.TException
    {
      isAdDraftPaid_args args = new isAdDraftPaid_args();
      args.setDraftId(draftId);
      sendBase("isAdDraftPaid", args);
    }

    public boolean recv_isAdDraftPaid() throws SystemException, CodeException, org.apache.thrift.TException
    {
      isAdDraftPaid_result result = new isAdDraftPaid_result();
      receiveBase(result, "isAdDraftPaid");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "isAdDraftPaid failed: unknown result");
    }

    public boolean deleteAdDraft(java.lang.String draftId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_deleteAdDraft(draftId);
      return recv_deleteAdDraft();
    }

    public void send_deleteAdDraft(java.lang.String draftId) throws org.apache.thrift.TException
    {
      deleteAdDraft_args args = new deleteAdDraft_args();
      args.setDraftId(draftId);
      sendBase("deleteAdDraft", args);
    }

    public boolean recv_deleteAdDraft() throws SystemException, CodeException, org.apache.thrift.TException
    {
      deleteAdDraft_result result = new deleteAdDraft_result();
      receiveBase(result, "deleteAdDraft");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteAdDraft failed: unknown result");
    }

    public TAdDraft getAdDraft(java.lang.String draftId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getAdDraft(draftId);
      return recv_getAdDraft();
    }

    public void send_getAdDraft(java.lang.String draftId) throws org.apache.thrift.TException
    {
      getAdDraft_args args = new getAdDraft_args();
      args.setDraftId(draftId);
      sendBase("getAdDraft", args);
    }

    public TAdDraft recv_getAdDraft() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getAdDraft_result result = new getAdDraft_result();
      receiveBase(result, "getAdDraft");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAdDraft failed: unknown result");
    }

    public java.util.List<TAdDraft> queryAdDraftsByUser(java.lang.String uid, java.lang.String siteId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_queryAdDraftsByUser(uid, siteId);
      return recv_queryAdDraftsByUser();
    }

    public void send_queryAdDraftsByUser(java.lang.String uid, java.lang.String siteId) throws org.apache.thrift.TException
    {
      queryAdDraftsByUser_args args = new queryAdDraftsByUser_args();
      args.setUid(uid);
      args.setSiteId(siteId);
      sendBase("queryAdDraftsByUser", args);
    }

    public java.util.List<TAdDraft> recv_queryAdDraftsByUser() throws SystemException, CodeException, org.apache.thrift.TException
    {
      queryAdDraftsByUser_result result = new queryAdDraftsByUser_result();
      receiveBase(result, "queryAdDraftsByUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryAdDraftsByUser failed: unknown result");
    }

    public java.util.Map<java.lang.String,java.lang.Integer> getUnreadCount(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.Integer> types) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getUnreadCount(siteId, types);
      return recv_getUnreadCount();
    }

    public void send_getUnreadCount(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.Integer> types) throws org.apache.thrift.TException
    {
      getUnreadCount_args args = new getUnreadCount_args();
      args.setSiteId(siteId);
      args.setTypes(types);
      sendBase("getUnreadCount", args);
    }

    public java.util.Map<java.lang.String,java.lang.Integer> recv_getUnreadCount() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getUnreadCount_result result = new getUnreadCount_result();
      receiveBase(result, "getUnreadCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getUnreadCount failed: unknown result");
    }

    public java.util.Map<java.lang.String,TImageConfig> getImageConfig() throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getImageConfig();
      return recv_getImageConfig();
    }

    public void send_getImageConfig() throws org.apache.thrift.TException
    {
      getImageConfig_args args = new getImageConfig_args();
      sendBase("getImageConfig", args);
    }

    public java.util.Map<java.lang.String,TImageConfig> recv_getImageConfig() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getImageConfig_result result = new getImageConfig_result();
      receiveBase(result, "getImageConfig");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getImageConfig failed: unknown result");
    }

    public java.util.List<java.lang.String> getSensitiveWords() throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getSensitiveWords();
      return recv_getSensitiveWords();
    }

    public void send_getSensitiveWords() throws org.apache.thrift.TException
    {
      getSensitiveWords_args args = new getSensitiveWords_args();
      sendBase("getSensitiveWords", args);
    }

    public java.util.List<java.lang.String> recv_getSensitiveWords() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getSensitiveWords_result result = new getSensitiveWords_result();
      receiveBase(result, "getSensitiveWords");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSensitiveWords failed: unknown result");
    }

    public int sendSMS(java.util.List<java.lang.String> mobiles, java.lang.String content, java.lang.String source) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_sendSMS(mobiles, content, source);
      return recv_sendSMS();
    }

    public void send_sendSMS(java.util.List<java.lang.String> mobiles, java.lang.String content, java.lang.String source) throws org.apache.thrift.TException
    {
      sendSMS_args args = new sendSMS_args();
      args.setMobiles(mobiles);
      args.setContent(content);
      args.setSource(source);
      sendBase("sendSMS", args);
    }

    public int recv_sendSMS() throws SystemException, CodeException, org.apache.thrift.TException
    {
      sendSMS_result result = new sendSMS_result();
      receiveBase(result, "sendSMS");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sendSMS failed: unknown result");
    }

    public java.util.Map<MoutanSiteStatusType,java.lang.String> getSiteStatus(java.lang.String gid, java.lang.String time) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getSiteStatus(gid, time);
      return recv_getSiteStatus();
    }

    public void send_getSiteStatus(java.lang.String gid, java.lang.String time) throws org.apache.thrift.TException
    {
      getSiteStatus_args args = new getSiteStatus_args();
      args.setGid(gid);
      args.setTime(time);
      sendBase("getSiteStatus", args);
    }

    public java.util.Map<MoutanSiteStatusType,java.lang.String> recv_getSiteStatus() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getSiteStatus_result result = new getSiteStatus_result();
      receiveBase(result, "getSiteStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSiteStatus failed: unknown result");
    }

    public long createOrder(java.lang.String uid, int type, java.lang.String consumerUid, int price, java.lang.String siteId, java.lang.String addition) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_createOrder(uid, type, consumerUid, price, siteId, addition);
      return recv_createOrder();
    }

    public void send_createOrder(java.lang.String uid, int type, java.lang.String consumerUid, int price, java.lang.String siteId, java.lang.String addition) throws org.apache.thrift.TException
    {
      createOrder_args args = new createOrder_args();
      args.setUid(uid);
      args.setType(type);
      args.setConsumerUid(consumerUid);
      args.setPrice(price);
      args.setSiteId(siteId);
      args.setAddition(addition);
      sendBase("createOrder", args);
    }

    public long recv_createOrder() throws SystemException, CodeException, org.apache.thrift.TException
    {
      createOrder_result result = new createOrder_result();
      receiveBase(result, "createOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createOrder failed: unknown result");
    }

    public boolean disposeOrder(long orderId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_disposeOrder(orderId);
      return recv_disposeOrder();
    }

    public void send_disposeOrder(long orderId) throws org.apache.thrift.TException
    {
      disposeOrder_args args = new disposeOrder_args();
      args.setOrderId(orderId);
      sendBase("disposeOrder", args);
    }

    public boolean recv_disposeOrder() throws SystemException, CodeException, org.apache.thrift.TException
    {
      disposeOrder_result result = new disposeOrder_result();
      receiveBase(result, "disposeOrder");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "disposeOrder failed: unknown result");
    }

    public TDashboardInfo getDashboardInfo(java.lang.String uid, int limit, int offset) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getDashboardInfo(uid, limit, offset);
      return recv_getDashboardInfo();
    }

    public void send_getDashboardInfo(java.lang.String uid, int limit, int offset) throws org.apache.thrift.TException
    {
      getDashboardInfo_args args = new getDashboardInfo_args();
      args.setUid(uid);
      args.setLimit(limit);
      args.setOffset(offset);
      sendBase("getDashboardInfo", args);
    }

    public TDashboardInfo recv_getDashboardInfo() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getDashboardInfo_result result = new getDashboardInfo_result();
      receiveBase(result, "getDashboardInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getDashboardInfo failed: unknown result");
    }

    public java.util.Map<java.lang.String,TArea> getAreaLevelFirstMulti(java.util.List<java.lang.String> gids) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getAreaLevelFirstMulti(gids);
      return recv_getAreaLevelFirstMulti();
    }

    public void send_getAreaLevelFirstMulti(java.util.List<java.lang.String> gids) throws org.apache.thrift.TException
    {
      getAreaLevelFirstMulti_args args = new getAreaLevelFirstMulti_args();
      args.setGids(gids);
      sendBase("getAreaLevelFirstMulti", args);
    }

    public java.util.Map<java.lang.String,TArea> recv_getAreaLevelFirstMulti() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getAreaLevelFirstMulti_result result = new getAreaLevelFirstMulti_result();
      receiveBase(result, "getAreaLevelFirstMulti");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAreaLevelFirstMulti failed: unknown result");
    }

    public java.util.Map<java.lang.String,TCategory> getAllCategories() throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getAllCategories();
      return recv_getAllCategories();
    }

    public void send_getAllCategories() throws org.apache.thrift.TException
    {
      getAllCategories_args args = new getAllCategories_args();
      sendBase("getAllCategories", args);
    }

    public java.util.Map<java.lang.String,TCategory> recv_getAllCategories() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getAllCategories_result result = new getAllCategories_result();
      receiveBase(result, "getAllCategories");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllCategories failed: unknown result");
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getSchema(java.lang.String categoryId, java.lang.String areaId) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_getSchema(categoryId, areaId);
      return recv_getSchema();
    }

    public void send_getSchema(java.lang.String categoryId, java.lang.String areaId) throws org.apache.thrift.TException
    {
      getSchema_args args = new getSchema_args();
      args.setCategoryId(categoryId);
      args.setAreaId(areaId);
      sendBase("getSchema", args);
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> recv_getSchema() throws SystemException, CodeException, org.apache.thrift.TException
    {
      getSchema_result result = new getSchema_result();
      receiveBase(result, "getSchema");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSchema failed: unknown result");
    }

    public boolean log(int type, java.lang.String siteId, java.lang.String userId, java.lang.String objectId, java.lang.String objectInfo, java.lang.String description, java.util.Map<java.lang.String,java.lang.String> attributeData) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_log(type, siteId, userId, objectId, objectInfo, description, attributeData);
      return recv_log();
    }

    public void send_log(int type, java.lang.String siteId, java.lang.String userId, java.lang.String objectId, java.lang.String objectInfo, java.lang.String description, java.util.Map<java.lang.String,java.lang.String> attributeData) throws org.apache.thrift.TException
    {
      log_args args = new log_args();
      args.setType(type);
      args.setSiteId(siteId);
      args.setUserId(userId);
      args.setObjectId(objectId);
      args.setObjectInfo(objectInfo);
      args.setDescription(description);
      args.setAttributeData(attributeData);
      sendBase("log", args);
    }

    public boolean recv_log() throws SystemException, CodeException, org.apache.thrift.TException
    {
      log_result result = new log_result();
      receiveBase(result, "log");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "log failed: unknown result");
    }

    public boolean addSiteStatus(java.lang.String site, MoutanSiteStatusType type, int time, int count) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_addSiteStatus(site, type, time, count);
      return recv_addSiteStatus();
    }

    public void send_addSiteStatus(java.lang.String site, MoutanSiteStatusType type, int time, int count) throws org.apache.thrift.TException
    {
      addSiteStatus_args args = new addSiteStatus_args();
      args.setSite(site);
      args.setType(type);
      args.setTime(time);
      args.setCount(count);
      sendBase("addSiteStatus", args);
    }

    public boolean recv_addSiteStatus() throws SystemException, CodeException, org.apache.thrift.TException
    {
      addSiteStatus_result result = new addSiteStatus_result();
      receiveBase(result, "addSiteStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addSiteStatus failed: unknown result");
    }

    public boolean smsUnsubscribe(java.lang.String mobile) throws SystemException, CodeException, org.apache.thrift.TException
    {
      send_smsUnsubscribe(mobile);
      return recv_smsUnsubscribe();
    }

    public void send_smsUnsubscribe(java.lang.String mobile) throws org.apache.thrift.TException
    {
      smsUnsubscribe_args args = new smsUnsubscribe_args();
      args.setMobile(mobile);
      sendBase("smsUnsubscribe", args);
    }

    public boolean recv_smsUnsubscribe() throws SystemException, CodeException, org.apache.thrift.TException
    {
      smsUnsubscribe_result result = new smsUnsubscribe_result();
      receiveBase(result, "smsUnsubscribe");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.sys_exc != null) {
        throw result.sys_exc;
      }
      if (result.code_exc != null) {
        throw result.code_exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "smsUnsubscribe failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void ping(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ping_call method_call = new ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ping_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
      public ping_call(org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ping_args args = new ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Void getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return null;
      }
    }

    public void getSite(java.lang.String gid, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSite_call method_call = new getSite_call(gid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSite_call extends org.apache.thrift.async.TAsyncMethodCall<TSite> {
      private java.lang.String gid;
      public getSite_call(java.lang.String gid, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gid = gid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSite_args args = new getSite_args();
        args.setGid(gid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSite getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSite();
      }
    }

    public void getMultiSite(java.util.List<java.lang.String> gids, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSite>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMultiSite_call method_call = new getMultiSite_call(gids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMultiSite_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,TSite>> {
      private java.util.List<java.lang.String> gids;
      public getMultiSite_call(java.util.List<java.lang.String> gids, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSite>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gids = gids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMultiSite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMultiSite_args args = new getMultiSite_args();
        args.setGids(gids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,TSite> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMultiSite();
      }
    }

    public void getSiteByName(java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSiteByName_call method_call = new getSiteByName_call(name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSiteByName_call extends org.apache.thrift.async.TAsyncMethodCall<TSite> {
      private java.lang.String name;
      public getSiteByName_call(java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSiteByName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSiteByName_args args = new getSiteByName_args();
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSite getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSiteByName();
      }
    }

    public void querySiteByUser(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySiteByUser_call method_call = new querySiteByUser_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySiteByUser_call extends org.apache.thrift.async.TAsyncMethodCall<TSearchResult> {
      private java.lang.String userId;
      public querySiteByUser_call(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySiteByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySiteByUser_args args = new querySiteByUser_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSearchResult getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySiteByUser();
      }
    }

    public void updateSite(java.lang.String sitegid, TSiteUpdate attrs, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateSite_call method_call = new updateSite_call(sitegid, attrs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateSite_call extends org.apache.thrift.async.TAsyncMethodCall<TSite> {
      private java.lang.String sitegid;
      private TSiteUpdate attrs;
      public updateSite_call(java.lang.String sitegid, TSiteUpdate attrs, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.sitegid = sitegid;
        this.attrs = attrs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateSite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateSite_args args = new updateSite_args();
        args.setSitegid(sitegid);
        args.setAttrs(attrs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSite getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateSite();
      }
    }

    public void getAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAds_call method_call = new getAds_call(siteId, arguments, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAds_call extends org.apache.thrift.async.TAsyncMethodCall<TSearchResult> {
      private java.lang.String siteId;
      private java.util.Map<java.lang.String,java.lang.String> arguments;
      private TQueryOptions options;
      public getAds_call(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.siteId = siteId;
        this.arguments = arguments;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAds_args args = new getAds_args();
        args.setSiteId(siteId);
        args.setArguments(arguments);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSearchResult getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAds();
      }
    }

    public void getOrganicAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getOrganicAds_call method_call = new getOrganicAds_call(siteId, arguments, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getOrganicAds_call extends org.apache.thrift.async.TAsyncMethodCall<TSearchResult> {
      private java.lang.String siteId;
      private java.util.Map<java.lang.String,java.lang.String> arguments;
      private TQueryOptions options;
      public getOrganicAds_call(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.siteId = siteId;
        this.arguments = arguments;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getOrganicAds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getOrganicAds_args args = new getOrganicAds_args();
        args.setSiteId(siteId);
        args.setArguments(arguments);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSearchResult getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getOrganicAds();
      }
    }

    public void getCollectedAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCollectedAds_call method_call = new getCollectedAds_call(siteId, arguments, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCollectedAds_call extends org.apache.thrift.async.TAsyncMethodCall<TSearchResult> {
      private java.lang.String siteId;
      private java.util.Map<java.lang.String,java.lang.String> arguments;
      private TQueryOptions options;
      public getCollectedAds_call(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.siteId = siteId;
        this.arguments = arguments;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectedAds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCollectedAds_args args = new getCollectedAds_args();
        args.setSiteId(siteId);
        args.setArguments(arguments);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSearchResult getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCollectedAds();
      }
    }

    public void getCollectibleAds(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getCollectibleAds_call method_call = new getCollectibleAds_call(siteId, arguments, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getCollectibleAds_call extends org.apache.thrift.async.TAsyncMethodCall<TSearchResult> {
      private java.lang.String siteId;
      private java.util.Map<java.lang.String,java.lang.String> arguments;
      private TQueryOptions options;
      public getCollectibleAds_call(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.siteId = siteId;
        this.arguments = arguments;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getCollectibleAds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getCollectibleAds_args args = new getCollectibleAds_args();
        args.setSiteId(siteId);
        args.setArguments(arguments);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSearchResult getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getCollectibleAds();
      }
    }

    public void getAdsByUser(java.lang.String siteId, java.lang.String userId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdsByUser_call method_call = new getAdsByUser_call(siteId, userId, arguments, options, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdsByUser_call extends org.apache.thrift.async.TAsyncMethodCall<TSearchResult> {
      private java.lang.String siteId;
      private java.lang.String userId;
      private java.util.Map<java.lang.String,java.lang.String> arguments;
      private TQueryOptions options;
      public getAdsByUser_call(java.lang.String siteId, java.lang.String userId, java.util.Map<java.lang.String,java.lang.String> arguments, TQueryOptions options, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.siteId = siteId;
        this.userId = userId;
        this.arguments = arguments;
        this.options = options;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdsByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdsByUser_args args = new getAdsByUser_args();
        args.setSiteId(siteId);
        args.setUserId(userId);
        args.setArguments(arguments);
        args.setOptions(options);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSearchResult getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdsByUser();
      }
    }

    public void collectAdToSite(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      collectAdToSite_call method_call = new collectAdToSite_call(adId, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class collectAdToSite_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String adId;
      private java.lang.String siteId;
      public collectAdToSite_call(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("collectAdToSite", org.apache.thrift.protocol.TMessageType.CALL, 0));
        collectAdToSite_args args = new collectAdToSite_args();
        args.setAdId(adId);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_collectAdToSite();
      }
    }

    public void getMoutanAd(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<TMoutanAd> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMoutanAd_call method_call = new getMoutanAd_call(adId, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMoutanAd_call extends org.apache.thrift.async.TAsyncMethodCall<TMoutanAd> {
      private java.lang.String adId;
      private java.lang.String siteId;
      public getMoutanAd_call(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<TMoutanAd> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMoutanAd", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMoutanAd_args args = new getMoutanAd_args();
        args.setAdId(adId);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TMoutanAd getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMoutanAd();
      }
    }

    public void getMoutanAds(java.util.List<java.lang.String> adIds, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TMoutanAd>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getMoutanAds_call method_call = new getMoutanAds_call(adIds, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getMoutanAds_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,TMoutanAd>> {
      private java.util.List<java.lang.String> adIds;
      private java.lang.String siteId;
      public getMoutanAds_call(java.util.List<java.lang.String> adIds, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TMoutanAd>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adIds = adIds;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getMoutanAds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getMoutanAds_args args = new getMoutanAds_args();
        args.setAdIds(adIds);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,TMoutanAd> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getMoutanAds();
      }
    }

    public void getAdStatus(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<TSiteAdStatus> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdStatus_call method_call = new getAdStatus_call(adId, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdStatus_call extends org.apache.thrift.async.TAsyncMethodCall<TSiteAdStatus> {
      private java.lang.String adId;
      private java.lang.String siteId;
      public getAdStatus_call(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<TSiteAdStatus> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdStatus_args args = new getAdStatus_args();
        args.setAdId(adId);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TSiteAdStatus getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdStatus();
      }
    }

    public void getAdsStatus(java.util.List<java.lang.String> adIds, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSiteAdStatus>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdsStatus_call method_call = new getAdsStatus_call(adIds, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdsStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,TSiteAdStatus>> {
      private java.util.List<java.lang.String> adIds;
      private java.lang.String siteId;
      public getAdsStatus_call(java.util.List<java.lang.String> adIds, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSiteAdStatus>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adIds = adIds;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdsStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdsStatus_args args = new getAdsStatus_args();
        args.setAdIds(adIds);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,TSiteAdStatus> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdsStatus();
      }
    }

    public void returnToModify(java.lang.String adId, java.lang.String siteId, java.lang.String reason, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      returnToModify_call method_call = new returnToModify_call(adId, siteId, reason, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class returnToModify_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String adId;
      private java.lang.String siteId;
      private java.lang.String reason;
      public returnToModify_call(java.lang.String adId, java.lang.String siteId, java.lang.String reason, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.siteId = siteId;
        this.reason = reason;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("returnToModify", org.apache.thrift.protocol.TMessageType.CALL, 0));
        returnToModify_args args = new returnToModify_args();
        args.setAdId(adId);
        args.setSiteId(siteId);
        args.setReason(reason);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_returnToModify();
      }
    }

    public void modifyToReview(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      modifyToReview_call method_call = new modifyToReview_call(adId, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class modifyToReview_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String adId;
      private java.lang.String siteId;
      public modifyToReview_call(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("modifyToReview", org.apache.thrift.protocol.TMessageType.CALL, 0));
        modifyToReview_args args = new modifyToReview_args();
        args.setAdId(adId);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_modifyToReview();
      }
    }

    public void updateAdStatus(java.lang.String adId, java.lang.String siteId, SiteAdStatus status, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAdStatus_call method_call = new updateAdStatus_call(adId, siteId, status, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAdStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String adId;
      private java.lang.String siteId;
      private SiteAdStatus status;
      public updateAdStatus_call(java.lang.String adId, java.lang.String siteId, SiteAdStatus status, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.siteId = siteId;
        this.status = status;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAdStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAdStatus_args args = new updateAdStatus_args();
        args.setAdId(adId);
        args.setSiteId(siteId);
        args.setStatus(status);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAdStatus();
      }
    }

    public void eliminate(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      eliminate_call method_call = new eliminate_call(adId, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class eliminate_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String adId;
      private java.lang.String siteId;
      public eliminate_call(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("eliminate", org.apache.thrift.protocol.TMessageType.CALL, 0));
        eliminate_args args = new eliminate_args();
        args.setAdId(adId);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_eliminate();
      }
    }

    public void refresh(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      refresh_call method_call = new refresh_call(adId, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class refresh_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String adId;
      private java.lang.String siteId;
      public refresh_call(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("refresh", org.apache.thrift.protocol.TMessageType.CALL, 0));
        refresh_args args = new refresh_args();
        args.setAdId(adId);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_refresh();
      }
    }

    public void ding(java.lang.String adId, java.lang.String siteId, int days, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ding_call method_call = new ding_call(adId, siteId, days, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ding_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String adId;
      private java.lang.String siteId;
      private int days;
      public ding_call(java.lang.String adId, java.lang.String siteId, int days, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.siteId = siteId;
        this.days = days;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ding", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ding_args args = new ding_args();
        args.setAdId(adId);
        args.setSiteId(siteId);
        args.setDays(days);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ding();
      }
    }

    public void isInDing(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isInDing_call method_call = new isInDing_call(adId, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isInDing_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String adId;
      private java.lang.String siteId;
      public isInDing_call(java.lang.String adId, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isInDing", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isInDing_args args = new isInDing_args();
        args.setAdId(adId);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isInDing();
      }
    }

    public void getDingAdIds(java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDingAdIds_call method_call = new getDingAdIds_call(siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDingAdIds_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      private java.lang.String siteId;
      public getDingAdIds_call(java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDingAdIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDingAdIds_args args = new getDingAdIds_args();
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDingAdIds();
      }
    }

    public void getAdCount(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdCount_call method_call = new getAdCount_call(uid, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String uid;
      private java.lang.String siteId;
      public getAdCount_call(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdCount_args args = new getAdCount_args();
        args.setUid(uid);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdCount();
      }
    }

    public void getAdCountToday(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdCountToday_call method_call = new getAdCountToday_call(uid, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdCountToday_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String uid;
      private java.lang.String siteId;
      public getAdCountToday_call(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdCountToday", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdCountToday_args args = new getAdCountToday_args();
        args.setUid(uid);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdCountToday();
      }
    }

    public void getPaidAdCount(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPaidAdCount_call method_call = new getPaidAdCount_call(uid, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPaidAdCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String uid;
      private java.lang.String siteId;
      public getPaidAdCount_call(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPaidAdCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPaidAdCount_args args = new getPaidAdCount_args();
        args.setUid(uid);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPaidAdCount();
      }
    }

    public void getPaidAdCountToday(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPaidAdCountToday_call method_call = new getPaidAdCountToday_call(uid, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPaidAdCountToday_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.lang.String uid;
      private java.lang.String siteId;
      public getPaidAdCountToday_call(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPaidAdCountToday", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPaidAdCountToday_args args = new getPaidAdCountToday_args();
        args.setUid(uid);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPaidAdCountToday();
      }
    }

    public void sendRuleNotice(java.lang.String adId, java.lang.String reason, java.lang.String action, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendRuleNotice_call method_call = new sendRuleNotice_call(adId, reason, action, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendRuleNotice_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String adId;
      private java.lang.String reason;
      private java.lang.String action;
      public sendRuleNotice_call(java.lang.String adId, java.lang.String reason, java.lang.String action, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.reason = reason;
        this.action = action;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendRuleNotice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendRuleNotice_args args = new sendRuleNotice_args();
        args.setAdId(adId);
        args.setReason(reason);
        args.setAction(action);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendRuleNotice();
      }
    }

    public void createAdDraft(java.lang.String adId, java.lang.String siteId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAdDraft_call method_call = new createAdDraft_call(adId, siteId, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createAdDraft_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String adId;
      private java.lang.String siteId;
      private java.lang.String data;
      public createAdDraft_call(java.lang.String adId, java.lang.String siteId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.adId = adId;
        this.siteId = siteId;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAdDraft", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAdDraft_args args = new createAdDraft_args();
        args.setAdId(adId);
        args.setSiteId(siteId);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAdDraft();
      }
    }

    public void updateAdDraft(java.lang.String draftId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAdDraft_call method_call = new updateAdDraft_call(draftId, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAdDraft_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String draftId;
      private java.lang.String data;
      public updateAdDraft_call(java.lang.String draftId, java.lang.String data, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.draftId = draftId;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAdDraft", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAdDraft_args args = new updateAdDraft_args();
        args.setDraftId(draftId);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAdDraft();
      }
    }

    public void updateAdDraftPostOrderId(java.lang.String draftId, java.lang.String postOrderId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateAdDraftPostOrderId_call method_call = new updateAdDraftPostOrderId_call(draftId, postOrderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateAdDraftPostOrderId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String draftId;
      private java.lang.String postOrderId;
      public updateAdDraftPostOrderId_call(java.lang.String draftId, java.lang.String postOrderId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.draftId = draftId;
        this.postOrderId = postOrderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateAdDraftPostOrderId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateAdDraftPostOrderId_args args = new updateAdDraftPostOrderId_args();
        args.setDraftId(draftId);
        args.setPostOrderId(postOrderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateAdDraftPostOrderId();
      }
    }

    public void setPaidAdDraft(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setPaidAdDraft_call method_call = new setPaidAdDraft_call(draftId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setPaidAdDraft_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String draftId;
      public setPaidAdDraft_call(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.draftId = draftId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setPaidAdDraft", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setPaidAdDraft_args args = new setPaidAdDraft_args();
        args.setDraftId(draftId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setPaidAdDraft();
      }
    }

    public void isAdDraftPaid(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      isAdDraftPaid_call method_call = new isAdDraftPaid_call(draftId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class isAdDraftPaid_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String draftId;
      public isAdDraftPaid_call(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.draftId = draftId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("isAdDraftPaid", org.apache.thrift.protocol.TMessageType.CALL, 0));
        isAdDraftPaid_args args = new isAdDraftPaid_args();
        args.setDraftId(draftId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_isAdDraftPaid();
      }
    }

    public void deleteAdDraft(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAdDraft_call method_call = new deleteAdDraft_call(draftId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteAdDraft_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String draftId;
      public deleteAdDraft_call(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.draftId = draftId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAdDraft", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAdDraft_args args = new deleteAdDraft_args();
        args.setDraftId(draftId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteAdDraft();
      }
    }

    public void getAdDraft(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<TAdDraft> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAdDraft_call method_call = new getAdDraft_call(draftId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAdDraft_call extends org.apache.thrift.async.TAsyncMethodCall<TAdDraft> {
      private java.lang.String draftId;
      public getAdDraft_call(java.lang.String draftId, org.apache.thrift.async.AsyncMethodCallback<TAdDraft> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.draftId = draftId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAdDraft", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAdDraft_args args = new getAdDraft_args();
        args.setDraftId(draftId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TAdDraft getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAdDraft();
      }
    }

    public void queryAdDraftsByUser(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAdDraft>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryAdDraftsByUser_call method_call = new queryAdDraftsByUser_call(uid, siteId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryAdDraftsByUser_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<TAdDraft>> {
      private java.lang.String uid;
      private java.lang.String siteId;
      public queryAdDraftsByUser_call(java.lang.String uid, java.lang.String siteId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAdDraft>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.siteId = siteId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryAdDraftsByUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryAdDraftsByUser_args args = new queryAdDraftsByUser_args();
        args.setUid(uid);
        args.setSiteId(siteId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<TAdDraft> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryAdDraftsByUser();
      }
    }

    public void getUnreadCount(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.Integer> types, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getUnreadCount_call method_call = new getUnreadCount_call(siteId, types, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getUnreadCount_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,java.lang.Integer>> {
      private java.lang.String siteId;
      private java.util.Map<java.lang.String,java.lang.Integer> types;
      public getUnreadCount_call(java.lang.String siteId, java.util.Map<java.lang.String,java.lang.Integer> types, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.siteId = siteId;
        this.types = types;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getUnreadCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getUnreadCount_args args = new getUnreadCount_args();
        args.setSiteId(siteId);
        args.setTypes(types);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,java.lang.Integer> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getUnreadCount();
      }
    }

    public void getImageConfig(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TImageConfig>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getImageConfig_call method_call = new getImageConfig_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getImageConfig_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,TImageConfig>> {
      public getImageConfig_call(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TImageConfig>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getImageConfig", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getImageConfig_args args = new getImageConfig_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,TImageConfig> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getImageConfig();
      }
    }

    public void getSensitiveWords(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSensitiveWords_call method_call = new getSensitiveWords_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSensitiveWords_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.lang.String>> {
      public getSensitiveWords_call(org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSensitiveWords", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSensitiveWords_args args = new getSensitiveWords_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.lang.String> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSensitiveWords();
      }
    }

    public void sendSMS(java.util.List<java.lang.String> mobiles, java.lang.String content, java.lang.String source, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendSMS_call method_call = new sendSMS_call(mobiles, content, source, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendSMS_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private java.util.List<java.lang.String> mobiles;
      private java.lang.String content;
      private java.lang.String source;
      public sendSMS_call(java.util.List<java.lang.String> mobiles, java.lang.String content, java.lang.String source, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mobiles = mobiles;
        this.content = content;
        this.source = source;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendSMS", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendSMS_args args = new sendSMS_args();
        args.setMobiles(mobiles);
        args.setContent(content);
        args.setSource(source);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sendSMS();
      }
    }

    public void getSiteStatus(java.lang.String gid, java.lang.String time, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<MoutanSiteStatusType,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSiteStatus_call method_call = new getSiteStatus_call(gid, time, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSiteStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<MoutanSiteStatusType,java.lang.String>> {
      private java.lang.String gid;
      private java.lang.String time;
      public getSiteStatus_call(java.lang.String gid, java.lang.String time, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<MoutanSiteStatusType,java.lang.String>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gid = gid;
        this.time = time;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSiteStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSiteStatus_args args = new getSiteStatus_args();
        args.setGid(gid);
        args.setTime(time);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<MoutanSiteStatusType,java.lang.String> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSiteStatus();
      }
    }

    public void createOrder(java.lang.String uid, int type, java.lang.String consumerUid, int price, java.lang.String siteId, java.lang.String addition, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createOrder_call method_call = new createOrder_call(uid, type, consumerUid, price, siteId, addition, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createOrder_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private java.lang.String uid;
      private int type;
      private java.lang.String consumerUid;
      private int price;
      private java.lang.String siteId;
      private java.lang.String addition;
      public createOrder_call(java.lang.String uid, int type, java.lang.String consumerUid, int price, java.lang.String siteId, java.lang.String addition, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.type = type;
        this.consumerUid = consumerUid;
        this.price = price;
        this.siteId = siteId;
        this.addition = addition;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createOrder_args args = new createOrder_args();
        args.setUid(uid);
        args.setType(type);
        args.setConsumerUid(consumerUid);
        args.setPrice(price);
        args.setSiteId(siteId);
        args.setAddition(addition);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createOrder();
      }
    }

    public void disposeOrder(long orderId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      disposeOrder_call method_call = new disposeOrder_call(orderId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class disposeOrder_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private long orderId;
      public disposeOrder_call(long orderId, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.orderId = orderId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("disposeOrder", org.apache.thrift.protocol.TMessageType.CALL, 0));
        disposeOrder_args args = new disposeOrder_args();
        args.setOrderId(orderId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_disposeOrder();
      }
    }

    public void getDashboardInfo(java.lang.String uid, int limit, int offset, org.apache.thrift.async.AsyncMethodCallback<TDashboardInfo> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getDashboardInfo_call method_call = new getDashboardInfo_call(uid, limit, offset, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getDashboardInfo_call extends org.apache.thrift.async.TAsyncMethodCall<TDashboardInfo> {
      private java.lang.String uid;
      private int limit;
      private int offset;
      public getDashboardInfo_call(java.lang.String uid, int limit, int offset, org.apache.thrift.async.AsyncMethodCallback<TDashboardInfo> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uid = uid;
        this.limit = limit;
        this.offset = offset;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getDashboardInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getDashboardInfo_args args = new getDashboardInfo_args();
        args.setUid(uid);
        args.setLimit(limit);
        args.setOffset(offset);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public TDashboardInfo getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getDashboardInfo();
      }
    }

    public void getAreaLevelFirstMulti(java.util.List<java.lang.String> gids, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TArea>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAreaLevelFirstMulti_call method_call = new getAreaLevelFirstMulti_call(gids, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAreaLevelFirstMulti_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,TArea>> {
      private java.util.List<java.lang.String> gids;
      public getAreaLevelFirstMulti_call(java.util.List<java.lang.String> gids, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TArea>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.gids = gids;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAreaLevelFirstMulti", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAreaLevelFirstMulti_args args = new getAreaLevelFirstMulti_args();
        args.setGids(gids);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,TArea> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAreaLevelFirstMulti();
      }
    }

    public void getAllCategories(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TCategory>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllCategories_call method_call = new getAllCategories_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllCategories_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.Map<java.lang.String,TCategory>> {
      public getAllCategories_call(org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TCategory>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllCategories", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllCategories_args args = new getAllCategories_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.Map<java.lang.String,TCategory> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllCategories();
      }
    }

    public void getSchema(java.lang.String categoryId, java.lang.String areaId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSchema_call method_call = new getSchema_call(categoryId, areaId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSchema_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> {
      private java.lang.String categoryId;
      private java.lang.String areaId;
      public getSchema_call(java.lang.String categoryId, java.lang.String areaId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.categoryId = categoryId;
        this.areaId = areaId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSchema", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSchema_args args = new getSchema_args();
        args.setCategoryId(categoryId);
        args.setAreaId(areaId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSchema();
      }
    }

    public void log(int type, java.lang.String siteId, java.lang.String userId, java.lang.String objectId, java.lang.String objectInfo, java.lang.String description, java.util.Map<java.lang.String,java.lang.String> attributeData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      log_call method_call = new log_call(type, siteId, userId, objectId, objectInfo, description, attributeData, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class log_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private int type;
      private java.lang.String siteId;
      private java.lang.String userId;
      private java.lang.String objectId;
      private java.lang.String objectInfo;
      private java.lang.String description;
      private java.util.Map<java.lang.String,java.lang.String> attributeData;
      public log_call(int type, java.lang.String siteId, java.lang.String userId, java.lang.String objectId, java.lang.String objectInfo, java.lang.String description, java.util.Map<java.lang.String,java.lang.String> attributeData, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.type = type;
        this.siteId = siteId;
        this.userId = userId;
        this.objectId = objectId;
        this.objectInfo = objectInfo;
        this.description = description;
        this.attributeData = attributeData;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("log", org.apache.thrift.protocol.TMessageType.CALL, 0));
        log_args args = new log_args();
        args.setType(type);
        args.setSiteId(siteId);
        args.setUserId(userId);
        args.setObjectId(objectId);
        args.setObjectInfo(objectInfo);
        args.setDescription(description);
        args.setAttributeData(attributeData);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_log();
      }
    }

    public void addSiteStatus(java.lang.String site, MoutanSiteStatusType type, int time, int count, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addSiteStatus_call method_call = new addSiteStatus_call(site, type, time, count, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addSiteStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String site;
      private MoutanSiteStatusType type;
      private int time;
      private int count;
      public addSiteStatus_call(java.lang.String site, MoutanSiteStatusType type, int time, int count, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.site = site;
        this.type = type;
        this.time = time;
        this.count = count;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addSiteStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addSiteStatus_args args = new addSiteStatus_args();
        args.setSite(site);
        args.setType(type);
        args.setTime(time);
        args.setCount(count);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addSiteStatus();
      }
    }

    public void smsUnsubscribe(java.lang.String mobile, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      smsUnsubscribe_call method_call = new smsUnsubscribe_call(mobile, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class smsUnsubscribe_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private java.lang.String mobile;
      public smsUnsubscribe_call(java.lang.String mobile, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.mobile = mobile;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("smsUnsubscribe", org.apache.thrift.protocol.TMessageType.CALL, 0));
        smsUnsubscribe_args args = new smsUnsubscribe_args();
        args.setMobile(mobile);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws SystemException, CodeException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_smsUnsubscribe();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getSite", new getSite());
      processMap.put("getMultiSite", new getMultiSite());
      processMap.put("getSiteByName", new getSiteByName());
      processMap.put("querySiteByUser", new querySiteByUser());
      processMap.put("updateSite", new updateSite());
      processMap.put("getAds", new getAds());
      processMap.put("getOrganicAds", new getOrganicAds());
      processMap.put("getCollectedAds", new getCollectedAds());
      processMap.put("getCollectibleAds", new getCollectibleAds());
      processMap.put("getAdsByUser", new getAdsByUser());
      processMap.put("collectAdToSite", new collectAdToSite());
      processMap.put("getMoutanAd", new getMoutanAd());
      processMap.put("getMoutanAds", new getMoutanAds());
      processMap.put("getAdStatus", new getAdStatus());
      processMap.put("getAdsStatus", new getAdsStatus());
      processMap.put("returnToModify", new returnToModify());
      processMap.put("modifyToReview", new modifyToReview());
      processMap.put("updateAdStatus", new updateAdStatus());
      processMap.put("eliminate", new eliminate());
      processMap.put("refresh", new refresh());
      processMap.put("ding", new ding());
      processMap.put("isInDing", new isInDing());
      processMap.put("getDingAdIds", new getDingAdIds());
      processMap.put("getAdCount", new getAdCount());
      processMap.put("getAdCountToday", new getAdCountToday());
      processMap.put("getPaidAdCount", new getPaidAdCount());
      processMap.put("getPaidAdCountToday", new getPaidAdCountToday());
      processMap.put("sendRuleNotice", new sendRuleNotice());
      processMap.put("createAdDraft", new createAdDraft());
      processMap.put("updateAdDraft", new updateAdDraft());
      processMap.put("updateAdDraftPostOrderId", new updateAdDraftPostOrderId());
      processMap.put("setPaidAdDraft", new setPaidAdDraft());
      processMap.put("isAdDraftPaid", new isAdDraftPaid());
      processMap.put("deleteAdDraft", new deleteAdDraft());
      processMap.put("getAdDraft", new getAdDraft());
      processMap.put("queryAdDraftsByUser", new queryAdDraftsByUser());
      processMap.put("getUnreadCount", new getUnreadCount());
      processMap.put("getImageConfig", new getImageConfig());
      processMap.put("getSensitiveWords", new getSensitiveWords());
      processMap.put("sendSMS", new sendSMS());
      processMap.put("getSiteStatus", new getSiteStatus());
      processMap.put("createOrder", new createOrder());
      processMap.put("disposeOrder", new disposeOrder());
      processMap.put("getDashboardInfo", new getDashboardInfo());
      processMap.put("getAreaLevelFirstMulti", new getAreaLevelFirstMulti());
      processMap.put("getAllCategories", new getAllCategories());
      processMap.put("getSchema", new getSchema());
      processMap.put("log", new log());
      processMap.put("addSiteStatus", new addSiteStatus());
      processMap.put("smsUnsubscribe", new smsUnsubscribe());
      return processMap;
    }

    public static class ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ping_args> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ping_result getResult(I iface, ping_args args) throws org.apache.thrift.TException {
        ping_result result = new ping_result();
        try {
          iface.ping();
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getSite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSite_args> {
      public getSite() {
        super("getSite");
      }

      public getSite_args getEmptyArgsInstance() {
        return new getSite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSite_result getResult(I iface, getSite_args args) throws org.apache.thrift.TException {
        getSite_result result = new getSite_result();
        try {
          result.success = iface.getSite(args.gid);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getMultiSite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMultiSite_args> {
      public getMultiSite() {
        super("getMultiSite");
      }

      public getMultiSite_args getEmptyArgsInstance() {
        return new getMultiSite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMultiSite_result getResult(I iface, getMultiSite_args args) throws org.apache.thrift.TException {
        getMultiSite_result result = new getMultiSite_result();
        try {
          result.success = iface.getMultiSite(args.gids);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getSiteByName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSiteByName_args> {
      public getSiteByName() {
        super("getSiteByName");
      }

      public getSiteByName_args getEmptyArgsInstance() {
        return new getSiteByName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSiteByName_result getResult(I iface, getSiteByName_args args) throws org.apache.thrift.TException {
        getSiteByName_result result = new getSiteByName_result();
        try {
          result.success = iface.getSiteByName(args.name);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class querySiteByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySiteByUser_args> {
      public querySiteByUser() {
        super("querySiteByUser");
      }

      public querySiteByUser_args getEmptyArgsInstance() {
        return new querySiteByUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySiteByUser_result getResult(I iface, querySiteByUser_args args) throws org.apache.thrift.TException {
        querySiteByUser_result result = new querySiteByUser_result();
        try {
          result.success = iface.querySiteByUser(args.userId);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class updateSite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateSite_args> {
      public updateSite() {
        super("updateSite");
      }

      public updateSite_args getEmptyArgsInstance() {
        return new updateSite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateSite_result getResult(I iface, updateSite_args args) throws org.apache.thrift.TException {
        updateSite_result result = new updateSite_result();
        try {
          result.success = iface.updateSite(args.sitegid, args.attrs);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getAds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAds_args> {
      public getAds() {
        super("getAds");
      }

      public getAds_args getEmptyArgsInstance() {
        return new getAds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAds_result getResult(I iface, getAds_args args) throws org.apache.thrift.TException {
        getAds_result result = new getAds_result();
        try {
          result.success = iface.getAds(args.siteId, args.arguments, args.options);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getOrganicAds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getOrganicAds_args> {
      public getOrganicAds() {
        super("getOrganicAds");
      }

      public getOrganicAds_args getEmptyArgsInstance() {
        return new getOrganicAds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getOrganicAds_result getResult(I iface, getOrganicAds_args args) throws org.apache.thrift.TException {
        getOrganicAds_result result = new getOrganicAds_result();
        try {
          result.success = iface.getOrganicAds(args.siteId, args.arguments, args.options);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getCollectedAds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectedAds_args> {
      public getCollectedAds() {
        super("getCollectedAds");
      }

      public getCollectedAds_args getEmptyArgsInstance() {
        return new getCollectedAds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCollectedAds_result getResult(I iface, getCollectedAds_args args) throws org.apache.thrift.TException {
        getCollectedAds_result result = new getCollectedAds_result();
        try {
          result.success = iface.getCollectedAds(args.siteId, args.arguments, args.options);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getCollectibleAds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getCollectibleAds_args> {
      public getCollectibleAds() {
        super("getCollectibleAds");
      }

      public getCollectibleAds_args getEmptyArgsInstance() {
        return new getCollectibleAds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getCollectibleAds_result getResult(I iface, getCollectibleAds_args args) throws org.apache.thrift.TException {
        getCollectibleAds_result result = new getCollectibleAds_result();
        try {
          result.success = iface.getCollectibleAds(args.siteId, args.arguments, args.options);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getAdsByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdsByUser_args> {
      public getAdsByUser() {
        super("getAdsByUser");
      }

      public getAdsByUser_args getEmptyArgsInstance() {
        return new getAdsByUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAdsByUser_result getResult(I iface, getAdsByUser_args args) throws org.apache.thrift.TException {
        getAdsByUser_result result = new getAdsByUser_result();
        try {
          result.success = iface.getAdsByUser(args.siteId, args.userId, args.arguments, args.options);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class collectAdToSite<I extends Iface> extends org.apache.thrift.ProcessFunction<I, collectAdToSite_args> {
      public collectAdToSite() {
        super("collectAdToSite");
      }

      public collectAdToSite_args getEmptyArgsInstance() {
        return new collectAdToSite_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public collectAdToSite_result getResult(I iface, collectAdToSite_args args) throws org.apache.thrift.TException {
        collectAdToSite_result result = new collectAdToSite_result();
        try {
          result.success = iface.collectAdToSite(args.adId, args.siteId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getMoutanAd<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMoutanAd_args> {
      public getMoutanAd() {
        super("getMoutanAd");
      }

      public getMoutanAd_args getEmptyArgsInstance() {
        return new getMoutanAd_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMoutanAd_result getResult(I iface, getMoutanAd_args args) throws org.apache.thrift.TException {
        getMoutanAd_result result = new getMoutanAd_result();
        try {
          result.success = iface.getMoutanAd(args.adId, args.siteId);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getMoutanAds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getMoutanAds_args> {
      public getMoutanAds() {
        super("getMoutanAds");
      }

      public getMoutanAds_args getEmptyArgsInstance() {
        return new getMoutanAds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getMoutanAds_result getResult(I iface, getMoutanAds_args args) throws org.apache.thrift.TException {
        getMoutanAds_result result = new getMoutanAds_result();
        try {
          result.success = iface.getMoutanAds(args.adIds, args.siteId);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getAdStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdStatus_args> {
      public getAdStatus() {
        super("getAdStatus");
      }

      public getAdStatus_args getEmptyArgsInstance() {
        return new getAdStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAdStatus_result getResult(I iface, getAdStatus_args args) throws org.apache.thrift.TException {
        getAdStatus_result result = new getAdStatus_result();
        try {
          result.success = iface.getAdStatus(args.adId, args.siteId);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getAdsStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdsStatus_args> {
      public getAdsStatus() {
        super("getAdsStatus");
      }

      public getAdsStatus_args getEmptyArgsInstance() {
        return new getAdsStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAdsStatus_result getResult(I iface, getAdsStatus_args args) throws org.apache.thrift.TException {
        getAdsStatus_result result = new getAdsStatus_result();
        try {
          result.success = iface.getAdsStatus(args.adIds, args.siteId);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class returnToModify<I extends Iface> extends org.apache.thrift.ProcessFunction<I, returnToModify_args> {
      public returnToModify() {
        super("returnToModify");
      }

      public returnToModify_args getEmptyArgsInstance() {
        return new returnToModify_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public returnToModify_result getResult(I iface, returnToModify_args args) throws org.apache.thrift.TException {
        returnToModify_result result = new returnToModify_result();
        try {
          result.success = iface.returnToModify(args.adId, args.siteId, args.reason);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class modifyToReview<I extends Iface> extends org.apache.thrift.ProcessFunction<I, modifyToReview_args> {
      public modifyToReview() {
        super("modifyToReview");
      }

      public modifyToReview_args getEmptyArgsInstance() {
        return new modifyToReview_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public modifyToReview_result getResult(I iface, modifyToReview_args args) throws org.apache.thrift.TException {
        modifyToReview_result result = new modifyToReview_result();
        try {
          result.success = iface.modifyToReview(args.adId, args.siteId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class updateAdStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAdStatus_args> {
      public updateAdStatus() {
        super("updateAdStatus");
      }

      public updateAdStatus_args getEmptyArgsInstance() {
        return new updateAdStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAdStatus_result getResult(I iface, updateAdStatus_args args) throws org.apache.thrift.TException {
        updateAdStatus_result result = new updateAdStatus_result();
        try {
          result.success = iface.updateAdStatus(args.adId, args.siteId, args.status);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class eliminate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, eliminate_args> {
      public eliminate() {
        super("eliminate");
      }

      public eliminate_args getEmptyArgsInstance() {
        return new eliminate_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public eliminate_result getResult(I iface, eliminate_args args) throws org.apache.thrift.TException {
        eliminate_result result = new eliminate_result();
        try {
          result.success = iface.eliminate(args.adId, args.siteId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class refresh<I extends Iface> extends org.apache.thrift.ProcessFunction<I, refresh_args> {
      public refresh() {
        super("refresh");
      }

      public refresh_args getEmptyArgsInstance() {
        return new refresh_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public refresh_result getResult(I iface, refresh_args args) throws org.apache.thrift.TException {
        refresh_result result = new refresh_result();
        try {
          result.success = iface.refresh(args.adId, args.siteId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class ding<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ding_args> {
      public ding() {
        super("ding");
      }

      public ding_args getEmptyArgsInstance() {
        return new ding_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ding_result getResult(I iface, ding_args args) throws org.apache.thrift.TException {
        ding_result result = new ding_result();
        try {
          result.success = iface.ding(args.adId, args.siteId, args.days);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class isInDing<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isInDing_args> {
      public isInDing() {
        super("isInDing");
      }

      public isInDing_args getEmptyArgsInstance() {
        return new isInDing_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isInDing_result getResult(I iface, isInDing_args args) throws org.apache.thrift.TException {
        isInDing_result result = new isInDing_result();
        try {
          result.success = iface.isInDing(args.adId, args.siteId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getDingAdIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDingAdIds_args> {
      public getDingAdIds() {
        super("getDingAdIds");
      }

      public getDingAdIds_args getEmptyArgsInstance() {
        return new getDingAdIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDingAdIds_result getResult(I iface, getDingAdIds_args args) throws org.apache.thrift.TException {
        getDingAdIds_result result = new getDingAdIds_result();
        try {
          result.success = iface.getDingAdIds(args.siteId);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getAdCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdCount_args> {
      public getAdCount() {
        super("getAdCount");
      }

      public getAdCount_args getEmptyArgsInstance() {
        return new getAdCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAdCount_result getResult(I iface, getAdCount_args args) throws org.apache.thrift.TException {
        getAdCount_result result = new getAdCount_result();
        try {
          result.success = iface.getAdCount(args.uid, args.siteId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getAdCountToday<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdCountToday_args> {
      public getAdCountToday() {
        super("getAdCountToday");
      }

      public getAdCountToday_args getEmptyArgsInstance() {
        return new getAdCountToday_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAdCountToday_result getResult(I iface, getAdCountToday_args args) throws org.apache.thrift.TException {
        getAdCountToday_result result = new getAdCountToday_result();
        try {
          result.success = iface.getAdCountToday(args.uid, args.siteId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getPaidAdCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPaidAdCount_args> {
      public getPaidAdCount() {
        super("getPaidAdCount");
      }

      public getPaidAdCount_args getEmptyArgsInstance() {
        return new getPaidAdCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPaidAdCount_result getResult(I iface, getPaidAdCount_args args) throws org.apache.thrift.TException {
        getPaidAdCount_result result = new getPaidAdCount_result();
        try {
          result.success = iface.getPaidAdCount(args.uid, args.siteId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getPaidAdCountToday<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPaidAdCountToday_args> {
      public getPaidAdCountToday() {
        super("getPaidAdCountToday");
      }

      public getPaidAdCountToday_args getEmptyArgsInstance() {
        return new getPaidAdCountToday_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getPaidAdCountToday_result getResult(I iface, getPaidAdCountToday_args args) throws org.apache.thrift.TException {
        getPaidAdCountToday_result result = new getPaidAdCountToday_result();
        try {
          result.success = iface.getPaidAdCountToday(args.uid, args.siteId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class sendRuleNotice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendRuleNotice_args> {
      public sendRuleNotice() {
        super("sendRuleNotice");
      }

      public sendRuleNotice_args getEmptyArgsInstance() {
        return new sendRuleNotice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendRuleNotice_result getResult(I iface, sendRuleNotice_args args) throws org.apache.thrift.TException {
        sendRuleNotice_result result = new sendRuleNotice_result();
        try {
          result.success = iface.sendRuleNotice(args.adId, args.reason, args.action);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class createAdDraft<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createAdDraft_args> {
      public createAdDraft() {
        super("createAdDraft");
      }

      public createAdDraft_args getEmptyArgsInstance() {
        return new createAdDraft_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createAdDraft_result getResult(I iface, createAdDraft_args args) throws org.apache.thrift.TException {
        createAdDraft_result result = new createAdDraft_result();
        try {
          result.success = iface.createAdDraft(args.adId, args.siteId, args.data);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class updateAdDraft<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAdDraft_args> {
      public updateAdDraft() {
        super("updateAdDraft");
      }

      public updateAdDraft_args getEmptyArgsInstance() {
        return new updateAdDraft_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAdDraft_result getResult(I iface, updateAdDraft_args args) throws org.apache.thrift.TException {
        updateAdDraft_result result = new updateAdDraft_result();
        try {
          result.success = iface.updateAdDraft(args.draftId, args.data);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class updateAdDraftPostOrderId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateAdDraftPostOrderId_args> {
      public updateAdDraftPostOrderId() {
        super("updateAdDraftPostOrderId");
      }

      public updateAdDraftPostOrderId_args getEmptyArgsInstance() {
        return new updateAdDraftPostOrderId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateAdDraftPostOrderId_result getResult(I iface, updateAdDraftPostOrderId_args args) throws org.apache.thrift.TException {
        updateAdDraftPostOrderId_result result = new updateAdDraftPostOrderId_result();
        try {
          result.success = iface.updateAdDraftPostOrderId(args.draftId, args.postOrderId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class setPaidAdDraft<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setPaidAdDraft_args> {
      public setPaidAdDraft() {
        super("setPaidAdDraft");
      }

      public setPaidAdDraft_args getEmptyArgsInstance() {
        return new setPaidAdDraft_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setPaidAdDraft_result getResult(I iface, setPaidAdDraft_args args) throws org.apache.thrift.TException {
        setPaidAdDraft_result result = new setPaidAdDraft_result();
        try {
          result.success = iface.setPaidAdDraft(args.draftId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class isAdDraftPaid<I extends Iface> extends org.apache.thrift.ProcessFunction<I, isAdDraftPaid_args> {
      public isAdDraftPaid() {
        super("isAdDraftPaid");
      }

      public isAdDraftPaid_args getEmptyArgsInstance() {
        return new isAdDraftPaid_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public isAdDraftPaid_result getResult(I iface, isAdDraftPaid_args args) throws org.apache.thrift.TException {
        isAdDraftPaid_result result = new isAdDraftPaid_result();
        try {
          result.success = iface.isAdDraftPaid(args.draftId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class deleteAdDraft<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAdDraft_args> {
      public deleteAdDraft() {
        super("deleteAdDraft");
      }

      public deleteAdDraft_args getEmptyArgsInstance() {
        return new deleteAdDraft_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public deleteAdDraft_result getResult(I iface, deleteAdDraft_args args) throws org.apache.thrift.TException {
        deleteAdDraft_result result = new deleteAdDraft_result();
        try {
          result.success = iface.deleteAdDraft(args.draftId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getAdDraft<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAdDraft_args> {
      public getAdDraft() {
        super("getAdDraft");
      }

      public getAdDraft_args getEmptyArgsInstance() {
        return new getAdDraft_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAdDraft_result getResult(I iface, getAdDraft_args args) throws org.apache.thrift.TException {
        getAdDraft_result result = new getAdDraft_result();
        try {
          result.success = iface.getAdDraft(args.draftId);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class queryAdDraftsByUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryAdDraftsByUser_args> {
      public queryAdDraftsByUser() {
        super("queryAdDraftsByUser");
      }

      public queryAdDraftsByUser_args getEmptyArgsInstance() {
        return new queryAdDraftsByUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryAdDraftsByUser_result getResult(I iface, queryAdDraftsByUser_args args) throws org.apache.thrift.TException {
        queryAdDraftsByUser_result result = new queryAdDraftsByUser_result();
        try {
          result.success = iface.queryAdDraftsByUser(args.uid, args.siteId);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getUnreadCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getUnreadCount_args> {
      public getUnreadCount() {
        super("getUnreadCount");
      }

      public getUnreadCount_args getEmptyArgsInstance() {
        return new getUnreadCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getUnreadCount_result getResult(I iface, getUnreadCount_args args) throws org.apache.thrift.TException {
        getUnreadCount_result result = new getUnreadCount_result();
        try {
          result.success = iface.getUnreadCount(args.siteId, args.types);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getImageConfig<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getImageConfig_args> {
      public getImageConfig() {
        super("getImageConfig");
      }

      public getImageConfig_args getEmptyArgsInstance() {
        return new getImageConfig_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getImageConfig_result getResult(I iface, getImageConfig_args args) throws org.apache.thrift.TException {
        getImageConfig_result result = new getImageConfig_result();
        try {
          result.success = iface.getImageConfig();
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getSensitiveWords<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSensitiveWords_args> {
      public getSensitiveWords() {
        super("getSensitiveWords");
      }

      public getSensitiveWords_args getEmptyArgsInstance() {
        return new getSensitiveWords_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSensitiveWords_result getResult(I iface, getSensitiveWords_args args) throws org.apache.thrift.TException {
        getSensitiveWords_result result = new getSensitiveWords_result();
        try {
          result.success = iface.getSensitiveWords();
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class sendSMS<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendSMS_args> {
      public sendSMS() {
        super("sendSMS");
      }

      public sendSMS_args getEmptyArgsInstance() {
        return new sendSMS_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendSMS_result getResult(I iface, sendSMS_args args) throws org.apache.thrift.TException {
        sendSMS_result result = new sendSMS_result();
        try {
          result.success = iface.sendSMS(args.mobiles, args.content, args.source);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getSiteStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSiteStatus_args> {
      public getSiteStatus() {
        super("getSiteStatus");
      }

      public getSiteStatus_args getEmptyArgsInstance() {
        return new getSiteStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSiteStatus_result getResult(I iface, getSiteStatus_args args) throws org.apache.thrift.TException {
        getSiteStatus_result result = new getSiteStatus_result();
        try {
          result.success = iface.getSiteStatus(args.gid, args.time);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class createOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createOrder_args> {
      public createOrder() {
        super("createOrder");
      }

      public createOrder_args getEmptyArgsInstance() {
        return new createOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public createOrder_result getResult(I iface, createOrder_args args) throws org.apache.thrift.TException {
        createOrder_result result = new createOrder_result();
        try {
          result.success = iface.createOrder(args.uid, args.type, args.consumerUid, args.price, args.siteId, args.addition);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class disposeOrder<I extends Iface> extends org.apache.thrift.ProcessFunction<I, disposeOrder_args> {
      public disposeOrder() {
        super("disposeOrder");
      }

      public disposeOrder_args getEmptyArgsInstance() {
        return new disposeOrder_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public disposeOrder_result getResult(I iface, disposeOrder_args args) throws org.apache.thrift.TException {
        disposeOrder_result result = new disposeOrder_result();
        try {
          result.success = iface.disposeOrder(args.orderId);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getDashboardInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getDashboardInfo_args> {
      public getDashboardInfo() {
        super("getDashboardInfo");
      }

      public getDashboardInfo_args getEmptyArgsInstance() {
        return new getDashboardInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getDashboardInfo_result getResult(I iface, getDashboardInfo_args args) throws org.apache.thrift.TException {
        getDashboardInfo_result result = new getDashboardInfo_result();
        try {
          result.success = iface.getDashboardInfo(args.uid, args.limit, args.offset);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getAreaLevelFirstMulti<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAreaLevelFirstMulti_args> {
      public getAreaLevelFirstMulti() {
        super("getAreaLevelFirstMulti");
      }

      public getAreaLevelFirstMulti_args getEmptyArgsInstance() {
        return new getAreaLevelFirstMulti_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAreaLevelFirstMulti_result getResult(I iface, getAreaLevelFirstMulti_args args) throws org.apache.thrift.TException {
        getAreaLevelFirstMulti_result result = new getAreaLevelFirstMulti_result();
        try {
          result.success = iface.getAreaLevelFirstMulti(args.gids);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getAllCategories<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllCategories_args> {
      public getAllCategories() {
        super("getAllCategories");
      }

      public getAllCategories_args getEmptyArgsInstance() {
        return new getAllCategories_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllCategories_result getResult(I iface, getAllCategories_args args) throws org.apache.thrift.TException {
        getAllCategories_result result = new getAllCategories_result();
        try {
          result.success = iface.getAllCategories();
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class getSchema<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSchema_args> {
      public getSchema() {
        super("getSchema");
      }

      public getSchema_args getEmptyArgsInstance() {
        return new getSchema_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSchema_result getResult(I iface, getSchema_args args) throws org.apache.thrift.TException {
        getSchema_result result = new getSchema_result();
        try {
          result.success = iface.getSchema(args.categoryId, args.areaId);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class log<I extends Iface> extends org.apache.thrift.ProcessFunction<I, log_args> {
      public log() {
        super("log");
      }

      public log_args getEmptyArgsInstance() {
        return new log_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public log_result getResult(I iface, log_args args) throws org.apache.thrift.TException {
        log_result result = new log_result();
        try {
          result.success = iface.log(args.type, args.siteId, args.userId, args.objectId, args.objectInfo, args.description, args.attributeData);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class addSiteStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addSiteStatus_args> {
      public addSiteStatus() {
        super("addSiteStatus");
      }

      public addSiteStatus_args getEmptyArgsInstance() {
        return new addSiteStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public addSiteStatus_result getResult(I iface, addSiteStatus_args args) throws org.apache.thrift.TException {
        addSiteStatus_result result = new addSiteStatus_result();
        try {
          result.success = iface.addSiteStatus(args.site, args.type, args.time, args.count);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

    public static class smsUnsubscribe<I extends Iface> extends org.apache.thrift.ProcessFunction<I, smsUnsubscribe_args> {
      public smsUnsubscribe() {
        super("smsUnsubscribe");
      }

      public smsUnsubscribe_args getEmptyArgsInstance() {
        return new smsUnsubscribe_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public smsUnsubscribe_result getResult(I iface, smsUnsubscribe_args args) throws org.apache.thrift.TException {
        smsUnsubscribe_result result = new smsUnsubscribe_result();
        try {
          result.success = iface.smsUnsubscribe(args.mobile);
          result.setSuccessIsSet(true);
        } catch (SystemException sys_exc) {
          result.sys_exc = sys_exc;
        } catch (CodeException code_exc) {
          result.code_exc = code_exc;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("ping", new ping());
      processMap.put("getSite", new getSite());
      processMap.put("getMultiSite", new getMultiSite());
      processMap.put("getSiteByName", new getSiteByName());
      processMap.put("querySiteByUser", new querySiteByUser());
      processMap.put("updateSite", new updateSite());
      processMap.put("getAds", new getAds());
      processMap.put("getOrganicAds", new getOrganicAds());
      processMap.put("getCollectedAds", new getCollectedAds());
      processMap.put("getCollectibleAds", new getCollectibleAds());
      processMap.put("getAdsByUser", new getAdsByUser());
      processMap.put("collectAdToSite", new collectAdToSite());
      processMap.put("getMoutanAd", new getMoutanAd());
      processMap.put("getMoutanAds", new getMoutanAds());
      processMap.put("getAdStatus", new getAdStatus());
      processMap.put("getAdsStatus", new getAdsStatus());
      processMap.put("returnToModify", new returnToModify());
      processMap.put("modifyToReview", new modifyToReview());
      processMap.put("updateAdStatus", new updateAdStatus());
      processMap.put("eliminate", new eliminate());
      processMap.put("refresh", new refresh());
      processMap.put("ding", new ding());
      processMap.put("isInDing", new isInDing());
      processMap.put("getDingAdIds", new getDingAdIds());
      processMap.put("getAdCount", new getAdCount());
      processMap.put("getAdCountToday", new getAdCountToday());
      processMap.put("getPaidAdCount", new getPaidAdCount());
      processMap.put("getPaidAdCountToday", new getPaidAdCountToday());
      processMap.put("sendRuleNotice", new sendRuleNotice());
      processMap.put("createAdDraft", new createAdDraft());
      processMap.put("updateAdDraft", new updateAdDraft());
      processMap.put("updateAdDraftPostOrderId", new updateAdDraftPostOrderId());
      processMap.put("setPaidAdDraft", new setPaidAdDraft());
      processMap.put("isAdDraftPaid", new isAdDraftPaid());
      processMap.put("deleteAdDraft", new deleteAdDraft());
      processMap.put("getAdDraft", new getAdDraft());
      processMap.put("queryAdDraftsByUser", new queryAdDraftsByUser());
      processMap.put("getUnreadCount", new getUnreadCount());
      processMap.put("getImageConfig", new getImageConfig());
      processMap.put("getSensitiveWords", new getSensitiveWords());
      processMap.put("sendSMS", new sendSMS());
      processMap.put("getSiteStatus", new getSiteStatus());
      processMap.put("createOrder", new createOrder());
      processMap.put("disposeOrder", new disposeOrder());
      processMap.put("getDashboardInfo", new getDashboardInfo());
      processMap.put("getAreaLevelFirstMulti", new getAreaLevelFirstMulti());
      processMap.put("getAllCategories", new getAllCategories());
      processMap.put("getSchema", new getSchema());
      processMap.put("log", new log());
      processMap.put("addSiteStatus", new addSiteStatus());
      processMap.put("smsUnsubscribe", new smsUnsubscribe());
      return processMap;
    }

    public static class ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ping_args, Void> {
      public ping() {
        super("ping");
      }

      public ping_args getEmptyArgsInstance() {
        return new ping_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ping_result result = new ping_result();
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ping_result result = new ping_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
        iface.ping(resultHandler);
      }
    }

    public static class getSite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSite_args, TSite> {
      public getSite() {
        super("getSite");
      }

      public getSite_args getEmptyArgsInstance() {
        return new getSite_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TSite> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TSite>() { 
          public void onComplete(TSite o) {
            getSite_result result = new getSite_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSite_result result = new getSite_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSite_args args, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler) throws org.apache.thrift.TException {
        iface.getSite(args.gid,resultHandler);
      }
    }

    public static class getMultiSite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMultiSite_args, java.util.Map<java.lang.String,TSite>> {
      public getMultiSite() {
        super("getMultiSite");
      }

      public getMultiSite_args getEmptyArgsInstance() {
        return new getMultiSite_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSite>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSite>>() { 
          public void onComplete(java.util.Map<java.lang.String,TSite> o) {
            getMultiSite_result result = new getMultiSite_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMultiSite_result result = new getMultiSite_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMultiSite_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSite>> resultHandler) throws org.apache.thrift.TException {
        iface.getMultiSite(args.gids,resultHandler);
      }
    }

    public static class getSiteByName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSiteByName_args, TSite> {
      public getSiteByName() {
        super("getSiteByName");
      }

      public getSiteByName_args getEmptyArgsInstance() {
        return new getSiteByName_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TSite> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TSite>() { 
          public void onComplete(TSite o) {
            getSiteByName_result result = new getSiteByName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSiteByName_result result = new getSiteByName_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSiteByName_args args, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler) throws org.apache.thrift.TException {
        iface.getSiteByName(args.name,resultHandler);
      }
    }

    public static class querySiteByUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySiteByUser_args, TSearchResult> {
      public querySiteByUser() {
        super("querySiteByUser");
      }

      public querySiteByUser_args getEmptyArgsInstance() {
        return new querySiteByUser_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TSearchResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TSearchResult>() { 
          public void onComplete(TSearchResult o) {
            querySiteByUser_result result = new querySiteByUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            querySiteByUser_result result = new querySiteByUser_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySiteByUser_args args, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
        iface.querySiteByUser(args.userId,resultHandler);
      }
    }

    public static class updateSite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateSite_args, TSite> {
      public updateSite() {
        super("updateSite");
      }

      public updateSite_args getEmptyArgsInstance() {
        return new updateSite_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TSite> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TSite>() { 
          public void onComplete(TSite o) {
            updateSite_result result = new updateSite_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateSite_result result = new updateSite_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateSite_args args, org.apache.thrift.async.AsyncMethodCallback<TSite> resultHandler) throws org.apache.thrift.TException {
        iface.updateSite(args.sitegid, args.attrs,resultHandler);
      }
    }

    public static class getAds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAds_args, TSearchResult> {
      public getAds() {
        super("getAds");
      }

      public getAds_args getEmptyArgsInstance() {
        return new getAds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TSearchResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TSearchResult>() { 
          public void onComplete(TSearchResult o) {
            getAds_result result = new getAds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAds_result result = new getAds_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAds_args args, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
        iface.getAds(args.siteId, args.arguments, args.options,resultHandler);
      }
    }

    public static class getOrganicAds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getOrganicAds_args, TSearchResult> {
      public getOrganicAds() {
        super("getOrganicAds");
      }

      public getOrganicAds_args getEmptyArgsInstance() {
        return new getOrganicAds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TSearchResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TSearchResult>() { 
          public void onComplete(TSearchResult o) {
            getOrganicAds_result result = new getOrganicAds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getOrganicAds_result result = new getOrganicAds_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getOrganicAds_args args, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
        iface.getOrganicAds(args.siteId, args.arguments, args.options,resultHandler);
      }
    }

    public static class getCollectedAds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectedAds_args, TSearchResult> {
      public getCollectedAds() {
        super("getCollectedAds");
      }

      public getCollectedAds_args getEmptyArgsInstance() {
        return new getCollectedAds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TSearchResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TSearchResult>() { 
          public void onComplete(TSearchResult o) {
            getCollectedAds_result result = new getCollectedAds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCollectedAds_result result = new getCollectedAds_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCollectedAds_args args, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
        iface.getCollectedAds(args.siteId, args.arguments, args.options,resultHandler);
      }
    }

    public static class getCollectibleAds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getCollectibleAds_args, TSearchResult> {
      public getCollectibleAds() {
        super("getCollectibleAds");
      }

      public getCollectibleAds_args getEmptyArgsInstance() {
        return new getCollectibleAds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TSearchResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TSearchResult>() { 
          public void onComplete(TSearchResult o) {
            getCollectibleAds_result result = new getCollectibleAds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getCollectibleAds_result result = new getCollectibleAds_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getCollectibleAds_args args, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
        iface.getCollectibleAds(args.siteId, args.arguments, args.options,resultHandler);
      }
    }

    public static class getAdsByUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAdsByUser_args, TSearchResult> {
      public getAdsByUser() {
        super("getAdsByUser");
      }

      public getAdsByUser_args getEmptyArgsInstance() {
        return new getAdsByUser_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TSearchResult> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TSearchResult>() { 
          public void onComplete(TSearchResult o) {
            getAdsByUser_result result = new getAdsByUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAdsByUser_result result = new getAdsByUser_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAdsByUser_args args, org.apache.thrift.async.AsyncMethodCallback<TSearchResult> resultHandler) throws org.apache.thrift.TException {
        iface.getAdsByUser(args.siteId, args.userId, args.arguments, args.options,resultHandler);
      }
    }

    public static class collectAdToSite<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, collectAdToSite_args, java.lang.Boolean> {
      public collectAdToSite() {
        super("collectAdToSite");
      }

      public collectAdToSite_args getEmptyArgsInstance() {
        return new collectAdToSite_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            collectAdToSite_result result = new collectAdToSite_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            collectAdToSite_result result = new collectAdToSite_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, collectAdToSite_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.collectAdToSite(args.adId, args.siteId,resultHandler);
      }
    }

    public static class getMoutanAd<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMoutanAd_args, TMoutanAd> {
      public getMoutanAd() {
        super("getMoutanAd");
      }

      public getMoutanAd_args getEmptyArgsInstance() {
        return new getMoutanAd_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TMoutanAd> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TMoutanAd>() { 
          public void onComplete(TMoutanAd o) {
            getMoutanAd_result result = new getMoutanAd_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMoutanAd_result result = new getMoutanAd_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMoutanAd_args args, org.apache.thrift.async.AsyncMethodCallback<TMoutanAd> resultHandler) throws org.apache.thrift.TException {
        iface.getMoutanAd(args.adId, args.siteId,resultHandler);
      }
    }

    public static class getMoutanAds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getMoutanAds_args, java.util.Map<java.lang.String,TMoutanAd>> {
      public getMoutanAds() {
        super("getMoutanAds");
      }

      public getMoutanAds_args getEmptyArgsInstance() {
        return new getMoutanAds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TMoutanAd>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TMoutanAd>>() { 
          public void onComplete(java.util.Map<java.lang.String,TMoutanAd> o) {
            getMoutanAds_result result = new getMoutanAds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getMoutanAds_result result = new getMoutanAds_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getMoutanAds_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TMoutanAd>> resultHandler) throws org.apache.thrift.TException {
        iface.getMoutanAds(args.adIds, args.siteId,resultHandler);
      }
    }

    public static class getAdStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAdStatus_args, TSiteAdStatus> {
      public getAdStatus() {
        super("getAdStatus");
      }

      public getAdStatus_args getEmptyArgsInstance() {
        return new getAdStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TSiteAdStatus> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TSiteAdStatus>() { 
          public void onComplete(TSiteAdStatus o) {
            getAdStatus_result result = new getAdStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAdStatus_result result = new getAdStatus_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAdStatus_args args, org.apache.thrift.async.AsyncMethodCallback<TSiteAdStatus> resultHandler) throws org.apache.thrift.TException {
        iface.getAdStatus(args.adId, args.siteId,resultHandler);
      }
    }

    public static class getAdsStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAdsStatus_args, java.util.Map<java.lang.String,TSiteAdStatus>> {
      public getAdsStatus() {
        super("getAdsStatus");
      }

      public getAdsStatus_args getEmptyArgsInstance() {
        return new getAdsStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSiteAdStatus>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSiteAdStatus>>() { 
          public void onComplete(java.util.Map<java.lang.String,TSiteAdStatus> o) {
            getAdsStatus_result result = new getAdsStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAdsStatus_result result = new getAdsStatus_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAdsStatus_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TSiteAdStatus>> resultHandler) throws org.apache.thrift.TException {
        iface.getAdsStatus(args.adIds, args.siteId,resultHandler);
      }
    }

    public static class returnToModify<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, returnToModify_args, java.lang.Boolean> {
      public returnToModify() {
        super("returnToModify");
      }

      public returnToModify_args getEmptyArgsInstance() {
        return new returnToModify_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            returnToModify_result result = new returnToModify_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            returnToModify_result result = new returnToModify_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, returnToModify_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.returnToModify(args.adId, args.siteId, args.reason,resultHandler);
      }
    }

    public static class modifyToReview<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, modifyToReview_args, java.lang.Boolean> {
      public modifyToReview() {
        super("modifyToReview");
      }

      public modifyToReview_args getEmptyArgsInstance() {
        return new modifyToReview_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            modifyToReview_result result = new modifyToReview_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            modifyToReview_result result = new modifyToReview_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, modifyToReview_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.modifyToReview(args.adId, args.siteId,resultHandler);
      }
    }

    public static class updateAdStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAdStatus_args, java.lang.Boolean> {
      public updateAdStatus() {
        super("updateAdStatus");
      }

      public updateAdStatus_args getEmptyArgsInstance() {
        return new updateAdStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            updateAdStatus_result result = new updateAdStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateAdStatus_result result = new updateAdStatus_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAdStatus_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateAdStatus(args.adId, args.siteId, args.status,resultHandler);
      }
    }

    public static class eliminate<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, eliminate_args, java.lang.Boolean> {
      public eliminate() {
        super("eliminate");
      }

      public eliminate_args getEmptyArgsInstance() {
        return new eliminate_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            eliminate_result result = new eliminate_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            eliminate_result result = new eliminate_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, eliminate_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.eliminate(args.adId, args.siteId,resultHandler);
      }
    }

    public static class refresh<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, refresh_args, java.lang.Boolean> {
      public refresh() {
        super("refresh");
      }

      public refresh_args getEmptyArgsInstance() {
        return new refresh_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            refresh_result result = new refresh_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            refresh_result result = new refresh_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, refresh_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.refresh(args.adId, args.siteId,resultHandler);
      }
    }

    public static class ding<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ding_args, java.lang.Boolean> {
      public ding() {
        super("ding");
      }

      public ding_args getEmptyArgsInstance() {
        return new ding_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            ding_result result = new ding_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ding_result result = new ding_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ding_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.ding(args.adId, args.siteId, args.days,resultHandler);
      }
    }

    public static class isInDing<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isInDing_args, java.lang.Boolean> {
      public isInDing() {
        super("isInDing");
      }

      public isInDing_args getEmptyArgsInstance() {
        return new isInDing_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            isInDing_result result = new isInDing_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            isInDing_result result = new isInDing_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isInDing_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.isInDing(args.adId, args.siteId,resultHandler);
      }
    }

    public static class getDingAdIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDingAdIds_args, java.util.List<java.lang.String>> {
      public getDingAdIds() {
        super("getDingAdIds");
      }

      public getDingAdIds_args getEmptyArgsInstance() {
        return new getDingAdIds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            getDingAdIds_result result = new getDingAdIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDingAdIds_result result = new getDingAdIds_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDingAdIds_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getDingAdIds(args.siteId,resultHandler);
      }
    }

    public static class getAdCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAdCount_args, java.lang.Integer> {
      public getAdCount() {
        super("getAdCount");
      }

      public getAdCount_args getEmptyArgsInstance() {
        return new getAdCount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            getAdCount_result result = new getAdCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAdCount_result result = new getAdCount_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAdCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.getAdCount(args.uid, args.siteId,resultHandler);
      }
    }

    public static class getAdCountToday<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAdCountToday_args, java.lang.Integer> {
      public getAdCountToday() {
        super("getAdCountToday");
      }

      public getAdCountToday_args getEmptyArgsInstance() {
        return new getAdCountToday_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            getAdCountToday_result result = new getAdCountToday_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAdCountToday_result result = new getAdCountToday_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAdCountToday_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.getAdCountToday(args.uid, args.siteId,resultHandler);
      }
    }

    public static class getPaidAdCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPaidAdCount_args, java.lang.Integer> {
      public getPaidAdCount() {
        super("getPaidAdCount");
      }

      public getPaidAdCount_args getEmptyArgsInstance() {
        return new getPaidAdCount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            getPaidAdCount_result result = new getPaidAdCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPaidAdCount_result result = new getPaidAdCount_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPaidAdCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.getPaidAdCount(args.uid, args.siteId,resultHandler);
      }
    }

    public static class getPaidAdCountToday<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPaidAdCountToday_args, java.lang.Integer> {
      public getPaidAdCountToday() {
        super("getPaidAdCountToday");
      }

      public getPaidAdCountToday_args getEmptyArgsInstance() {
        return new getPaidAdCountToday_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            getPaidAdCountToday_result result = new getPaidAdCountToday_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPaidAdCountToday_result result = new getPaidAdCountToday_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPaidAdCountToday_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.getPaidAdCountToday(args.uid, args.siteId,resultHandler);
      }
    }

    public static class sendRuleNotice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendRuleNotice_args, java.lang.Boolean> {
      public sendRuleNotice() {
        super("sendRuleNotice");
      }

      public sendRuleNotice_args getEmptyArgsInstance() {
        return new sendRuleNotice_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            sendRuleNotice_result result = new sendRuleNotice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendRuleNotice_result result = new sendRuleNotice_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendRuleNotice_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.sendRuleNotice(args.adId, args.reason, args.action,resultHandler);
      }
    }

    public static class createAdDraft<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createAdDraft_args, java.lang.String> {
      public createAdDraft() {
        super("createAdDraft");
      }

      public createAdDraft_args getEmptyArgsInstance() {
        return new createAdDraft_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createAdDraft_result result = new createAdDraft_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createAdDraft_result result = new createAdDraft_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createAdDraft_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createAdDraft(args.adId, args.siteId, args.data,resultHandler);
      }
    }

    public static class updateAdDraft<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAdDraft_args, java.lang.Boolean> {
      public updateAdDraft() {
        super("updateAdDraft");
      }

      public updateAdDraft_args getEmptyArgsInstance() {
        return new updateAdDraft_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            updateAdDraft_result result = new updateAdDraft_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateAdDraft_result result = new updateAdDraft_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAdDraft_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateAdDraft(args.draftId, args.data,resultHandler);
      }
    }

    public static class updateAdDraftPostOrderId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateAdDraftPostOrderId_args, java.lang.Boolean> {
      public updateAdDraftPostOrderId() {
        super("updateAdDraftPostOrderId");
      }

      public updateAdDraftPostOrderId_args getEmptyArgsInstance() {
        return new updateAdDraftPostOrderId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            updateAdDraftPostOrderId_result result = new updateAdDraftPostOrderId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateAdDraftPostOrderId_result result = new updateAdDraftPostOrderId_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateAdDraftPostOrderId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.updateAdDraftPostOrderId(args.draftId, args.postOrderId,resultHandler);
      }
    }

    public static class setPaidAdDraft<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setPaidAdDraft_args, java.lang.Boolean> {
      public setPaidAdDraft() {
        super("setPaidAdDraft");
      }

      public setPaidAdDraft_args getEmptyArgsInstance() {
        return new setPaidAdDraft_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            setPaidAdDraft_result result = new setPaidAdDraft_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setPaidAdDraft_result result = new setPaidAdDraft_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setPaidAdDraft_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.setPaidAdDraft(args.draftId,resultHandler);
      }
    }

    public static class isAdDraftPaid<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, isAdDraftPaid_args, java.lang.Boolean> {
      public isAdDraftPaid() {
        super("isAdDraftPaid");
      }

      public isAdDraftPaid_args getEmptyArgsInstance() {
        return new isAdDraftPaid_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            isAdDraftPaid_result result = new isAdDraftPaid_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            isAdDraftPaid_result result = new isAdDraftPaid_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, isAdDraftPaid_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.isAdDraftPaid(args.draftId,resultHandler);
      }
    }

    public static class deleteAdDraft<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAdDraft_args, java.lang.Boolean> {
      public deleteAdDraft() {
        super("deleteAdDraft");
      }

      public deleteAdDraft_args getEmptyArgsInstance() {
        return new deleteAdDraft_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            deleteAdDraft_result result = new deleteAdDraft_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteAdDraft_result result = new deleteAdDraft_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteAdDraft_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.deleteAdDraft(args.draftId,resultHandler);
      }
    }

    public static class getAdDraft<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAdDraft_args, TAdDraft> {
      public getAdDraft() {
        super("getAdDraft");
      }

      public getAdDraft_args getEmptyArgsInstance() {
        return new getAdDraft_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TAdDraft> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TAdDraft>() { 
          public void onComplete(TAdDraft o) {
            getAdDraft_result result = new getAdDraft_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAdDraft_result result = new getAdDraft_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAdDraft_args args, org.apache.thrift.async.AsyncMethodCallback<TAdDraft> resultHandler) throws org.apache.thrift.TException {
        iface.getAdDraft(args.draftId,resultHandler);
      }
    }

    public static class queryAdDraftsByUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryAdDraftsByUser_args, java.util.List<TAdDraft>> {
      public queryAdDraftsByUser() {
        super("queryAdDraftsByUser");
      }

      public queryAdDraftsByUser_args getEmptyArgsInstance() {
        return new queryAdDraftsByUser_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAdDraft>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAdDraft>>() { 
          public void onComplete(java.util.List<TAdDraft> o) {
            queryAdDraftsByUser_result result = new queryAdDraftsByUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryAdDraftsByUser_result result = new queryAdDraftsByUser_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryAdDraftsByUser_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<TAdDraft>> resultHandler) throws org.apache.thrift.TException {
        iface.queryAdDraftsByUser(args.uid, args.siteId,resultHandler);
      }
    }

    public static class getUnreadCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getUnreadCount_args, java.util.Map<java.lang.String,java.lang.Integer>> {
      public getUnreadCount() {
        super("getUnreadCount");
      }

      public getUnreadCount_args getEmptyArgsInstance() {
        return new getUnreadCount_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>>() { 
          public void onComplete(java.util.Map<java.lang.String,java.lang.Integer> o) {
            getUnreadCount_result result = new getUnreadCount_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getUnreadCount_result result = new getUnreadCount_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getUnreadCount_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,java.lang.Integer>> resultHandler) throws org.apache.thrift.TException {
        iface.getUnreadCount(args.siteId, args.types,resultHandler);
      }
    }

    public static class getImageConfig<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getImageConfig_args, java.util.Map<java.lang.String,TImageConfig>> {
      public getImageConfig() {
        super("getImageConfig");
      }

      public getImageConfig_args getEmptyArgsInstance() {
        return new getImageConfig_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TImageConfig>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TImageConfig>>() { 
          public void onComplete(java.util.Map<java.lang.String,TImageConfig> o) {
            getImageConfig_result result = new getImageConfig_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getImageConfig_result result = new getImageConfig_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getImageConfig_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TImageConfig>> resultHandler) throws org.apache.thrift.TException {
        iface.getImageConfig(resultHandler);
      }
    }

    public static class getSensitiveWords<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSensitiveWords_args, java.util.List<java.lang.String>> {
      public getSensitiveWords() {
        super("getSensitiveWords");
      }

      public getSensitiveWords_args getEmptyArgsInstance() {
        return new getSensitiveWords_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>>() { 
          public void onComplete(java.util.List<java.lang.String> o) {
            getSensitiveWords_result result = new getSensitiveWords_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSensitiveWords_result result = new getSensitiveWords_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSensitiveWords_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getSensitiveWords(resultHandler);
      }
    }

    public static class sendSMS<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendSMS_args, java.lang.Integer> {
      public sendSMS() {
        super("sendSMS");
      }

      public sendSMS_args getEmptyArgsInstance() {
        return new sendSMS_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            sendSMS_result result = new sendSMS_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sendSMS_result result = new sendSMS_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendSMS_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.sendSMS(args.mobiles, args.content, args.source,resultHandler);
      }
    }

    public static class getSiteStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSiteStatus_args, java.util.Map<MoutanSiteStatusType,java.lang.String>> {
      public getSiteStatus() {
        super("getSiteStatus");
      }

      public getSiteStatus_args getEmptyArgsInstance() {
        return new getSiteStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<MoutanSiteStatusType,java.lang.String>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<MoutanSiteStatusType,java.lang.String>>() { 
          public void onComplete(java.util.Map<MoutanSiteStatusType,java.lang.String> o) {
            getSiteStatus_result result = new getSiteStatus_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSiteStatus_result result = new getSiteStatus_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSiteStatus_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<MoutanSiteStatusType,java.lang.String>> resultHandler) throws org.apache.thrift.TException {
        iface.getSiteStatus(args.gid, args.time,resultHandler);
      }
    }

    public static class createOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createOrder_args, java.lang.Long> {
      public createOrder() {
        super("createOrder");
      }

      public createOrder_args getEmptyArgsInstance() {
        return new createOrder_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            createOrder_result result = new createOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createOrder_result result = new createOrder_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createOrder_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.createOrder(args.uid, args.type, args.consumerUid, args.price, args.siteId, args.addition,resultHandler);
      }
    }

    public static class disposeOrder<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, disposeOrder_args, java.lang.Boolean> {
      public disposeOrder() {
        super("disposeOrder");
      }

      public disposeOrder_args getEmptyArgsInstance() {
        return new disposeOrder_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            disposeOrder_result result = new disposeOrder_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            disposeOrder_result result = new disposeOrder_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, disposeOrder_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.disposeOrder(args.orderId,resultHandler);
      }
    }

    public static class getDashboardInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getDashboardInfo_args, TDashboardInfo> {
      public getDashboardInfo() {
        super("getDashboardInfo");
      }

      public getDashboardInfo_args getEmptyArgsInstance() {
        return new getDashboardInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<TDashboardInfo> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<TDashboardInfo>() { 
          public void onComplete(TDashboardInfo o) {
            getDashboardInfo_result result = new getDashboardInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getDashboardInfo_result result = new getDashboardInfo_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getDashboardInfo_args args, org.apache.thrift.async.AsyncMethodCallback<TDashboardInfo> resultHandler) throws org.apache.thrift.TException {
        iface.getDashboardInfo(args.uid, args.limit, args.offset,resultHandler);
      }
    }

    public static class getAreaLevelFirstMulti<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAreaLevelFirstMulti_args, java.util.Map<java.lang.String,TArea>> {
      public getAreaLevelFirstMulti() {
        super("getAreaLevelFirstMulti");
      }

      public getAreaLevelFirstMulti_args getEmptyArgsInstance() {
        return new getAreaLevelFirstMulti_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TArea>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TArea>>() { 
          public void onComplete(java.util.Map<java.lang.String,TArea> o) {
            getAreaLevelFirstMulti_result result = new getAreaLevelFirstMulti_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAreaLevelFirstMulti_result result = new getAreaLevelFirstMulti_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAreaLevelFirstMulti_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TArea>> resultHandler) throws org.apache.thrift.TException {
        iface.getAreaLevelFirstMulti(args.gids,resultHandler);
      }
    }

    public static class getAllCategories<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllCategories_args, java.util.Map<java.lang.String,TCategory>> {
      public getAllCategories() {
        super("getAllCategories");
      }

      public getAllCategories_args getEmptyArgsInstance() {
        return new getAllCategories_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TCategory>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TCategory>>() { 
          public void onComplete(java.util.Map<java.lang.String,TCategory> o) {
            getAllCategories_result result = new getAllCategories_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllCategories_result result = new getAllCategories_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllCategories_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.Map<java.lang.String,TCategory>> resultHandler) throws org.apache.thrift.TException {
        iface.getAllCategories(resultHandler);
      }
    }

    public static class getSchema<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSchema_args, java.util.List<java.util.Map<java.lang.String,java.lang.String>>> {
      public getSchema() {
        super("getSchema");
      }

      public getSchema_args getEmptyArgsInstance() {
        return new getSchema_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>>() { 
          public void onComplete(java.util.List<java.util.Map<java.lang.String,java.lang.String>> o) {
            getSchema_result result = new getSchema_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSchema_result result = new getSchema_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSchema_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<java.util.Map<java.lang.String,java.lang.String>>> resultHandler) throws org.apache.thrift.TException {
        iface.getSchema(args.categoryId, args.areaId,resultHandler);
      }
    }

    public static class log<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, log_args, java.lang.Boolean> {
      public log() {
        super("log");
      }

      public log_args getEmptyArgsInstance() {
        return new log_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            log_result result = new log_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            log_result result = new log_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, log_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.log(args.type, args.siteId, args.userId, args.objectId, args.objectInfo, args.description, args.attributeData,resultHandler);
      }
    }

    public static class addSiteStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addSiteStatus_args, java.lang.Boolean> {
      public addSiteStatus() {
        super("addSiteStatus");
      }

      public addSiteStatus_args getEmptyArgsInstance() {
        return new addSiteStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            addSiteStatus_result result = new addSiteStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addSiteStatus_result result = new addSiteStatus_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addSiteStatus_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.addSiteStatus(args.site, args.type, args.time, args.count,resultHandler);
      }
    }

    public static class smsUnsubscribe<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, smsUnsubscribe_args, java.lang.Boolean> {
      public smsUnsubscribe() {
        super("smsUnsubscribe");
      }

      public smsUnsubscribe_args getEmptyArgsInstance() {
        return new smsUnsubscribe_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            smsUnsubscribe_result result = new smsUnsubscribe_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            smsUnsubscribe_result result = new smsUnsubscribe_result();
            if (e instanceof SystemException) {
              result.sys_exc = (SystemException) e;
              result.setSys_excIsSet(true);
              msg = result;
            } else if (e instanceof CodeException) {
              result.code_exc = (CodeException) e;
              result.setCode_excIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, smsUnsubscribe_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.smsUnsubscribe(args.mobile,resultHandler);
      }
    }

  }

  public static class ping_args implements org.apache.thrift.TBase<ping_args, ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_args.class, metaDataMap);
    }

    public ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_args(ping_args other) {
    }

    public ping_args deepCopy() {
      return new ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_args)
        return this.equals((ping_args)that);
      return false;
    }

    public boolean equals(ping_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsStandardScheme getScheme() {
        return new ping_argsStandardScheme();
      }
    }

    private static class ping_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_argsTupleScheme getScheme() {
        return new ping_argsTupleScheme();
      }
    }

    private static class ping_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ping_result implements org.apache.thrift.TBase<ping_result, ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ping_result");

    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ping_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ping_resultTupleSchemeFactory();

    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ping_result.class, metaDataMap);
    }

    public ping_result() {
    }

    public ping_result(
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ping_result(ping_result other) {
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public ping_result deepCopy() {
      return new ping_result(this);
    }

    @Override
    public void clear() {
      this.sys_exc = null;
      this.code_exc = null;
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public ping_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public ping_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ping_result)
        return this.equals((ping_result)that);
      return false;
    }

    public boolean equals(ping_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ping_result(");
      boolean first = true;

      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ping_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultStandardScheme getScheme() {
        return new ping_resultStandardScheme();
      }
    }

    private static class ping_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ping_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ping_resultTupleScheme getScheme() {
        return new ping_resultTupleScheme();
      }
    }

    private static class ping_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSys_exc()) {
          optionals.set(0);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(1)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSite_args implements org.apache.thrift.TBase<getSite_args, getSite_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSite_args");

    private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("gid", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSite_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSite_argsTupleSchemeFactory();

    public java.lang.String gid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GID((short)1, "gid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GID
            return GID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GID, new org.apache.thrift.meta_data.FieldMetaData("gid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSite_args.class, metaDataMap);
    }

    public getSite_args() {
    }

    public getSite_args(
      java.lang.String gid)
    {
      this();
      this.gid = gid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSite_args(getSite_args other) {
      if (other.isSetGid()) {
        this.gid = other.gid;
      }
    }

    public getSite_args deepCopy() {
      return new getSite_args(this);
    }

    @Override
    public void clear() {
      this.gid = null;
    }

    public java.lang.String getGid() {
      return this.gid;
    }

    public getSite_args setGid(java.lang.String gid) {
      this.gid = gid;
      return this;
    }

    public void unsetGid() {
      this.gid = null;
    }

    /** Returns true if field gid is set (has been assigned a value) and false otherwise */
    public boolean isSetGid() {
      return this.gid != null;
    }

    public void setGidIsSet(boolean value) {
      if (!value) {
        this.gid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case GID:
        if (value == null) {
          unsetGid();
        } else {
          setGid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GID:
        return getGid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GID:
        return isSetGid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSite_args)
        return this.equals((getSite_args)that);
      return false;
    }

    public boolean equals(getSite_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_gid = true && this.isSetGid();
      boolean that_present_gid = true && that.isSetGid();
      if (this_present_gid || that_present_gid) {
        if (!(this_present_gid && that_present_gid))
          return false;
        if (!this.gid.equals(that.gid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGid()) ? 131071 : 524287);
      if (isSetGid())
        hashCode = hashCode * 8191 + gid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetGid()).compareTo(other.isSetGid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gid, other.gid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSite_args(");
      boolean first = true;

      sb.append("gid:");
      if (this.gid == null) {
        sb.append("null");
      } else {
        sb.append(this.gid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSite_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSite_argsStandardScheme getScheme() {
        return new getSite_argsStandardScheme();
      }
    }

    private static class getSite_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gid = iprot.readString();
                struct.setGidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gid != null) {
          oprot.writeFieldBegin(GID_FIELD_DESC);
          oprot.writeString(struct.gid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSite_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSite_argsTupleScheme getScheme() {
        return new getSite_argsTupleScheme();
      }
    }

    private static class getSite_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGid()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGid()) {
          oprot.writeString(struct.gid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.gid = iprot.readString();
          struct.setGidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSite_result implements org.apache.thrift.TBase<getSite_result, getSite_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSite_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSite_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSite_resultTupleSchemeFactory();

    public TSite success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSite.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSite_result.class, metaDataMap);
    }

    public getSite_result() {
    }

    public getSite_result(
      TSite success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSite_result(getSite_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSite(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getSite_result deepCopy() {
      return new getSite_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TSite getSuccess() {
      return this.success;
    }

    public getSite_result setSuccess(TSite success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getSite_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getSite_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSite)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSite_result)
        return this.equals((getSite_result)that);
      return false;
    }

    public boolean equals(getSite_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSite_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSite_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSite_resultStandardScheme getScheme() {
        return new getSite_resultStandardScheme();
      }
    }

    private static class getSite_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSite();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSite_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSite_resultTupleScheme getScheme() {
        return new getSite_resultTupleScheme();
      }
    }

    private static class getSite_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TSite();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMultiSite_args implements org.apache.thrift.TBase<getMultiSite_args, getMultiSite_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiSite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiSite_args");

    private static final org.apache.thrift.protocol.TField GIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("gids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMultiSite_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMultiSite_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> gids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GIDS((short)1, "gids");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GIDS
            return GIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GIDS, new org.apache.thrift.meta_data.FieldMetaData("gids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiSite_args.class, metaDataMap);
    }

    public getMultiSite_args() {
    }

    public getMultiSite_args(
      java.util.List<java.lang.String> gids)
    {
      this();
      this.gids = gids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiSite_args(getMultiSite_args other) {
      if (other.isSetGids()) {
        java.util.List<java.lang.String> __this__gids = new java.util.ArrayList<java.lang.String>(other.gids);
        this.gids = __this__gids;
      }
    }

    public getMultiSite_args deepCopy() {
      return new getMultiSite_args(this);
    }

    @Override
    public void clear() {
      this.gids = null;
    }

    public int getGidsSize() {
      return (this.gids == null) ? 0 : this.gids.size();
    }

    public java.util.Iterator<java.lang.String> getGidsIterator() {
      return (this.gids == null) ? null : this.gids.iterator();
    }

    public void addToGids(java.lang.String elem) {
      if (this.gids == null) {
        this.gids = new java.util.ArrayList<java.lang.String>();
      }
      this.gids.add(elem);
    }

    public java.util.List<java.lang.String> getGids() {
      return this.gids;
    }

    public getMultiSite_args setGids(java.util.List<java.lang.String> gids) {
      this.gids = gids;
      return this;
    }

    public void unsetGids() {
      this.gids = null;
    }

    /** Returns true if field gids is set (has been assigned a value) and false otherwise */
    public boolean isSetGids() {
      return this.gids != null;
    }

    public void setGidsIsSet(boolean value) {
      if (!value) {
        this.gids = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case GIDS:
        if (value == null) {
          unsetGids();
        } else {
          setGids((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GIDS:
        return getGids();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GIDS:
        return isSetGids();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiSite_args)
        return this.equals((getMultiSite_args)that);
      return false;
    }

    public boolean equals(getMultiSite_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_gids = true && this.isSetGids();
      boolean that_present_gids = true && that.isSetGids();
      if (this_present_gids || that_present_gids) {
        if (!(this_present_gids && that_present_gids))
          return false;
        if (!this.gids.equals(that.gids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGids()) ? 131071 : 524287);
      if (isSetGids())
        hashCode = hashCode * 8191 + gids.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMultiSite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetGids()).compareTo(other.isSetGids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gids, other.gids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMultiSite_args(");
      boolean first = true;

      sb.append("gids:");
      if (this.gids == null) {
        sb.append("null");
      } else {
        sb.append(this.gids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiSite_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMultiSite_argsStandardScheme getScheme() {
        return new getMultiSite_argsStandardScheme();
      }
    }

    private static class getMultiSite_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMultiSite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list26 = iprot.readListBegin();
                  struct.gids = new java.util.ArrayList<java.lang.String>(_list26.size);
                  java.lang.String _elem27;
                  for (int _i28 = 0; _i28 < _list26.size; ++_i28)
                  {
                    _elem27 = iprot.readString();
                    struct.gids.add(_elem27);
                  }
                  iprot.readListEnd();
                }
                struct.setGidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiSite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gids != null) {
          oprot.writeFieldBegin(GIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.gids.size()));
            for (java.lang.String _iter29 : struct.gids)
            {
              oprot.writeString(_iter29);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiSite_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMultiSite_argsTupleScheme getScheme() {
        return new getMultiSite_argsTupleScheme();
      }
    }

    private static class getMultiSite_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMultiSite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGids()) {
          {
            oprot.writeI32(struct.gids.size());
            for (java.lang.String _iter30 : struct.gids)
            {
              oprot.writeString(_iter30);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list31 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.gids = new java.util.ArrayList<java.lang.String>(_list31.size);
            java.lang.String _elem32;
            for (int _i33 = 0; _i33 < _list31.size; ++_i33)
            {
              _elem32 = iprot.readString();
              struct.gids.add(_elem32);
            }
          }
          struct.setGidsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMultiSite_result implements org.apache.thrift.TBase<getMultiSite_result, getMultiSite_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMultiSite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMultiSite_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMultiSite_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMultiSite_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,TSite> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSite.class))));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMultiSite_result.class, metaDataMap);
    }

    public getMultiSite_result() {
    }

    public getMultiSite_result(
      java.util.Map<java.lang.String,TSite> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMultiSite_result(getMultiSite_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,TSite> __this__success = new java.util.HashMap<java.lang.String,TSite>(other.success.size());
        for (java.util.Map.Entry<java.lang.String, TSite> other_element : other.success.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          TSite other_element_value = other_element.getValue();

          java.lang.String __this__success_copy_key = other_element_key;

          TSite __this__success_copy_value = new TSite(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getMultiSite_result deepCopy() {
      return new getMultiSite_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, TSite val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,TSite>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,TSite> getSuccess() {
      return this.success;
    }

    public getMultiSite_result setSuccess(java.util.Map<java.lang.String,TSite> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getMultiSite_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getMultiSite_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,TSite>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMultiSite_result)
        return this.equals((getMultiSite_result)that);
      return false;
    }

    public boolean equals(getMultiSite_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMultiSite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMultiSite_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMultiSite_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMultiSite_resultStandardScheme getScheme() {
        return new getMultiSite_resultStandardScheme();
      }
    }

    private static class getMultiSite_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMultiSite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMultiSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map34 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,TSite>(2*_map34.size);
                  java.lang.String _key35;
                  TSite _val36;
                  for (int _i37 = 0; _i37 < _map34.size; ++_i37)
                  {
                    _key35 = iprot.readString();
                    _val36 = new TSite();
                    _val36.read(iprot);
                    struct.success.put(_key35, _val36);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMultiSite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, TSite> _iter38 : struct.success.entrySet())
            {
              oprot.writeString(_iter38.getKey());
              _iter38.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMultiSite_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMultiSite_resultTupleScheme getScheme() {
        return new getMultiSite_resultTupleScheme();
      }
    }

    private static class getMultiSite_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMultiSite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMultiSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, TSite> _iter39 : struct.success.entrySet())
            {
              oprot.writeString(_iter39.getKey());
              _iter39.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMultiSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map40 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,TSite>(2*_map40.size);
            java.lang.String _key41;
            TSite _val42;
            for (int _i43 = 0; _i43 < _map40.size; ++_i43)
            {
              _key41 = iprot.readString();
              _val42 = new TSite();
              _val42.read(iprot);
              struct.success.put(_key41, _val42);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSiteByName_args implements org.apache.thrift.TBase<getSiteByName_args, getSiteByName_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSiteByName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSiteByName_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSiteByName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSiteByName_argsTupleSchemeFactory();

    public java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSiteByName_args.class, metaDataMap);
    }

    public getSiteByName_args() {
    }

    public getSiteByName_args(
      java.lang.String name)
    {
      this();
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSiteByName_args(getSiteByName_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public getSiteByName_args deepCopy() {
      return new getSiteByName_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
    }

    public java.lang.String getName() {
      return this.name;
    }

    public getSiteByName_args setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSiteByName_args)
        return this.equals((getSiteByName_args)that);
      return false;
    }

    public boolean equals(getSiteByName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSiteByName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSiteByName_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSiteByName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiteByName_argsStandardScheme getScheme() {
        return new getSiteByName_argsStandardScheme();
      }
    }

    private static class getSiteByName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSiteByName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSiteByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSiteByName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSiteByName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiteByName_argsTupleScheme getScheme() {
        return new getSiteByName_argsTupleScheme();
      }
    }

    private static class getSiteByName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSiteByName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSiteByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSiteByName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSiteByName_result implements org.apache.thrift.TBase<getSiteByName_result, getSiteByName_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSiteByName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSiteByName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSiteByName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSiteByName_resultTupleSchemeFactory();

    public TSite success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSite.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSiteByName_result.class, metaDataMap);
    }

    public getSiteByName_result() {
    }

    public getSiteByName_result(
      TSite success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSiteByName_result(getSiteByName_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSite(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getSiteByName_result deepCopy() {
      return new getSiteByName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TSite getSuccess() {
      return this.success;
    }

    public getSiteByName_result setSuccess(TSite success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getSiteByName_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getSiteByName_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSite)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSiteByName_result)
        return this.equals((getSiteByName_result)that);
      return false;
    }

    public boolean equals(getSiteByName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSiteByName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSiteByName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSiteByName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiteByName_resultStandardScheme getScheme() {
        return new getSiteByName_resultStandardScheme();
      }
    }

    private static class getSiteByName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSiteByName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSiteByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSite();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSiteByName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSiteByName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiteByName_resultTupleScheme getScheme() {
        return new getSiteByName_resultTupleScheme();
      }
    }

    private static class getSiteByName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSiteByName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSiteByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSiteByName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TSite();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class querySiteByUser_args implements org.apache.thrift.TBase<querySiteByUser_args, querySiteByUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySiteByUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySiteByUser_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new querySiteByUser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new querySiteByUser_argsTupleSchemeFactory();

    public java.lang.String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySiteByUser_args.class, metaDataMap);
    }

    public querySiteByUser_args() {
    }

    public querySiteByUser_args(
      java.lang.String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySiteByUser_args(querySiteByUser_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public querySiteByUser_args deepCopy() {
      return new querySiteByUser_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public querySiteByUser_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof querySiteByUser_args)
        return this.equals((querySiteByUser_args)that);
      return false;
    }

    public boolean equals(querySiteByUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(querySiteByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("querySiteByUser_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySiteByUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySiteByUser_argsStandardScheme getScheme() {
        return new querySiteByUser_argsStandardScheme();
      }
    }

    private static class querySiteByUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<querySiteByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySiteByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySiteByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySiteByUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySiteByUser_argsTupleScheme getScheme() {
        return new querySiteByUser_argsTupleScheme();
      }
    }

    private static class querySiteByUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<querySiteByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySiteByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySiteByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class querySiteByUser_result implements org.apache.thrift.TBase<querySiteByUser_result, querySiteByUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySiteByUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySiteByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new querySiteByUser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new querySiteByUser_resultTupleSchemeFactory();

    public TSearchResult success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSearchResult.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySiteByUser_result.class, metaDataMap);
    }

    public querySiteByUser_result() {
    }

    public querySiteByUser_result(
      TSearchResult success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySiteByUser_result(querySiteByUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSearchResult(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public querySiteByUser_result deepCopy() {
      return new querySiteByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TSearchResult getSuccess() {
      return this.success;
    }

    public querySiteByUser_result setSuccess(TSearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public querySiteByUser_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public querySiteByUser_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSearchResult)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof querySiteByUser_result)
        return this.equals((querySiteByUser_result)that);
      return false;
    }

    public boolean equals(querySiteByUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(querySiteByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("querySiteByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySiteByUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySiteByUser_resultStandardScheme getScheme() {
        return new querySiteByUser_resultStandardScheme();
      }
    }

    private static class querySiteByUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<querySiteByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySiteByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySiteByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySiteByUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySiteByUser_resultTupleScheme getScheme() {
        return new querySiteByUser_resultTupleScheme();
      }
    }

    private static class querySiteByUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<querySiteByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySiteByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySiteByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TSearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateSite_args implements org.apache.thrift.TBase<updateSite_args, updateSite_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateSite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSite_args");

    private static final org.apache.thrift.protocol.TField SITEGID_FIELD_DESC = new org.apache.thrift.protocol.TField("sitegid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ATTRS_FIELD_DESC = new org.apache.thrift.protocol.TField("attrs", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateSite_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateSite_argsTupleSchemeFactory();

    public java.lang.String sitegid; // required
    public TSiteUpdate attrs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SITEGID((short)1, "sitegid"),
      ATTRS((short)2, "attrs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SITEGID
            return SITEGID;
          case 2: // ATTRS
            return ATTRS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SITEGID, new org.apache.thrift.meta_data.FieldMetaData("sitegid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ATTRS, new org.apache.thrift.meta_data.FieldMetaData("attrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSiteUpdate.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSite_args.class, metaDataMap);
    }

    public updateSite_args() {
    }

    public updateSite_args(
      java.lang.String sitegid,
      TSiteUpdate attrs)
    {
      this();
      this.sitegid = sitegid;
      this.attrs = attrs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSite_args(updateSite_args other) {
      if (other.isSetSitegid()) {
        this.sitegid = other.sitegid;
      }
      if (other.isSetAttrs()) {
        this.attrs = new TSiteUpdate(other.attrs);
      }
    }

    public updateSite_args deepCopy() {
      return new updateSite_args(this);
    }

    @Override
    public void clear() {
      this.sitegid = null;
      this.attrs = null;
    }

    public java.lang.String getSitegid() {
      return this.sitegid;
    }

    public updateSite_args setSitegid(java.lang.String sitegid) {
      this.sitegid = sitegid;
      return this;
    }

    public void unsetSitegid() {
      this.sitegid = null;
    }

    /** Returns true if field sitegid is set (has been assigned a value) and false otherwise */
    public boolean isSetSitegid() {
      return this.sitegid != null;
    }

    public void setSitegidIsSet(boolean value) {
      if (!value) {
        this.sitegid = null;
      }
    }

    public TSiteUpdate getAttrs() {
      return this.attrs;
    }

    public updateSite_args setAttrs(TSiteUpdate attrs) {
      this.attrs = attrs;
      return this;
    }

    public void unsetAttrs() {
      this.attrs = null;
    }

    /** Returns true if field attrs is set (has been assigned a value) and false otherwise */
    public boolean isSetAttrs() {
      return this.attrs != null;
    }

    public void setAttrsIsSet(boolean value) {
      if (!value) {
        this.attrs = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SITEGID:
        if (value == null) {
          unsetSitegid();
        } else {
          setSitegid((java.lang.String)value);
        }
        break;

      case ATTRS:
        if (value == null) {
          unsetAttrs();
        } else {
          setAttrs((TSiteUpdate)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SITEGID:
        return getSitegid();

      case ATTRS:
        return getAttrs();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SITEGID:
        return isSetSitegid();
      case ATTRS:
        return isSetAttrs();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSite_args)
        return this.equals((updateSite_args)that);
      return false;
    }

    public boolean equals(updateSite_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_sitegid = true && this.isSetSitegid();
      boolean that_present_sitegid = true && that.isSetSitegid();
      if (this_present_sitegid || that_present_sitegid) {
        if (!(this_present_sitegid && that_present_sitegid))
          return false;
        if (!this.sitegid.equals(that.sitegid))
          return false;
      }

      boolean this_present_attrs = true && this.isSetAttrs();
      boolean that_present_attrs = true && that.isSetAttrs();
      if (this_present_attrs || that_present_attrs) {
        if (!(this_present_attrs && that_present_attrs))
          return false;
        if (!this.attrs.equals(that.attrs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSitegid()) ? 131071 : 524287);
      if (isSetSitegid())
        hashCode = hashCode * 8191 + sitegid.hashCode();

      hashCode = hashCode * 8191 + ((isSetAttrs()) ? 131071 : 524287);
      if (isSetAttrs())
        hashCode = hashCode * 8191 + attrs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateSite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSitegid()).compareTo(other.isSetSitegid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSitegid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sitegid, other.sitegid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAttrs()).compareTo(other.isSetAttrs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttrs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attrs, other.attrs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateSite_args(");
      boolean first = true;

      sb.append("sitegid:");
      if (this.sitegid == null) {
        sb.append("null");
      } else {
        sb.append(this.sitegid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attrs:");
      if (this.attrs == null) {
        sb.append("null");
      } else {
        sb.append(this.attrs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (attrs != null) {
        attrs.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSite_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSite_argsStandardScheme getScheme() {
        return new updateSite_argsStandardScheme();
      }
    }

    private static class updateSite_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateSite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SITEGID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.sitegid = iprot.readString();
                struct.setSitegidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ATTRS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.attrs = new TSiteUpdate();
                struct.attrs.read(iprot);
                struct.setAttrsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.sitegid != null) {
          oprot.writeFieldBegin(SITEGID_FIELD_DESC);
          oprot.writeString(struct.sitegid);
          oprot.writeFieldEnd();
        }
        if (struct.attrs != null) {
          oprot.writeFieldBegin(ATTRS_FIELD_DESC);
          struct.attrs.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSite_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSite_argsTupleScheme getScheme() {
        return new updateSite_argsTupleScheme();
      }
    }

    private static class updateSite_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateSite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSitegid()) {
          optionals.set(0);
        }
        if (struct.isSetAttrs()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSitegid()) {
          oprot.writeString(struct.sitegid);
        }
        if (struct.isSetAttrs()) {
          struct.attrs.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.sitegid = iprot.readString();
          struct.setSitegidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.attrs = new TSiteUpdate();
          struct.attrs.read(iprot);
          struct.setAttrsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateSite_result implements org.apache.thrift.TBase<updateSite_result, updateSite_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateSite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateSite_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateSite_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateSite_resultTupleSchemeFactory();

    public TSite success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSite.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateSite_result.class, metaDataMap);
    }

    public updateSite_result() {
    }

    public updateSite_result(
      TSite success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateSite_result(updateSite_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSite(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public updateSite_result deepCopy() {
      return new updateSite_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TSite getSuccess() {
      return this.success;
    }

    public updateSite_result setSuccess(TSite success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public updateSite_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public updateSite_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSite)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateSite_result)
        return this.equals((updateSite_result)that);
      return false;
    }

    public boolean equals(updateSite_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateSite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateSite_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateSite_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSite_resultStandardScheme getScheme() {
        return new updateSite_resultStandardScheme();
      }
    }

    private static class updateSite_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateSite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSite();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateSite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateSite_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateSite_resultTupleScheme getScheme() {
        return new updateSite_resultTupleScheme();
      }
    }

    private static class updateSite_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateSite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TSite();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAds_args implements org.apache.thrift.TBase<getAds_args, getAds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAds_args");

    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAds_argsTupleSchemeFactory();

    public java.lang.String siteId; // required
    public java.util.Map<java.lang.String,java.lang.String> arguments; // required
    public TQueryOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SITE_ID((short)1, "siteId"),
      ARGUMENTS((short)2, "arguments"),
      OPTIONS((short)3, "options");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SITE_ID
            return SITE_ID;
          case 2: // ARGUMENTS
            return ARGUMENTS;
          case 3: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryOptions.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAds_args.class, metaDataMap);
    }

    public getAds_args() {
    }

    public getAds_args(
      java.lang.String siteId,
      java.util.Map<java.lang.String,java.lang.String> arguments,
      TQueryOptions options)
    {
      this();
      this.siteId = siteId;
      this.arguments = arguments;
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAds_args(getAds_args other) {
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      if (other.isSetArguments()) {
        java.util.Map<java.lang.String,java.lang.String> __this__arguments = new java.util.HashMap<java.lang.String,java.lang.String>(other.arguments);
        this.arguments = __this__arguments;
      }
      if (other.isSetOptions()) {
        this.options = new TQueryOptions(other.options);
      }
    }

    public getAds_args deepCopy() {
      return new getAds_args(this);
    }

    @Override
    public void clear() {
      this.siteId = null;
      this.arguments = null;
      this.options = null;
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getAds_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public int getArgumentsSize() {
      return (this.arguments == null) ? 0 : this.arguments.size();
    }

    public void putToArguments(java.lang.String key, java.lang.String val) {
      if (this.arguments == null) {
        this.arguments = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.arguments.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getArguments() {
      return this.arguments;
    }

    public getAds_args setArguments(java.util.Map<java.lang.String,java.lang.String> arguments) {
      this.arguments = arguments;
      return this;
    }

    public void unsetArguments() {
      this.arguments = null;
    }

    /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
    public boolean isSetArguments() {
      return this.arguments != null;
    }

    public void setArgumentsIsSet(boolean value) {
      if (!value) {
        this.arguments = null;
      }
    }

    public TQueryOptions getOptions() {
      return this.options;
    }

    public getAds_args setOptions(TQueryOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((TQueryOptions)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SITE_ID:
        return getSiteId();

      case ARGUMENTS:
        return getArguments();

      case OPTIONS:
        return getOptions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SITE_ID:
        return isSetSiteId();
      case ARGUMENTS:
        return isSetArguments();
      case OPTIONS:
        return isSetOptions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAds_args)
        return this.equals((getAds_args)that);
      return false;
    }

    public boolean equals(getAds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_arguments = true && this.isSetArguments();
      boolean that_present_arguments = true && that.isSetArguments();
      if (this_present_arguments || that_present_arguments) {
        if (!(this_present_arguments && that_present_arguments))
          return false;
        if (!this.arguments.equals(that.arguments))
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
      if (isSetArguments())
        hashCode = hashCode * 8191 + arguments.hashCode();

      hashCode = hashCode * 8191 + ((isSetOptions()) ? 131071 : 524287);
      if (isSetOptions())
        hashCode = hashCode * 8191 + options.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArguments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAds_args(");
      boolean first = true;

      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAds_argsStandardScheme getScheme() {
        return new getAds_argsStandardScheme();
      }
    }

    private static class getAds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARGUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map44 = iprot.readMapBegin();
                  struct.arguments = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map44.size);
                  java.lang.String _key45;
                  java.lang.String _val46;
                  for (int _i47 = 0; _i47 < _map44.size; ++_i47)
                  {
                    _key45 = iprot.readString();
                    _val46 = iprot.readString();
                    struct.arguments.put(_key45, _val46);
                  }
                  iprot.readMapEnd();
                }
                struct.setArgumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new TQueryOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        if (struct.arguments != null) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.arguments.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter48 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter48.getKey());
              oprot.writeString(_iter48.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAds_argsTupleScheme getScheme() {
        return new getAds_argsTupleScheme();
      }
    }

    private static class getAds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSiteId()) {
          optionals.set(0);
        }
        if (struct.isSetArguments()) {
          optionals.set(1);
        }
        if (struct.isSetOptions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetArguments()) {
          {
            oprot.writeI32(struct.arguments.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter49 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter49.getKey());
              oprot.writeString(_iter49.getValue());
            }
          }
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map50 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arguments = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map50.size);
            java.lang.String _key51;
            java.lang.String _val52;
            for (int _i53 = 0; _i53 < _map50.size; ++_i53)
            {
              _key51 = iprot.readString();
              _val52 = iprot.readString();
              struct.arguments.put(_key51, _val52);
            }
          }
          struct.setArgumentsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.options = new TQueryOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAds_result implements org.apache.thrift.TBase<getAds_result, getAds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAds_resultTupleSchemeFactory();

    public TSearchResult success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSearchResult.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAds_result.class, metaDataMap);
    }

    public getAds_result() {
    }

    public getAds_result(
      TSearchResult success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAds_result(getAds_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSearchResult(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getAds_result deepCopy() {
      return new getAds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TSearchResult getSuccess() {
      return this.success;
    }

    public getAds_result setSuccess(TSearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getAds_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getAds_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSearchResult)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAds_result)
        return this.equals((getAds_result)that);
      return false;
    }

    public boolean equals(getAds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAds_resultStandardScheme getScheme() {
        return new getAds_resultStandardScheme();
      }
    }

    private static class getAds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAds_resultTupleScheme getScheme() {
        return new getAds_resultTupleScheme();
      }
    }

    private static class getAds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TSearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getOrganicAds_args implements org.apache.thrift.TBase<getOrganicAds_args, getOrganicAds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getOrganicAds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrganicAds_args");

    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrganicAds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrganicAds_argsTupleSchemeFactory();

    public java.lang.String siteId; // required
    public java.util.Map<java.lang.String,java.lang.String> arguments; // required
    public TQueryOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SITE_ID((short)1, "siteId"),
      ARGUMENTS((short)2, "arguments"),
      OPTIONS((short)3, "options");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SITE_ID
            return SITE_ID;
          case 2: // ARGUMENTS
            return ARGUMENTS;
          case 3: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryOptions.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganicAds_args.class, metaDataMap);
    }

    public getOrganicAds_args() {
    }

    public getOrganicAds_args(
      java.lang.String siteId,
      java.util.Map<java.lang.String,java.lang.String> arguments,
      TQueryOptions options)
    {
      this();
      this.siteId = siteId;
      this.arguments = arguments;
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrganicAds_args(getOrganicAds_args other) {
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      if (other.isSetArguments()) {
        java.util.Map<java.lang.String,java.lang.String> __this__arguments = new java.util.HashMap<java.lang.String,java.lang.String>(other.arguments);
        this.arguments = __this__arguments;
      }
      if (other.isSetOptions()) {
        this.options = new TQueryOptions(other.options);
      }
    }

    public getOrganicAds_args deepCopy() {
      return new getOrganicAds_args(this);
    }

    @Override
    public void clear() {
      this.siteId = null;
      this.arguments = null;
      this.options = null;
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getOrganicAds_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public int getArgumentsSize() {
      return (this.arguments == null) ? 0 : this.arguments.size();
    }

    public void putToArguments(java.lang.String key, java.lang.String val) {
      if (this.arguments == null) {
        this.arguments = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.arguments.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getArguments() {
      return this.arguments;
    }

    public getOrganicAds_args setArguments(java.util.Map<java.lang.String,java.lang.String> arguments) {
      this.arguments = arguments;
      return this;
    }

    public void unsetArguments() {
      this.arguments = null;
    }

    /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
    public boolean isSetArguments() {
      return this.arguments != null;
    }

    public void setArgumentsIsSet(boolean value) {
      if (!value) {
        this.arguments = null;
      }
    }

    public TQueryOptions getOptions() {
      return this.options;
    }

    public getOrganicAds_args setOptions(TQueryOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((TQueryOptions)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SITE_ID:
        return getSiteId();

      case ARGUMENTS:
        return getArguments();

      case OPTIONS:
        return getOptions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SITE_ID:
        return isSetSiteId();
      case ARGUMENTS:
        return isSetArguments();
      case OPTIONS:
        return isSetOptions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrganicAds_args)
        return this.equals((getOrganicAds_args)that);
      return false;
    }

    public boolean equals(getOrganicAds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_arguments = true && this.isSetArguments();
      boolean that_present_arguments = true && that.isSetArguments();
      if (this_present_arguments || that_present_arguments) {
        if (!(this_present_arguments && that_present_arguments))
          return false;
        if (!this.arguments.equals(that.arguments))
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
      if (isSetArguments())
        hashCode = hashCode * 8191 + arguments.hashCode();

      hashCode = hashCode * 8191 + ((isSetOptions()) ? 131071 : 524287);
      if (isSetOptions())
        hashCode = hashCode * 8191 + options.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getOrganicAds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArguments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrganicAds_args(");
      boolean first = true;

      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrganicAds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getOrganicAds_argsStandardScheme getScheme() {
        return new getOrganicAds_argsStandardScheme();
      }
    }

    private static class getOrganicAds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getOrganicAds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganicAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARGUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map54 = iprot.readMapBegin();
                  struct.arguments = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map54.size);
                  java.lang.String _key55;
                  java.lang.String _val56;
                  for (int _i57 = 0; _i57 < _map54.size; ++_i57)
                  {
                    _key55 = iprot.readString();
                    _val56 = iprot.readString();
                    struct.arguments.put(_key55, _val56);
                  }
                  iprot.readMapEnd();
                }
                struct.setArgumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new TQueryOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganicAds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        if (struct.arguments != null) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.arguments.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter58 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter58.getKey());
              oprot.writeString(_iter58.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrganicAds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getOrganicAds_argsTupleScheme getScheme() {
        return new getOrganicAds_argsTupleScheme();
      }
    }

    private static class getOrganicAds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getOrganicAds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrganicAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSiteId()) {
          optionals.set(0);
        }
        if (struct.isSetArguments()) {
          optionals.set(1);
        }
        if (struct.isSetOptions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetArguments()) {
          {
            oprot.writeI32(struct.arguments.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter59 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter59.getKey());
              oprot.writeString(_iter59.getValue());
            }
          }
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrganicAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map60 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arguments = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map60.size);
            java.lang.String _key61;
            java.lang.String _val62;
            for (int _i63 = 0; _i63 < _map60.size; ++_i63)
            {
              _key61 = iprot.readString();
              _val62 = iprot.readString();
              struct.arguments.put(_key61, _val62);
            }
          }
          struct.setArgumentsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.options = new TQueryOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getOrganicAds_result implements org.apache.thrift.TBase<getOrganicAds_result, getOrganicAds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getOrganicAds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getOrganicAds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getOrganicAds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getOrganicAds_resultTupleSchemeFactory();

    public TSearchResult success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSearchResult.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getOrganicAds_result.class, metaDataMap);
    }

    public getOrganicAds_result() {
    }

    public getOrganicAds_result(
      TSearchResult success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getOrganicAds_result(getOrganicAds_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSearchResult(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getOrganicAds_result deepCopy() {
      return new getOrganicAds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TSearchResult getSuccess() {
      return this.success;
    }

    public getOrganicAds_result setSuccess(TSearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getOrganicAds_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getOrganicAds_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSearchResult)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getOrganicAds_result)
        return this.equals((getOrganicAds_result)that);
      return false;
    }

    public boolean equals(getOrganicAds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getOrganicAds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getOrganicAds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getOrganicAds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getOrganicAds_resultStandardScheme getScheme() {
        return new getOrganicAds_resultStandardScheme();
      }
    }

    private static class getOrganicAds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getOrganicAds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getOrganicAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getOrganicAds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getOrganicAds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getOrganicAds_resultTupleScheme getScheme() {
        return new getOrganicAds_resultTupleScheme();
      }
    }

    private static class getOrganicAds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getOrganicAds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getOrganicAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getOrganicAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TSearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCollectedAds_args implements org.apache.thrift.TBase<getCollectedAds_args, getCollectedAds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectedAds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectedAds_args");

    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCollectedAds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCollectedAds_argsTupleSchemeFactory();

    public java.lang.String siteId; // required
    public java.util.Map<java.lang.String,java.lang.String> arguments; // required
    public TQueryOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SITE_ID((short)1, "siteId"),
      ARGUMENTS((short)2, "arguments"),
      OPTIONS((short)3, "options");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SITE_ID
            return SITE_ID;
          case 2: // ARGUMENTS
            return ARGUMENTS;
          case 3: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryOptions.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectedAds_args.class, metaDataMap);
    }

    public getCollectedAds_args() {
    }

    public getCollectedAds_args(
      java.lang.String siteId,
      java.util.Map<java.lang.String,java.lang.String> arguments,
      TQueryOptions options)
    {
      this();
      this.siteId = siteId;
      this.arguments = arguments;
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectedAds_args(getCollectedAds_args other) {
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      if (other.isSetArguments()) {
        java.util.Map<java.lang.String,java.lang.String> __this__arguments = new java.util.HashMap<java.lang.String,java.lang.String>(other.arguments);
        this.arguments = __this__arguments;
      }
      if (other.isSetOptions()) {
        this.options = new TQueryOptions(other.options);
      }
    }

    public getCollectedAds_args deepCopy() {
      return new getCollectedAds_args(this);
    }

    @Override
    public void clear() {
      this.siteId = null;
      this.arguments = null;
      this.options = null;
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getCollectedAds_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public int getArgumentsSize() {
      return (this.arguments == null) ? 0 : this.arguments.size();
    }

    public void putToArguments(java.lang.String key, java.lang.String val) {
      if (this.arguments == null) {
        this.arguments = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.arguments.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getArguments() {
      return this.arguments;
    }

    public getCollectedAds_args setArguments(java.util.Map<java.lang.String,java.lang.String> arguments) {
      this.arguments = arguments;
      return this;
    }

    public void unsetArguments() {
      this.arguments = null;
    }

    /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
    public boolean isSetArguments() {
      return this.arguments != null;
    }

    public void setArgumentsIsSet(boolean value) {
      if (!value) {
        this.arguments = null;
      }
    }

    public TQueryOptions getOptions() {
      return this.options;
    }

    public getCollectedAds_args setOptions(TQueryOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((TQueryOptions)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SITE_ID:
        return getSiteId();

      case ARGUMENTS:
        return getArguments();

      case OPTIONS:
        return getOptions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SITE_ID:
        return isSetSiteId();
      case ARGUMENTS:
        return isSetArguments();
      case OPTIONS:
        return isSetOptions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectedAds_args)
        return this.equals((getCollectedAds_args)that);
      return false;
    }

    public boolean equals(getCollectedAds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_arguments = true && this.isSetArguments();
      boolean that_present_arguments = true && that.isSetArguments();
      if (this_present_arguments || that_present_arguments) {
        if (!(this_present_arguments && that_present_arguments))
          return false;
        if (!this.arguments.equals(that.arguments))
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
      if (isSetArguments())
        hashCode = hashCode * 8191 + arguments.hashCode();

      hashCode = hashCode * 8191 + ((isSetOptions()) ? 131071 : 524287);
      if (isSetOptions())
        hashCode = hashCode * 8191 + options.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCollectedAds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArguments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCollectedAds_args(");
      boolean first = true;

      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectedAds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCollectedAds_argsStandardScheme getScheme() {
        return new getCollectedAds_argsStandardScheme();
      }
    }

    private static class getCollectedAds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCollectedAds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectedAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARGUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map64 = iprot.readMapBegin();
                  struct.arguments = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map64.size);
                  java.lang.String _key65;
                  java.lang.String _val66;
                  for (int _i67 = 0; _i67 < _map64.size; ++_i67)
                  {
                    _key65 = iprot.readString();
                    _val66 = iprot.readString();
                    struct.arguments.put(_key65, _val66);
                  }
                  iprot.readMapEnd();
                }
                struct.setArgumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new TQueryOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectedAds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        if (struct.arguments != null) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.arguments.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter68 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter68.getKey());
              oprot.writeString(_iter68.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectedAds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCollectedAds_argsTupleScheme getScheme() {
        return new getCollectedAds_argsTupleScheme();
      }
    }

    private static class getCollectedAds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCollectedAds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectedAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSiteId()) {
          optionals.set(0);
        }
        if (struct.isSetArguments()) {
          optionals.set(1);
        }
        if (struct.isSetOptions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetArguments()) {
          {
            oprot.writeI32(struct.arguments.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter69 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter69.getKey());
              oprot.writeString(_iter69.getValue());
            }
          }
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectedAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map70 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arguments = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map70.size);
            java.lang.String _key71;
            java.lang.String _val72;
            for (int _i73 = 0; _i73 < _map70.size; ++_i73)
            {
              _key71 = iprot.readString();
              _val72 = iprot.readString();
              struct.arguments.put(_key71, _val72);
            }
          }
          struct.setArgumentsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.options = new TQueryOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCollectedAds_result implements org.apache.thrift.TBase<getCollectedAds_result, getCollectedAds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectedAds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectedAds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCollectedAds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCollectedAds_resultTupleSchemeFactory();

    public TSearchResult success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSearchResult.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectedAds_result.class, metaDataMap);
    }

    public getCollectedAds_result() {
    }

    public getCollectedAds_result(
      TSearchResult success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectedAds_result(getCollectedAds_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSearchResult(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getCollectedAds_result deepCopy() {
      return new getCollectedAds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TSearchResult getSuccess() {
      return this.success;
    }

    public getCollectedAds_result setSuccess(TSearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getCollectedAds_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getCollectedAds_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSearchResult)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectedAds_result)
        return this.equals((getCollectedAds_result)that);
      return false;
    }

    public boolean equals(getCollectedAds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCollectedAds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCollectedAds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectedAds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCollectedAds_resultStandardScheme getScheme() {
        return new getCollectedAds_resultStandardScheme();
      }
    }

    private static class getCollectedAds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCollectedAds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectedAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectedAds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectedAds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCollectedAds_resultTupleScheme getScheme() {
        return new getCollectedAds_resultTupleScheme();
      }
    }

    private static class getCollectedAds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCollectedAds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectedAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectedAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TSearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCollectibleAds_args implements org.apache.thrift.TBase<getCollectibleAds_args, getCollectibleAds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectibleAds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectibleAds_args");

    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.MAP, (short)2);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCollectibleAds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCollectibleAds_argsTupleSchemeFactory();

    public java.lang.String siteId; // required
    public java.util.Map<java.lang.String,java.lang.String> arguments; // required
    public TQueryOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SITE_ID((short)1, "siteId"),
      ARGUMENTS((short)2, "arguments"),
      OPTIONS((short)3, "options");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SITE_ID
            return SITE_ID;
          case 2: // ARGUMENTS
            return ARGUMENTS;
          case 3: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryOptions.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectibleAds_args.class, metaDataMap);
    }

    public getCollectibleAds_args() {
    }

    public getCollectibleAds_args(
      java.lang.String siteId,
      java.util.Map<java.lang.String,java.lang.String> arguments,
      TQueryOptions options)
    {
      this();
      this.siteId = siteId;
      this.arguments = arguments;
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectibleAds_args(getCollectibleAds_args other) {
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      if (other.isSetArguments()) {
        java.util.Map<java.lang.String,java.lang.String> __this__arguments = new java.util.HashMap<java.lang.String,java.lang.String>(other.arguments);
        this.arguments = __this__arguments;
      }
      if (other.isSetOptions()) {
        this.options = new TQueryOptions(other.options);
      }
    }

    public getCollectibleAds_args deepCopy() {
      return new getCollectibleAds_args(this);
    }

    @Override
    public void clear() {
      this.siteId = null;
      this.arguments = null;
      this.options = null;
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getCollectibleAds_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public int getArgumentsSize() {
      return (this.arguments == null) ? 0 : this.arguments.size();
    }

    public void putToArguments(java.lang.String key, java.lang.String val) {
      if (this.arguments == null) {
        this.arguments = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.arguments.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getArguments() {
      return this.arguments;
    }

    public getCollectibleAds_args setArguments(java.util.Map<java.lang.String,java.lang.String> arguments) {
      this.arguments = arguments;
      return this;
    }

    public void unsetArguments() {
      this.arguments = null;
    }

    /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
    public boolean isSetArguments() {
      return this.arguments != null;
    }

    public void setArgumentsIsSet(boolean value) {
      if (!value) {
        this.arguments = null;
      }
    }

    public TQueryOptions getOptions() {
      return this.options;
    }

    public getCollectibleAds_args setOptions(TQueryOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((TQueryOptions)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SITE_ID:
        return getSiteId();

      case ARGUMENTS:
        return getArguments();

      case OPTIONS:
        return getOptions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SITE_ID:
        return isSetSiteId();
      case ARGUMENTS:
        return isSetArguments();
      case OPTIONS:
        return isSetOptions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectibleAds_args)
        return this.equals((getCollectibleAds_args)that);
      return false;
    }

    public boolean equals(getCollectibleAds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_arguments = true && this.isSetArguments();
      boolean that_present_arguments = true && that.isSetArguments();
      if (this_present_arguments || that_present_arguments) {
        if (!(this_present_arguments && that_present_arguments))
          return false;
        if (!this.arguments.equals(that.arguments))
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
      if (isSetArguments())
        hashCode = hashCode * 8191 + arguments.hashCode();

      hashCode = hashCode * 8191 + ((isSetOptions()) ? 131071 : 524287);
      if (isSetOptions())
        hashCode = hashCode * 8191 + options.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCollectibleAds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArguments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCollectibleAds_args(");
      boolean first = true;

      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectibleAds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCollectibleAds_argsStandardScheme getScheme() {
        return new getCollectibleAds_argsStandardScheme();
      }
    }

    private static class getCollectibleAds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCollectibleAds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectibleAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ARGUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map74 = iprot.readMapBegin();
                  struct.arguments = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map74.size);
                  java.lang.String _key75;
                  java.lang.String _val76;
                  for (int _i77 = 0; _i77 < _map74.size; ++_i77)
                  {
                    _key75 = iprot.readString();
                    _val76 = iprot.readString();
                    struct.arguments.put(_key75, _val76);
                  }
                  iprot.readMapEnd();
                }
                struct.setArgumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new TQueryOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectibleAds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        if (struct.arguments != null) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.arguments.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter78 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter78.getKey());
              oprot.writeString(_iter78.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectibleAds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCollectibleAds_argsTupleScheme getScheme() {
        return new getCollectibleAds_argsTupleScheme();
      }
    }

    private static class getCollectibleAds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCollectibleAds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectibleAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSiteId()) {
          optionals.set(0);
        }
        if (struct.isSetArguments()) {
          optionals.set(1);
        }
        if (struct.isSetOptions()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetArguments()) {
          {
            oprot.writeI32(struct.arguments.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter79 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter79.getKey());
              oprot.writeString(_iter79.getValue());
            }
          }
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectibleAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map80 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arguments = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map80.size);
            java.lang.String _key81;
            java.lang.String _val82;
            for (int _i83 = 0; _i83 < _map80.size; ++_i83)
            {
              _key81 = iprot.readString();
              _val82 = iprot.readString();
              struct.arguments.put(_key81, _val82);
            }
          }
          struct.setArgumentsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.options = new TQueryOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getCollectibleAds_result implements org.apache.thrift.TBase<getCollectibleAds_result, getCollectibleAds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getCollectibleAds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getCollectibleAds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getCollectibleAds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getCollectibleAds_resultTupleSchemeFactory();

    public TSearchResult success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSearchResult.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getCollectibleAds_result.class, metaDataMap);
    }

    public getCollectibleAds_result() {
    }

    public getCollectibleAds_result(
      TSearchResult success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getCollectibleAds_result(getCollectibleAds_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSearchResult(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getCollectibleAds_result deepCopy() {
      return new getCollectibleAds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TSearchResult getSuccess() {
      return this.success;
    }

    public getCollectibleAds_result setSuccess(TSearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getCollectibleAds_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getCollectibleAds_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSearchResult)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getCollectibleAds_result)
        return this.equals((getCollectibleAds_result)that);
      return false;
    }

    public boolean equals(getCollectibleAds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getCollectibleAds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getCollectibleAds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getCollectibleAds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCollectibleAds_resultStandardScheme getScheme() {
        return new getCollectibleAds_resultStandardScheme();
      }
    }

    private static class getCollectibleAds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getCollectibleAds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getCollectibleAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getCollectibleAds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getCollectibleAds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getCollectibleAds_resultTupleScheme getScheme() {
        return new getCollectibleAds_resultTupleScheme();
      }
    }

    private static class getCollectibleAds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getCollectibleAds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getCollectibleAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getCollectibleAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TSearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdsByUser_args implements org.apache.thrift.TBase<getAdsByUser_args, getAdsByUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAdsByUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdsByUser_args");

    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.MAP, (short)3);
    private static final org.apache.thrift.protocol.TField OPTIONS_FIELD_DESC = new org.apache.thrift.protocol.TField("options", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdsByUser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdsByUser_argsTupleSchemeFactory();

    public java.lang.String siteId; // required
    public java.lang.String userId; // required
    public java.util.Map<java.lang.String,java.lang.String> arguments; // required
    public TQueryOptions options; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SITE_ID((short)1, "siteId"),
      USER_ID((short)2, "userId"),
      ARGUMENTS((short)3, "arguments"),
      OPTIONS((short)4, "options");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SITE_ID
            return SITE_ID;
          case 2: // USER_ID
            return USER_ID;
          case 3: // ARGUMENTS
            return ARGUMENTS;
          case 4: // OPTIONS
            return OPTIONS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.OPTIONS, new org.apache.thrift.meta_data.FieldMetaData("options", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQueryOptions.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdsByUser_args.class, metaDataMap);
    }

    public getAdsByUser_args() {
    }

    public getAdsByUser_args(
      java.lang.String siteId,
      java.lang.String userId,
      java.util.Map<java.lang.String,java.lang.String> arguments,
      TQueryOptions options)
    {
      this();
      this.siteId = siteId;
      this.userId = userId;
      this.arguments = arguments;
      this.options = options;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdsByUser_args(getAdsByUser_args other) {
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetArguments()) {
        java.util.Map<java.lang.String,java.lang.String> __this__arguments = new java.util.HashMap<java.lang.String,java.lang.String>(other.arguments);
        this.arguments = __this__arguments;
      }
      if (other.isSetOptions()) {
        this.options = new TQueryOptions(other.options);
      }
    }

    public getAdsByUser_args deepCopy() {
      return new getAdsByUser_args(this);
    }

    @Override
    public void clear() {
      this.siteId = null;
      this.userId = null;
      this.arguments = null;
      this.options = null;
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getAdsByUser_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public getAdsByUser_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public int getArgumentsSize() {
      return (this.arguments == null) ? 0 : this.arguments.size();
    }

    public void putToArguments(java.lang.String key, java.lang.String val) {
      if (this.arguments == null) {
        this.arguments = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.arguments.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getArguments() {
      return this.arguments;
    }

    public getAdsByUser_args setArguments(java.util.Map<java.lang.String,java.lang.String> arguments) {
      this.arguments = arguments;
      return this;
    }

    public void unsetArguments() {
      this.arguments = null;
    }

    /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
    public boolean isSetArguments() {
      return this.arguments != null;
    }

    public void setArgumentsIsSet(boolean value) {
      if (!value) {
        this.arguments = null;
      }
    }

    public TQueryOptions getOptions() {
      return this.options;
    }

    public getAdsByUser_args setOptions(TQueryOptions options) {
      this.options = options;
      return this;
    }

    public void unsetOptions() {
      this.options = null;
    }

    /** Returns true if field options is set (has been assigned a value) and false otherwise */
    public boolean isSetOptions() {
      return this.options != null;
    }

    public void setOptionsIsSet(boolean value) {
      if (!value) {
        this.options = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case ARGUMENTS:
        if (value == null) {
          unsetArguments();
        } else {
          setArguments((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      case OPTIONS:
        if (value == null) {
          unsetOptions();
        } else {
          setOptions((TQueryOptions)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SITE_ID:
        return getSiteId();

      case USER_ID:
        return getUserId();

      case ARGUMENTS:
        return getArguments();

      case OPTIONS:
        return getOptions();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SITE_ID:
        return isSetSiteId();
      case USER_ID:
        return isSetUserId();
      case ARGUMENTS:
        return isSetArguments();
      case OPTIONS:
        return isSetOptions();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdsByUser_args)
        return this.equals((getAdsByUser_args)that);
      return false;
    }

    public boolean equals(getAdsByUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_arguments = true && this.isSetArguments();
      boolean that_present_arguments = true && that.isSetArguments();
      if (this_present_arguments || that_present_arguments) {
        if (!(this_present_arguments && that_present_arguments))
          return false;
        if (!this.arguments.equals(that.arguments))
          return false;
      }

      boolean this_present_options = true && this.isSetOptions();
      boolean that_present_options = true && that.isSetOptions();
      if (this_present_options || that_present_options) {
        if (!(this_present_options && that_present_options))
          return false;
        if (!this.options.equals(that.options))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
      if (isSetArguments())
        hashCode = hashCode * 8191 + arguments.hashCode();

      hashCode = hashCode * 8191 + ((isSetOptions()) ? 131071 : 524287);
      if (isSetOptions())
        hashCode = hashCode * 8191 + options.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdsByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetArguments()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOptions()).compareTo(other.isSetOptions());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOptions()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.options, other.options);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdsByUser_args(");
      boolean first = true;

      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("arguments:");
      if (this.arguments == null) {
        sb.append("null");
      } else {
        sb.append(this.arguments);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("options:");
      if (this.options == null) {
        sb.append("null");
      } else {
        sb.append(this.options);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (options != null) {
        options.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdsByUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdsByUser_argsStandardScheme getScheme() {
        return new getAdsByUser_argsStandardScheme();
      }
    }

    private static class getAdsByUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdsByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdsByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ARGUMENTS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map84 = iprot.readMapBegin();
                  struct.arguments = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map84.size);
                  java.lang.String _key85;
                  java.lang.String _val86;
                  for (int _i87 = 0; _i87 < _map84.size; ++_i87)
                  {
                    _key85 = iprot.readString();
                    _val86 = iprot.readString();
                    struct.arguments.put(_key85, _val86);
                  }
                  iprot.readMapEnd();
                }
                struct.setArgumentsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OPTIONS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.options = new TQueryOptions();
                struct.options.read(iprot);
                struct.setOptionsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdsByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.arguments != null) {
          oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.arguments.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter88 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter88.getKey());
              oprot.writeString(_iter88.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.options != null) {
          oprot.writeFieldBegin(OPTIONS_FIELD_DESC);
          struct.options.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdsByUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdsByUser_argsTupleScheme getScheme() {
        return new getAdsByUser_argsTupleScheme();
      }
    }

    private static class getAdsByUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdsByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdsByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSiteId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        if (struct.isSetArguments()) {
          optionals.set(2);
        }
        if (struct.isSetOptions()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetArguments()) {
          {
            oprot.writeI32(struct.arguments.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter89 : struct.arguments.entrySet())
            {
              oprot.writeString(_iter89.getKey());
              oprot.writeString(_iter89.getValue());
            }
          }
        }
        if (struct.isSetOptions()) {
          struct.options.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdsByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(2)) {
          {
            org.apache.thrift.protocol.TMap _map90 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.arguments = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map90.size);
            java.lang.String _key91;
            java.lang.String _val92;
            for (int _i93 = 0; _i93 < _map90.size; ++_i93)
            {
              _key91 = iprot.readString();
              _val92 = iprot.readString();
              struct.arguments.put(_key91, _val92);
            }
          }
          struct.setArgumentsIsSet(true);
        }
        if (incoming.get(3)) {
          struct.options = new TQueryOptions();
          struct.options.read(iprot);
          struct.setOptionsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdsByUser_result implements org.apache.thrift.TBase<getAdsByUser_result, getAdsByUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAdsByUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdsByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdsByUser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdsByUser_resultTupleSchemeFactory();

    public TSearchResult success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSearchResult.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdsByUser_result.class, metaDataMap);
    }

    public getAdsByUser_result() {
    }

    public getAdsByUser_result(
      TSearchResult success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdsByUser_result(getAdsByUser_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSearchResult(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getAdsByUser_result deepCopy() {
      return new getAdsByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TSearchResult getSuccess() {
      return this.success;
    }

    public getAdsByUser_result setSuccess(TSearchResult success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getAdsByUser_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getAdsByUser_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSearchResult)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdsByUser_result)
        return this.equals((getAdsByUser_result)that);
      return false;
    }

    public boolean equals(getAdsByUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdsByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdsByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdsByUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdsByUser_resultStandardScheme getScheme() {
        return new getAdsByUser_resultStandardScheme();
      }
    }

    private static class getAdsByUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdsByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdsByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSearchResult();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdsByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdsByUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdsByUser_resultTupleScheme getScheme() {
        return new getAdsByUser_resultTupleScheme();
      }
    }

    private static class getAdsByUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdsByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdsByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdsByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TSearchResult();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class collectAdToSite_args implements org.apache.thrift.TBase<collectAdToSite_args, collectAdToSite_args._Fields>, java.io.Serializable, Cloneable, Comparable<collectAdToSite_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectAdToSite_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new collectAdToSite_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new collectAdToSite_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectAdToSite_args.class, metaDataMap);
    }

    public collectAdToSite_args() {
    }

    public collectAdToSite_args(
      java.lang.String adId,
      java.lang.String siteId)
    {
      this();
      this.adId = adId;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectAdToSite_args(collectAdToSite_args other) {
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public collectAdToSite_args deepCopy() {
      return new collectAdToSite_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.siteId = null;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public collectAdToSite_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public collectAdToSite_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof collectAdToSite_args)
        return this.equals((collectAdToSite_args)that);
      return false;
    }

    public boolean equals(collectAdToSite_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(collectAdToSite_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("collectAdToSite_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectAdToSite_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public collectAdToSite_argsStandardScheme getScheme() {
        return new collectAdToSite_argsStandardScheme();
      }
    }

    private static class collectAdToSite_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<collectAdToSite_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectAdToSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectAdToSite_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectAdToSite_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public collectAdToSite_argsTupleScheme getScheme() {
        return new collectAdToSite_argsTupleScheme();
      }
    }

    private static class collectAdToSite_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<collectAdToSite_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectAdToSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectAdToSite_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class collectAdToSite_result implements org.apache.thrift.TBase<collectAdToSite_result, collectAdToSite_result._Fields>, java.io.Serializable, Cloneable, Comparable<collectAdToSite_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("collectAdToSite_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new collectAdToSite_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new collectAdToSite_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(collectAdToSite_result.class, metaDataMap);
    }

    public collectAdToSite_result() {
    }

    public collectAdToSite_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public collectAdToSite_result(collectAdToSite_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public collectAdToSite_result deepCopy() {
      return new collectAdToSite_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public collectAdToSite_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public collectAdToSite_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public collectAdToSite_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof collectAdToSite_result)
        return this.equals((collectAdToSite_result)that);
      return false;
    }

    public boolean equals(collectAdToSite_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(collectAdToSite_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("collectAdToSite_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class collectAdToSite_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public collectAdToSite_resultStandardScheme getScheme() {
        return new collectAdToSite_resultStandardScheme();
      }
    }

    private static class collectAdToSite_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<collectAdToSite_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, collectAdToSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, collectAdToSite_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class collectAdToSite_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public collectAdToSite_resultTupleScheme getScheme() {
        return new collectAdToSite_resultTupleScheme();
      }
    }

    private static class collectAdToSite_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<collectAdToSite_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, collectAdToSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, collectAdToSite_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMoutanAd_args implements org.apache.thrift.TBase<getMoutanAd_args, getMoutanAd_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMoutanAd_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMoutanAd_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMoutanAd_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMoutanAd_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMoutanAd_args.class, metaDataMap);
    }

    public getMoutanAd_args() {
    }

    public getMoutanAd_args(
      java.lang.String adId,
      java.lang.String siteId)
    {
      this();
      this.adId = adId;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMoutanAd_args(getMoutanAd_args other) {
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public getMoutanAd_args deepCopy() {
      return new getMoutanAd_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.siteId = null;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public getMoutanAd_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getMoutanAd_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMoutanAd_args)
        return this.equals((getMoutanAd_args)that);
      return false;
    }

    public boolean equals(getMoutanAd_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMoutanAd_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMoutanAd_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMoutanAd_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMoutanAd_argsStandardScheme getScheme() {
        return new getMoutanAd_argsStandardScheme();
      }
    }

    private static class getMoutanAd_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMoutanAd_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMoutanAd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMoutanAd_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMoutanAd_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMoutanAd_argsTupleScheme getScheme() {
        return new getMoutanAd_argsTupleScheme();
      }
    }

    private static class getMoutanAd_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMoutanAd_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMoutanAd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMoutanAd_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMoutanAd_result implements org.apache.thrift.TBase<getMoutanAd_result, getMoutanAd_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMoutanAd_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMoutanAd_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMoutanAd_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMoutanAd_resultTupleSchemeFactory();

    public TMoutanAd success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TMoutanAd.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMoutanAd_result.class, metaDataMap);
    }

    public getMoutanAd_result() {
    }

    public getMoutanAd_result(
      TMoutanAd success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMoutanAd_result(getMoutanAd_result other) {
      if (other.isSetSuccess()) {
        this.success = new TMoutanAd(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getMoutanAd_result deepCopy() {
      return new getMoutanAd_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TMoutanAd getSuccess() {
      return this.success;
    }

    public getMoutanAd_result setSuccess(TMoutanAd success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getMoutanAd_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getMoutanAd_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TMoutanAd)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMoutanAd_result)
        return this.equals((getMoutanAd_result)that);
      return false;
    }

    public boolean equals(getMoutanAd_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMoutanAd_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMoutanAd_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMoutanAd_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMoutanAd_resultStandardScheme getScheme() {
        return new getMoutanAd_resultStandardScheme();
      }
    }

    private static class getMoutanAd_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMoutanAd_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMoutanAd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TMoutanAd();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMoutanAd_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMoutanAd_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMoutanAd_resultTupleScheme getScheme() {
        return new getMoutanAd_resultTupleScheme();
      }
    }

    private static class getMoutanAd_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMoutanAd_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMoutanAd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMoutanAd_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TMoutanAd();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMoutanAds_args implements org.apache.thrift.TBase<getMoutanAds_args, getMoutanAds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getMoutanAds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMoutanAds_args");

    private static final org.apache.thrift.protocol.TField AD_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("adIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMoutanAds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMoutanAds_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> adIds; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_IDS((short)1, "adIds"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_IDS
            return AD_IDS;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_IDS, new org.apache.thrift.meta_data.FieldMetaData("adIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMoutanAds_args.class, metaDataMap);
    }

    public getMoutanAds_args() {
    }

    public getMoutanAds_args(
      java.util.List<java.lang.String> adIds,
      java.lang.String siteId)
    {
      this();
      this.adIds = adIds;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMoutanAds_args(getMoutanAds_args other) {
      if (other.isSetAdIds()) {
        java.util.List<java.lang.String> __this__adIds = new java.util.ArrayList<java.lang.String>(other.adIds);
        this.adIds = __this__adIds;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public getMoutanAds_args deepCopy() {
      return new getMoutanAds_args(this);
    }

    @Override
    public void clear() {
      this.adIds = null;
      this.siteId = null;
    }

    public int getAdIdsSize() {
      return (this.adIds == null) ? 0 : this.adIds.size();
    }

    public java.util.Iterator<java.lang.String> getAdIdsIterator() {
      return (this.adIds == null) ? null : this.adIds.iterator();
    }

    public void addToAdIds(java.lang.String elem) {
      if (this.adIds == null) {
        this.adIds = new java.util.ArrayList<java.lang.String>();
      }
      this.adIds.add(elem);
    }

    public java.util.List<java.lang.String> getAdIds() {
      return this.adIds;
    }

    public getMoutanAds_args setAdIds(java.util.List<java.lang.String> adIds) {
      this.adIds = adIds;
      return this;
    }

    public void unsetAdIds() {
      this.adIds = null;
    }

    /** Returns true if field adIds is set (has been assigned a value) and false otherwise */
    public boolean isSetAdIds() {
      return this.adIds != null;
    }

    public void setAdIdsIsSet(boolean value) {
      if (!value) {
        this.adIds = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getMoutanAds_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_IDS:
        if (value == null) {
          unsetAdIds();
        } else {
          setAdIds((java.util.List<java.lang.String>)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_IDS:
        return getAdIds();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_IDS:
        return isSetAdIds();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMoutanAds_args)
        return this.equals((getMoutanAds_args)that);
      return false;
    }

    public boolean equals(getMoutanAds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adIds = true && this.isSetAdIds();
      boolean that_present_adIds = true && that.isSetAdIds();
      if (this_present_adIds || that_present_adIds) {
        if (!(this_present_adIds && that_present_adIds))
          return false;
        if (!this.adIds.equals(that.adIds))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdIds()) ? 131071 : 524287);
      if (isSetAdIds())
        hashCode = hashCode * 8191 + adIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMoutanAds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdIds()).compareTo(other.isSetAdIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adIds, other.adIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMoutanAds_args(");
      boolean first = true;

      sb.append("adIds:");
      if (this.adIds == null) {
        sb.append("null");
      } else {
        sb.append(this.adIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMoutanAds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMoutanAds_argsStandardScheme getScheme() {
        return new getMoutanAds_argsStandardScheme();
      }
    }

    private static class getMoutanAds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMoutanAds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMoutanAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list94 = iprot.readListBegin();
                  struct.adIds = new java.util.ArrayList<java.lang.String>(_list94.size);
                  java.lang.String _elem95;
                  for (int _i96 = 0; _i96 < _list94.size; ++_i96)
                  {
                    _elem95 = iprot.readString();
                    struct.adIds.add(_elem95);
                  }
                  iprot.readListEnd();
                }
                struct.setAdIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMoutanAds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adIds != null) {
          oprot.writeFieldBegin(AD_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.adIds.size()));
            for (java.lang.String _iter97 : struct.adIds)
            {
              oprot.writeString(_iter97);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMoutanAds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMoutanAds_argsTupleScheme getScheme() {
        return new getMoutanAds_argsTupleScheme();
      }
    }

    private static class getMoutanAds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMoutanAds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMoutanAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdIds()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAdIds()) {
          {
            oprot.writeI32(struct.adIds.size());
            for (java.lang.String _iter98 : struct.adIds)
            {
              oprot.writeString(_iter98);
            }
          }
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMoutanAds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list99 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.adIds = new java.util.ArrayList<java.lang.String>(_list99.size);
            java.lang.String _elem100;
            for (int _i101 = 0; _i101 < _list99.size; ++_i101)
            {
              _elem100 = iprot.readString();
              struct.adIds.add(_elem100);
            }
          }
          struct.setAdIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getMoutanAds_result implements org.apache.thrift.TBase<getMoutanAds_result, getMoutanAds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getMoutanAds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getMoutanAds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getMoutanAds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getMoutanAds_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,TMoutanAd> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.MAP          , "MultiTMoutanAd")));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getMoutanAds_result.class, metaDataMap);
    }

    public getMoutanAds_result() {
    }

    public getMoutanAds_result(
      java.util.Map<java.lang.String,TMoutanAd> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getMoutanAds_result(getMoutanAds_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,TMoutanAd> __this__success = new java.util.HashMap<java.lang.String,TMoutanAd>(other.success.size());
        for (java.util.Map.Entry<java.lang.String, TMoutanAd> other_element : other.success.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          TMoutanAd other_element_value = other_element.getValue();

          java.lang.String __this__success_copy_key = other_element_key;

          TMoutanAd __this__success_copy_value = new TMoutanAd(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getMoutanAds_result deepCopy() {
      return new getMoutanAds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, TMoutanAd val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,TMoutanAd>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,TMoutanAd> getSuccess() {
      return this.success;
    }

    public getMoutanAds_result setSuccess(java.util.Map<java.lang.String,TMoutanAd> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getMoutanAds_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getMoutanAds_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,TMoutanAd>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getMoutanAds_result)
        return this.equals((getMoutanAds_result)that);
      return false;
    }

    public boolean equals(getMoutanAds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getMoutanAds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getMoutanAds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getMoutanAds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMoutanAds_resultStandardScheme getScheme() {
        return new getMoutanAds_resultStandardScheme();
      }
    }

    private static class getMoutanAds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getMoutanAds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getMoutanAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map102 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,TMoutanAd>(2*_map102.size);
                  java.lang.String _key103;
                  TMoutanAd _val104;
                  for (int _i105 = 0; _i105 < _map102.size; ++_i105)
                  {
                    _key103 = iprot.readString();
                    _val104 = new TMoutanAd();
                    _val104.read(iprot);
                    struct.success.put(_key103, _val104);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getMoutanAds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, TMoutanAd> _iter106 : struct.success.entrySet())
            {
              oprot.writeString(_iter106.getKey());
              _iter106.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getMoutanAds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getMoutanAds_resultTupleScheme getScheme() {
        return new getMoutanAds_resultTupleScheme();
      }
    }

    private static class getMoutanAds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getMoutanAds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getMoutanAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, TMoutanAd> _iter107 : struct.success.entrySet())
            {
              oprot.writeString(_iter107.getKey());
              _iter107.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getMoutanAds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map108 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,TMoutanAd>(2*_map108.size);
            java.lang.String _key109;
            TMoutanAd _val110;
            for (int _i111 = 0; _i111 < _map108.size; ++_i111)
            {
              _key109 = iprot.readString();
              _val110 = new TMoutanAd();
              _val110.read(iprot);
              struct.success.put(_key109, _val110);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdStatus_args implements org.apache.thrift.TBase<getAdStatus_args, getAdStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAdStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdStatus_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdStatus_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdStatus_args.class, metaDataMap);
    }

    public getAdStatus_args() {
    }

    public getAdStatus_args(
      java.lang.String adId,
      java.lang.String siteId)
    {
      this();
      this.adId = adId;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdStatus_args(getAdStatus_args other) {
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public getAdStatus_args deepCopy() {
      return new getAdStatus_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.siteId = null;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public getAdStatus_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getAdStatus_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdStatus_args)
        return this.equals((getAdStatus_args)that);
      return false;
    }

    public boolean equals(getAdStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdStatus_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdStatus_argsStandardScheme getScheme() {
        return new getAdStatus_argsStandardScheme();
      }
    }

    private static class getAdStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdStatus_argsTupleScheme getScheme() {
        return new getAdStatus_argsTupleScheme();
      }
    }

    private static class getAdStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdStatus_result implements org.apache.thrift.TBase<getAdStatus_result, getAdStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAdStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdStatus_resultTupleSchemeFactory();

    public TSiteAdStatus success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSiteAdStatus.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdStatus_result.class, metaDataMap);
    }

    public getAdStatus_result() {
    }

    public getAdStatus_result(
      TSiteAdStatus success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdStatus_result(getAdStatus_result other) {
      if (other.isSetSuccess()) {
        this.success = new TSiteAdStatus(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getAdStatus_result deepCopy() {
      return new getAdStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TSiteAdStatus getSuccess() {
      return this.success;
    }

    public getAdStatus_result setSuccess(TSiteAdStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getAdStatus_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getAdStatus_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TSiteAdStatus)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdStatus_result)
        return this.equals((getAdStatus_result)that);
      return false;
    }

    public boolean equals(getAdStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdStatus_resultStandardScheme getScheme() {
        return new getAdStatus_resultStandardScheme();
      }
    }

    private static class getAdStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TSiteAdStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdStatus_resultTupleScheme getScheme() {
        return new getAdStatus_resultTupleScheme();
      }
    }

    private static class getAdStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TSiteAdStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdsStatus_args implements org.apache.thrift.TBase<getAdsStatus_args, getAdsStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAdsStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdsStatus_args");

    private static final org.apache.thrift.protocol.TField AD_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("adIds", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdsStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdsStatus_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> adIds; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_IDS((short)1, "adIds"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_IDS
            return AD_IDS;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_IDS, new org.apache.thrift.meta_data.FieldMetaData("adIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdsStatus_args.class, metaDataMap);
    }

    public getAdsStatus_args() {
    }

    public getAdsStatus_args(
      java.util.List<java.lang.String> adIds,
      java.lang.String siteId)
    {
      this();
      this.adIds = adIds;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdsStatus_args(getAdsStatus_args other) {
      if (other.isSetAdIds()) {
        java.util.List<java.lang.String> __this__adIds = new java.util.ArrayList<java.lang.String>(other.adIds);
        this.adIds = __this__adIds;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public getAdsStatus_args deepCopy() {
      return new getAdsStatus_args(this);
    }

    @Override
    public void clear() {
      this.adIds = null;
      this.siteId = null;
    }

    public int getAdIdsSize() {
      return (this.adIds == null) ? 0 : this.adIds.size();
    }

    public java.util.Iterator<java.lang.String> getAdIdsIterator() {
      return (this.adIds == null) ? null : this.adIds.iterator();
    }

    public void addToAdIds(java.lang.String elem) {
      if (this.adIds == null) {
        this.adIds = new java.util.ArrayList<java.lang.String>();
      }
      this.adIds.add(elem);
    }

    public java.util.List<java.lang.String> getAdIds() {
      return this.adIds;
    }

    public getAdsStatus_args setAdIds(java.util.List<java.lang.String> adIds) {
      this.adIds = adIds;
      return this;
    }

    public void unsetAdIds() {
      this.adIds = null;
    }

    /** Returns true if field adIds is set (has been assigned a value) and false otherwise */
    public boolean isSetAdIds() {
      return this.adIds != null;
    }

    public void setAdIdsIsSet(boolean value) {
      if (!value) {
        this.adIds = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getAdsStatus_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_IDS:
        if (value == null) {
          unsetAdIds();
        } else {
          setAdIds((java.util.List<java.lang.String>)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_IDS:
        return getAdIds();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_IDS:
        return isSetAdIds();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdsStatus_args)
        return this.equals((getAdsStatus_args)that);
      return false;
    }

    public boolean equals(getAdsStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adIds = true && this.isSetAdIds();
      boolean that_present_adIds = true && that.isSetAdIds();
      if (this_present_adIds || that_present_adIds) {
        if (!(this_present_adIds && that_present_adIds))
          return false;
        if (!this.adIds.equals(that.adIds))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdIds()) ? 131071 : 524287);
      if (isSetAdIds())
        hashCode = hashCode * 8191 + adIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdsStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdIds()).compareTo(other.isSetAdIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adIds, other.adIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdsStatus_args(");
      boolean first = true;

      sb.append("adIds:");
      if (this.adIds == null) {
        sb.append("null");
      } else {
        sb.append(this.adIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdsStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdsStatus_argsStandardScheme getScheme() {
        return new getAdsStatus_argsStandardScheme();
      }
    }

    private static class getAdsStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdsStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdsStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.adIds = new java.util.ArrayList<java.lang.String>(_list112.size);
                  java.lang.String _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = iprot.readString();
                    struct.adIds.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setAdIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdsStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adIds != null) {
          oprot.writeFieldBegin(AD_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.adIds.size()));
            for (java.lang.String _iter115 : struct.adIds)
            {
              oprot.writeString(_iter115);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdsStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdsStatus_argsTupleScheme getScheme() {
        return new getAdsStatus_argsTupleScheme();
      }
    }

    private static class getAdsStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdsStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdsStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdIds()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAdIds()) {
          {
            oprot.writeI32(struct.adIds.size());
            for (java.lang.String _iter116 : struct.adIds)
            {
              oprot.writeString(_iter116);
            }
          }
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdsStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.adIds = new java.util.ArrayList<java.lang.String>(_list117.size);
            java.lang.String _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = iprot.readString();
              struct.adIds.add(_elem118);
            }
          }
          struct.setAdIdsIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdsStatus_result implements org.apache.thrift.TBase<getAdsStatus_result, getAdsStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAdsStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdsStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdsStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdsStatus_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,TSiteAdStatus> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TSiteAdStatus.class))));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdsStatus_result.class, metaDataMap);
    }

    public getAdsStatus_result() {
    }

    public getAdsStatus_result(
      java.util.Map<java.lang.String,TSiteAdStatus> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdsStatus_result(getAdsStatus_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,TSiteAdStatus> __this__success = new java.util.HashMap<java.lang.String,TSiteAdStatus>(other.success.size());
        for (java.util.Map.Entry<java.lang.String, TSiteAdStatus> other_element : other.success.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          TSiteAdStatus other_element_value = other_element.getValue();

          java.lang.String __this__success_copy_key = other_element_key;

          TSiteAdStatus __this__success_copy_value = new TSiteAdStatus(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getAdsStatus_result deepCopy() {
      return new getAdsStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, TSiteAdStatus val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,TSiteAdStatus>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,TSiteAdStatus> getSuccess() {
      return this.success;
    }

    public getAdsStatus_result setSuccess(java.util.Map<java.lang.String,TSiteAdStatus> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getAdsStatus_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getAdsStatus_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,TSiteAdStatus>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdsStatus_result)
        return this.equals((getAdsStatus_result)that);
      return false;
    }

    public boolean equals(getAdsStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdsStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdsStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdsStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdsStatus_resultStandardScheme getScheme() {
        return new getAdsStatus_resultStandardScheme();
      }
    }

    private static class getAdsStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdsStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdsStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map120 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,TSiteAdStatus>(2*_map120.size);
                  java.lang.String _key121;
                  TSiteAdStatus _val122;
                  for (int _i123 = 0; _i123 < _map120.size; ++_i123)
                  {
                    _key121 = iprot.readString();
                    _val122 = new TSiteAdStatus();
                    _val122.read(iprot);
                    struct.success.put(_key121, _val122);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdsStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, TSiteAdStatus> _iter124 : struct.success.entrySet())
            {
              oprot.writeString(_iter124.getKey());
              _iter124.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdsStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdsStatus_resultTupleScheme getScheme() {
        return new getAdsStatus_resultTupleScheme();
      }
    }

    private static class getAdsStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdsStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdsStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, TSiteAdStatus> _iter125 : struct.success.entrySet())
            {
              oprot.writeString(_iter125.getKey());
              _iter125.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdsStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map126 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,TSiteAdStatus>(2*_map126.size);
            java.lang.String _key127;
            TSiteAdStatus _val128;
            for (int _i129 = 0; _i129 < _map126.size; ++_i129)
            {
              _key127 = iprot.readString();
              _val128 = new TSiteAdStatus();
              _val128.read(iprot);
              struct.success.put(_key127, _val128);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class returnToModify_args implements org.apache.thrift.TBase<returnToModify_args, returnToModify_args._Fields>, java.io.Serializable, Cloneable, Comparable<returnToModify_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnToModify_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnToModify_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnToModify_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String siteId; // required
    public java.lang.String reason; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      SITE_ID((short)2, "siteId"),
      REASON((short)3, "reason");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // SITE_ID
            return SITE_ID;
          case 3: // REASON
            return REASON;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnToModify_args.class, metaDataMap);
    }

    public returnToModify_args() {
    }

    public returnToModify_args(
      java.lang.String adId,
      java.lang.String siteId,
      java.lang.String reason)
    {
      this();
      this.adId = adId;
      this.siteId = siteId;
      this.reason = reason;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnToModify_args(returnToModify_args other) {
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      if (other.isSetReason()) {
        this.reason = other.reason;
      }
    }

    public returnToModify_args deepCopy() {
      return new returnToModify_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.siteId = null;
      this.reason = null;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public returnToModify_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public returnToModify_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public java.lang.String getReason() {
      return this.reason;
    }

    public returnToModify_args setReason(java.lang.String reason) {
      this.reason = reason;
      return this;
    }

    public void unsetReason() {
      this.reason = null;
    }

    /** Returns true if field reason is set (has been assigned a value) and false otherwise */
    public boolean isSetReason() {
      return this.reason != null;
    }

    public void setReasonIsSet(boolean value) {
      if (!value) {
        this.reason = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case REASON:
        if (value == null) {
          unsetReason();
        } else {
          setReason((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case SITE_ID:
        return getSiteId();

      case REASON:
        return getReason();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case SITE_ID:
        return isSetSiteId();
      case REASON:
        return isSetReason();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof returnToModify_args)
        return this.equals((returnToModify_args)that);
      return false;
    }

    public boolean equals(returnToModify_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_reason = true && this.isSetReason();
      boolean that_present_reason = true && that.isSetReason();
      if (this_present_reason || that_present_reason) {
        if (!(this_present_reason && that_present_reason))
          return false;
        if (!this.reason.equals(that.reason))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + ((isSetReason()) ? 131071 : 524287);
      if (isSetReason())
        hashCode = hashCode * 8191 + reason.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(returnToModify_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReason()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("returnToModify_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnToModify_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnToModify_argsStandardScheme getScheme() {
        return new returnToModify_argsStandardScheme();
      }
    }

    private static class returnToModify_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnToModify_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnToModify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REASON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reason = iprot.readString();
                struct.setReasonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnToModify_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        if (struct.reason != null) {
          oprot.writeFieldBegin(REASON_FIELD_DESC);
          oprot.writeString(struct.reason);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnToModify_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnToModify_argsTupleScheme getScheme() {
        return new returnToModify_argsTupleScheme();
      }
    }

    private static class returnToModify_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnToModify_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnToModify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        if (struct.isSetReason()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetReason()) {
          oprot.writeString(struct.reason);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnToModify_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.reason = iprot.readString();
          struct.setReasonIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class returnToModify_result implements org.apache.thrift.TBase<returnToModify_result, returnToModify_result._Fields>, java.io.Serializable, Cloneable, Comparable<returnToModify_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("returnToModify_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new returnToModify_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new returnToModify_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(returnToModify_result.class, metaDataMap);
    }

    public returnToModify_result() {
    }

    public returnToModify_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public returnToModify_result(returnToModify_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public returnToModify_result deepCopy() {
      return new returnToModify_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public returnToModify_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public returnToModify_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public returnToModify_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof returnToModify_result)
        return this.equals((returnToModify_result)that);
      return false;
    }

    public boolean equals(returnToModify_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(returnToModify_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("returnToModify_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class returnToModify_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnToModify_resultStandardScheme getScheme() {
        return new returnToModify_resultStandardScheme();
      }
    }

    private static class returnToModify_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<returnToModify_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, returnToModify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, returnToModify_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class returnToModify_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public returnToModify_resultTupleScheme getScheme() {
        return new returnToModify_resultTupleScheme();
      }
    }

    private static class returnToModify_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<returnToModify_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, returnToModify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, returnToModify_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modifyToReview_args implements org.apache.thrift.TBase<modifyToReview_args, modifyToReview_args._Fields>, java.io.Serializable, Cloneable, Comparable<modifyToReview_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyToReview_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyToReview_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyToReview_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyToReview_args.class, metaDataMap);
    }

    public modifyToReview_args() {
    }

    public modifyToReview_args(
      java.lang.String adId,
      java.lang.String siteId)
    {
      this();
      this.adId = adId;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyToReview_args(modifyToReview_args other) {
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public modifyToReview_args deepCopy() {
      return new modifyToReview_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.siteId = null;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public modifyToReview_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public modifyToReview_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyToReview_args)
        return this.equals((modifyToReview_args)that);
      return false;
    }

    public boolean equals(modifyToReview_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(modifyToReview_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modifyToReview_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyToReview_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyToReview_argsStandardScheme getScheme() {
        return new modifyToReview_argsStandardScheme();
      }
    }

    private static class modifyToReview_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyToReview_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyToReview_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyToReview_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyToReview_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyToReview_argsTupleScheme getScheme() {
        return new modifyToReview_argsTupleScheme();
      }
    }

    private static class modifyToReview_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyToReview_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyToReview_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyToReview_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class modifyToReview_result implements org.apache.thrift.TBase<modifyToReview_result, modifyToReview_result._Fields>, java.io.Serializable, Cloneable, Comparable<modifyToReview_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("modifyToReview_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new modifyToReview_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new modifyToReview_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(modifyToReview_result.class, metaDataMap);
    }

    public modifyToReview_result() {
    }

    public modifyToReview_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public modifyToReview_result(modifyToReview_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public modifyToReview_result deepCopy() {
      return new modifyToReview_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public modifyToReview_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public modifyToReview_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public modifyToReview_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof modifyToReview_result)
        return this.equals((modifyToReview_result)that);
      return false;
    }

    public boolean equals(modifyToReview_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(modifyToReview_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("modifyToReview_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class modifyToReview_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyToReview_resultStandardScheme getScheme() {
        return new modifyToReview_resultStandardScheme();
      }
    }

    private static class modifyToReview_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<modifyToReview_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, modifyToReview_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, modifyToReview_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class modifyToReview_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public modifyToReview_resultTupleScheme getScheme() {
        return new modifyToReview_resultTupleScheme();
      }
    }

    private static class modifyToReview_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<modifyToReview_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, modifyToReview_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, modifyToReview_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAdStatus_args implements org.apache.thrift.TBase<updateAdStatus_args, updateAdStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAdStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAdStatus_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAdStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAdStatus_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String siteId; // required
    /**
     * 
     * @see SiteAdStatus
     */
    public SiteAdStatus status; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      SITE_ID((short)2, "siteId"),
      /**
       * 
       * @see SiteAdStatus
       */
      STATUS((short)3, "status");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // SITE_ID
            return SITE_ID;
          case 3: // STATUS
            return STATUS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SiteAdStatus.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAdStatus_args.class, metaDataMap);
    }

    public updateAdStatus_args() {
    }

    public updateAdStatus_args(
      java.lang.String adId,
      java.lang.String siteId,
      SiteAdStatus status)
    {
      this();
      this.adId = adId;
      this.siteId = siteId;
      this.status = status;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAdStatus_args(updateAdStatus_args other) {
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      if (other.isSetStatus()) {
        this.status = other.status;
      }
    }

    public updateAdStatus_args deepCopy() {
      return new updateAdStatus_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.siteId = null;
      this.status = null;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public updateAdStatus_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public updateAdStatus_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    /**
     * 
     * @see SiteAdStatus
     */
    public SiteAdStatus getStatus() {
      return this.status;
    }

    /**
     * 
     * @see SiteAdStatus
     */
    public updateAdStatus_args setStatus(SiteAdStatus status) {
      this.status = status;
      return this;
    }

    public void unsetStatus() {
      this.status = null;
    }

    /** Returns true if field status is set (has been assigned a value) and false otherwise */
    public boolean isSetStatus() {
      return this.status != null;
    }

    public void setStatusIsSet(boolean value) {
      if (!value) {
        this.status = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case STATUS:
        if (value == null) {
          unsetStatus();
        } else {
          setStatus((SiteAdStatus)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case SITE_ID:
        return getSiteId();

      case STATUS:
        return getStatus();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case SITE_ID:
        return isSetSiteId();
      case STATUS:
        return isSetStatus();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAdStatus_args)
        return this.equals((updateAdStatus_args)that);
      return false;
    }

    public boolean equals(updateAdStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_status = true && this.isSetStatus();
      boolean that_present_status = true && that.isSetStatus();
      if (this_present_status || that_present_status) {
        if (!(this_present_status && that_present_status))
          return false;
        if (!this.status.equals(that.status))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + ((isSetStatus()) ? 131071 : 524287);
      if (isSetStatus())
        hashCode = hashCode * 8191 + status.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(updateAdStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStatus()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAdStatus_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("status:");
      if (this.status == null) {
        sb.append("null");
      } else {
        sb.append(this.status);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAdStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdStatus_argsStandardScheme getScheme() {
        return new updateAdStatus_argsStandardScheme();
      }
    }

    private static class updateAdStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAdStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAdStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATUS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.status = com.baixing.thrift.moutan.SiteAdStatus.findByValue(iprot.readI32());
                struct.setStatusIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAdStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        if (struct.status != null) {
          oprot.writeFieldBegin(STATUS_FIELD_DESC);
          oprot.writeI32(struct.status.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAdStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdStatus_argsTupleScheme getScheme() {
        return new updateAdStatus_argsTupleScheme();
      }
    }

    private static class updateAdStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAdStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAdStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        if (struct.isSetStatus()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetStatus()) {
          oprot.writeI32(struct.status.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAdStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.status = com.baixing.thrift.moutan.SiteAdStatus.findByValue(iprot.readI32());
          struct.setStatusIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAdStatus_result implements org.apache.thrift.TBase<updateAdStatus_result, updateAdStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAdStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAdStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAdStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAdStatus_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAdStatus_result.class, metaDataMap);
    }

    public updateAdStatus_result() {
    }

    public updateAdStatus_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAdStatus_result(updateAdStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public updateAdStatus_result deepCopy() {
      return new updateAdStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateAdStatus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public updateAdStatus_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public updateAdStatus_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAdStatus_result)
        return this.equals((updateAdStatus_result)that);
      return false;
    }

    public boolean equals(updateAdStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAdStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAdStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAdStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdStatus_resultStandardScheme getScheme() {
        return new updateAdStatus_resultStandardScheme();
      }
    }

    private static class updateAdStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAdStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAdStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAdStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAdStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdStatus_resultTupleScheme getScheme() {
        return new updateAdStatus_resultTupleScheme();
      }
    }

    private static class updateAdStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAdStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAdStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAdStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class eliminate_args implements org.apache.thrift.TBase<eliminate_args, eliminate_args._Fields>, java.io.Serializable, Cloneable, Comparable<eliminate_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("eliminate_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new eliminate_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new eliminate_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(eliminate_args.class, metaDataMap);
    }

    public eliminate_args() {
    }

    public eliminate_args(
      java.lang.String adId,
      java.lang.String siteId)
    {
      this();
      this.adId = adId;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public eliminate_args(eliminate_args other) {
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public eliminate_args deepCopy() {
      return new eliminate_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.siteId = null;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public eliminate_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public eliminate_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof eliminate_args)
        return this.equals((eliminate_args)that);
      return false;
    }

    public boolean equals(eliminate_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(eliminate_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("eliminate_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class eliminate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public eliminate_argsStandardScheme getScheme() {
        return new eliminate_argsStandardScheme();
      }
    }

    private static class eliminate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<eliminate_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, eliminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, eliminate_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class eliminate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public eliminate_argsTupleScheme getScheme() {
        return new eliminate_argsTupleScheme();
      }
    }

    private static class eliminate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<eliminate_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, eliminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, eliminate_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class eliminate_result implements org.apache.thrift.TBase<eliminate_result, eliminate_result._Fields>, java.io.Serializable, Cloneable, Comparable<eliminate_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("eliminate_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new eliminate_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new eliminate_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(eliminate_result.class, metaDataMap);
    }

    public eliminate_result() {
    }

    public eliminate_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public eliminate_result(eliminate_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public eliminate_result deepCopy() {
      return new eliminate_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public eliminate_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public eliminate_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public eliminate_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof eliminate_result)
        return this.equals((eliminate_result)that);
      return false;
    }

    public boolean equals(eliminate_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(eliminate_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("eliminate_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class eliminate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public eliminate_resultStandardScheme getScheme() {
        return new eliminate_resultStandardScheme();
      }
    }

    private static class eliminate_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<eliminate_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, eliminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, eliminate_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class eliminate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public eliminate_resultTupleScheme getScheme() {
        return new eliminate_resultTupleScheme();
      }
    }

    private static class eliminate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<eliminate_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, eliminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, eliminate_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class refresh_args implements org.apache.thrift.TBase<refresh_args, refresh_args._Fields>, java.io.Serializable, Cloneable, Comparable<refresh_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refresh_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new refresh_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new refresh_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refresh_args.class, metaDataMap);
    }

    public refresh_args() {
    }

    public refresh_args(
      java.lang.String adId,
      java.lang.String siteId)
    {
      this();
      this.adId = adId;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refresh_args(refresh_args other) {
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public refresh_args deepCopy() {
      return new refresh_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.siteId = null;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public refresh_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public refresh_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof refresh_args)
        return this.equals((refresh_args)that);
      return false;
    }

    public boolean equals(refresh_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(refresh_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("refresh_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refresh_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public refresh_argsStandardScheme getScheme() {
        return new refresh_argsStandardScheme();
      }
    }

    private static class refresh_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<refresh_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refresh_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refresh_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refresh_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public refresh_argsTupleScheme getScheme() {
        return new refresh_argsTupleScheme();
      }
    }

    private static class refresh_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<refresh_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refresh_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refresh_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class refresh_result implements org.apache.thrift.TBase<refresh_result, refresh_result._Fields>, java.io.Serializable, Cloneable, Comparable<refresh_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("refresh_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new refresh_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new refresh_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(refresh_result.class, metaDataMap);
    }

    public refresh_result() {
    }

    public refresh_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public refresh_result(refresh_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public refresh_result deepCopy() {
      return new refresh_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public refresh_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public refresh_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public refresh_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof refresh_result)
        return this.equals((refresh_result)that);
      return false;
    }

    public boolean equals(refresh_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(refresh_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("refresh_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class refresh_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public refresh_resultStandardScheme getScheme() {
        return new refresh_resultStandardScheme();
      }
    }

    private static class refresh_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<refresh_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, refresh_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, refresh_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class refresh_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public refresh_resultTupleScheme getScheme() {
        return new refresh_resultTupleScheme();
      }
    }

    private static class refresh_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<refresh_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, refresh_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, refresh_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ding_args implements org.apache.thrift.TBase<ding_args, ding_args._Fields>, java.io.Serializable, Cloneable, Comparable<ding_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ding_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DAYS_FIELD_DESC = new org.apache.thrift.protocol.TField("days", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ding_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ding_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String siteId; // required
    public int days; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      SITE_ID((short)2, "siteId"),
      DAYS((short)3, "days");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // SITE_ID
            return SITE_ID;
          case 3: // DAYS
            return DAYS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __DAYS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DAYS, new org.apache.thrift.meta_data.FieldMetaData("days", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ding_args.class, metaDataMap);
    }

    public ding_args() {
    }

    public ding_args(
      java.lang.String adId,
      java.lang.String siteId,
      int days)
    {
      this();
      this.adId = adId;
      this.siteId = siteId;
      this.days = days;
      setDaysIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ding_args(ding_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      this.days = other.days;
    }

    public ding_args deepCopy() {
      return new ding_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.siteId = null;
      setDaysIsSet(false);
      this.days = 0;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public ding_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public ding_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public int getDays() {
      return this.days;
    }

    public ding_args setDays(int days) {
      this.days = days;
      setDaysIsSet(true);
      return this;
    }

    public void unsetDays() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DAYS_ISSET_ID);
    }

    /** Returns true if field days is set (has been assigned a value) and false otherwise */
    public boolean isSetDays() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DAYS_ISSET_ID);
    }

    public void setDaysIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DAYS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case DAYS:
        if (value == null) {
          unsetDays();
        } else {
          setDays((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case SITE_ID:
        return getSiteId();

      case DAYS:
        return getDays();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case SITE_ID:
        return isSetSiteId();
      case DAYS:
        return isSetDays();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ding_args)
        return this.equals((ding_args)that);
      return false;
    }

    public boolean equals(ding_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_days = true;
      boolean that_present_days = true;
      if (this_present_days || that_present_days) {
        if (!(this_present_days && that_present_days))
          return false;
        if (this.days != that.days)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + days;

      return hashCode;
    }

    @Override
    public int compareTo(ding_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDays()).compareTo(other.isSetDays());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDays()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.days, other.days);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ding_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("days:");
      sb.append(this.days);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ding_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ding_argsStandardScheme getScheme() {
        return new ding_argsStandardScheme();
      }
    }

    private static class ding_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ding_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ding_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DAYS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.days = iprot.readI32();
                struct.setDaysIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ding_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(DAYS_FIELD_DESC);
        oprot.writeI32(struct.days);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ding_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ding_argsTupleScheme getScheme() {
        return new ding_argsTupleScheme();
      }
    }

    private static class ding_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ding_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ding_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        if (struct.isSetDays()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetDays()) {
          oprot.writeI32(struct.days);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ding_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.days = iprot.readI32();
          struct.setDaysIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ding_result implements org.apache.thrift.TBase<ding_result, ding_result._Fields>, java.io.Serializable, Cloneable, Comparable<ding_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ding_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ding_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ding_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ding_result.class, metaDataMap);
    }

    public ding_result() {
    }

    public ding_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ding_result(ding_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public ding_result deepCopy() {
      return new ding_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ding_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public ding_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public ding_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ding_result)
        return this.equals((ding_result)that);
      return false;
    }

    public boolean equals(ding_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ding_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ding_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ding_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ding_resultStandardScheme getScheme() {
        return new ding_resultStandardScheme();
      }
    }

    private static class ding_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ding_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ding_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ding_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ding_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ding_resultTupleScheme getScheme() {
        return new ding_resultTupleScheme();
      }
    }

    private static class ding_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ding_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ding_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ding_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isInDing_args implements org.apache.thrift.TBase<isInDing_args, isInDing_args._Fields>, java.io.Serializable, Cloneable, Comparable<isInDing_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isInDing_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isInDing_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isInDing_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isInDing_args.class, metaDataMap);
    }

    public isInDing_args() {
    }

    public isInDing_args(
      java.lang.String adId,
      java.lang.String siteId)
    {
      this();
      this.adId = adId;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInDing_args(isInDing_args other) {
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public isInDing_args deepCopy() {
      return new isInDing_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.siteId = null;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public isInDing_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public isInDing_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isInDing_args)
        return this.equals((isInDing_args)that);
      return false;
    }

    public boolean equals(isInDing_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isInDing_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isInDing_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isInDing_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isInDing_argsStandardScheme getScheme() {
        return new isInDing_argsStandardScheme();
      }
    }

    private static class isInDing_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<isInDing_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isInDing_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isInDing_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isInDing_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isInDing_argsTupleScheme getScheme() {
        return new isInDing_argsTupleScheme();
      }
    }

    private static class isInDing_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<isInDing_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isInDing_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isInDing_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isInDing_result implements org.apache.thrift.TBase<isInDing_result, isInDing_result._Fields>, java.io.Serializable, Cloneable, Comparable<isInDing_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isInDing_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isInDing_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isInDing_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isInDing_result.class, metaDataMap);
    }

    public isInDing_result() {
    }

    public isInDing_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isInDing_result(isInDing_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public isInDing_result deepCopy() {
      return new isInDing_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isInDing_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public isInDing_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public isInDing_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isInDing_result)
        return this.equals((isInDing_result)that);
      return false;
    }

    public boolean equals(isInDing_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isInDing_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isInDing_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isInDing_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isInDing_resultStandardScheme getScheme() {
        return new isInDing_resultStandardScheme();
      }
    }

    private static class isInDing_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<isInDing_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isInDing_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isInDing_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isInDing_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isInDing_resultTupleScheme getScheme() {
        return new isInDing_resultTupleScheme();
      }
    }

    private static class isInDing_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<isInDing_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isInDing_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isInDing_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDingAdIds_args implements org.apache.thrift.TBase<getDingAdIds_args, getDingAdIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDingAdIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDingAdIds_args");

    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDingAdIds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDingAdIds_argsTupleSchemeFactory();

    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SITE_ID((short)1, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDingAdIds_args.class, metaDataMap);
    }

    public getDingAdIds_args() {
    }

    public getDingAdIds_args(
      java.lang.String siteId)
    {
      this();
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDingAdIds_args(getDingAdIds_args other) {
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public getDingAdIds_args deepCopy() {
      return new getDingAdIds_args(this);
    }

    @Override
    public void clear() {
      this.siteId = null;
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getDingAdIds_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDingAdIds_args)
        return this.equals((getDingAdIds_args)that);
      return false;
    }

    public boolean equals(getDingAdIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDingAdIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDingAdIds_args(");
      boolean first = true;

      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDingAdIds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDingAdIds_argsStandardScheme getScheme() {
        return new getDingAdIds_argsStandardScheme();
      }
    }

    private static class getDingAdIds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDingAdIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDingAdIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDingAdIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDingAdIds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDingAdIds_argsTupleScheme getScheme() {
        return new getDingAdIds_argsTupleScheme();
      }
    }

    private static class getDingAdIds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDingAdIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDingAdIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSiteId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDingAdIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDingAdIds_result implements org.apache.thrift.TBase<getDingAdIds_result, getDingAdIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDingAdIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDingAdIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDingAdIds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDingAdIds_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDingAdIds_result.class, metaDataMap);
    }

    public getDingAdIds_result() {
    }

    public getDingAdIds_result(
      java.util.List<java.lang.String> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDingAdIds_result(getDingAdIds_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getDingAdIds_result deepCopy() {
      return new getDingAdIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public getDingAdIds_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getDingAdIds_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getDingAdIds_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDingAdIds_result)
        return this.equals((getDingAdIds_result)that);
      return false;
    }

    public boolean equals(getDingAdIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDingAdIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDingAdIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDingAdIds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDingAdIds_resultStandardScheme getScheme() {
        return new getDingAdIds_resultStandardScheme();
      }
    }

    private static class getDingAdIds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDingAdIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDingAdIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list130 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list130.size);
                  java.lang.String _elem131;
                  for (int _i132 = 0; _i132 < _list130.size; ++_i132)
                  {
                    _elem131 = iprot.readString();
                    struct.success.add(_elem131);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDingAdIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter133 : struct.success)
            {
              oprot.writeString(_iter133);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDingAdIds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDingAdIds_resultTupleScheme getScheme() {
        return new getDingAdIds_resultTupleScheme();
      }
    }

    private static class getDingAdIds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDingAdIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDingAdIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter134 : struct.success)
            {
              oprot.writeString(_iter134);
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDingAdIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list135 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list135.size);
            java.lang.String _elem136;
            for (int _i137 = 0; _i137 < _list135.size; ++_i137)
            {
              _elem136 = iprot.readString();
              struct.success.add(_elem136);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdCount_args implements org.apache.thrift.TBase<getAdCount_args, getAdCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAdCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdCount_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdCount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdCount_argsTupleSchemeFactory();

    public java.lang.String uid; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdCount_args.class, metaDataMap);
    }

    public getAdCount_args() {
    }

    public getAdCount_args(
      java.lang.String uid,
      java.lang.String siteId)
    {
      this();
      this.uid = uid;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdCount_args(getAdCount_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public getAdCount_args deepCopy() {
      return new getAdCount_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      this.siteId = null;
    }

    public java.lang.String getUid() {
      return this.uid;
    }

    public getAdCount_args setUid(java.lang.String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getAdCount_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdCount_args)
        return this.equals((getAdCount_args)that);
      return false;
    }

    public boolean equals(getAdCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
      if (isSetUid())
        hashCode = hashCode * 8191 + uid.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdCount_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdCount_argsStandardScheme getScheme() {
        return new getAdCount_argsStandardScheme();
      }
    }

    private static class getAdCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdCount_argsTupleScheme getScheme() {
        return new getAdCount_argsTupleScheme();
      }
    }

    private static class getAdCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdCount_result implements org.apache.thrift.TBase<getAdCount_result, getAdCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAdCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdCount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdCount_resultTupleSchemeFactory();

    public int success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdCount_result.class, metaDataMap);
    }

    public getAdCount_result() {
    }

    public getAdCount_result(
      int success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdCount_result(getAdCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getAdCount_result deepCopy() {
      return new getAdCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getAdCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getAdCount_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getAdCount_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdCount_result)
        return this.equals((getAdCount_result)that);
      return false;
    }

    public boolean equals(getAdCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdCount_resultStandardScheme getScheme() {
        return new getAdCount_resultStandardScheme();
      }
    }

    private static class getAdCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdCount_resultTupleScheme getScheme() {
        return new getAdCount_resultTupleScheme();
      }
    }

    private static class getAdCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdCountToday_args implements org.apache.thrift.TBase<getAdCountToday_args, getAdCountToday_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAdCountToday_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdCountToday_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdCountToday_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdCountToday_argsTupleSchemeFactory();

    public java.lang.String uid; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdCountToday_args.class, metaDataMap);
    }

    public getAdCountToday_args() {
    }

    public getAdCountToday_args(
      java.lang.String uid,
      java.lang.String siteId)
    {
      this();
      this.uid = uid;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdCountToday_args(getAdCountToday_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public getAdCountToday_args deepCopy() {
      return new getAdCountToday_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      this.siteId = null;
    }

    public java.lang.String getUid() {
      return this.uid;
    }

    public getAdCountToday_args setUid(java.lang.String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getAdCountToday_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdCountToday_args)
        return this.equals((getAdCountToday_args)that);
      return false;
    }

    public boolean equals(getAdCountToday_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
      if (isSetUid())
        hashCode = hashCode * 8191 + uid.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdCountToday_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdCountToday_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdCountToday_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdCountToday_argsStandardScheme getScheme() {
        return new getAdCountToday_argsStandardScheme();
      }
    }

    private static class getAdCountToday_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdCountToday_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdCountToday_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdCountToday_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdCountToday_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdCountToday_argsTupleScheme getScheme() {
        return new getAdCountToday_argsTupleScheme();
      }
    }

    private static class getAdCountToday_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdCountToday_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdCountToday_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdCountToday_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdCountToday_result implements org.apache.thrift.TBase<getAdCountToday_result, getAdCountToday_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAdCountToday_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdCountToday_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdCountToday_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdCountToday_resultTupleSchemeFactory();

    public int success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdCountToday_result.class, metaDataMap);
    }

    public getAdCountToday_result() {
    }

    public getAdCountToday_result(
      int success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdCountToday_result(getAdCountToday_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getAdCountToday_result deepCopy() {
      return new getAdCountToday_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getAdCountToday_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getAdCountToday_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getAdCountToday_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdCountToday_result)
        return this.equals((getAdCountToday_result)that);
      return false;
    }

    public boolean equals(getAdCountToday_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdCountToday_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdCountToday_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdCountToday_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdCountToday_resultStandardScheme getScheme() {
        return new getAdCountToday_resultStandardScheme();
      }
    }

    private static class getAdCountToday_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdCountToday_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdCountToday_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdCountToday_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdCountToday_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdCountToday_resultTupleScheme getScheme() {
        return new getAdCountToday_resultTupleScheme();
      }
    }

    private static class getAdCountToday_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdCountToday_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdCountToday_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdCountToday_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPaidAdCount_args implements org.apache.thrift.TBase<getPaidAdCount_args, getPaidAdCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPaidAdCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaidAdCount_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPaidAdCount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPaidAdCount_argsTupleSchemeFactory();

    public java.lang.String uid; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaidAdCount_args.class, metaDataMap);
    }

    public getPaidAdCount_args() {
    }

    public getPaidAdCount_args(
      java.lang.String uid,
      java.lang.String siteId)
    {
      this();
      this.uid = uid;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidAdCount_args(getPaidAdCount_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public getPaidAdCount_args deepCopy() {
      return new getPaidAdCount_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      this.siteId = null;
    }

    public java.lang.String getUid() {
      return this.uid;
    }

    public getPaidAdCount_args setUid(java.lang.String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getPaidAdCount_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidAdCount_args)
        return this.equals((getPaidAdCount_args)that);
      return false;
    }

    public boolean equals(getPaidAdCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
      if (isSetUid())
        hashCode = hashCode * 8191 + uid.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPaidAdCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPaidAdCount_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaidAdCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaidAdCount_argsStandardScheme getScheme() {
        return new getPaidAdCount_argsStandardScheme();
      }
    }

    private static class getPaidAdCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPaidAdCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaidAdCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaidAdCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaidAdCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaidAdCount_argsTupleScheme getScheme() {
        return new getPaidAdCount_argsTupleScheme();
      }
    }

    private static class getPaidAdCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPaidAdCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaidAdCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaidAdCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPaidAdCount_result implements org.apache.thrift.TBase<getPaidAdCount_result, getPaidAdCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPaidAdCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaidAdCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPaidAdCount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPaidAdCount_resultTupleSchemeFactory();

    public int success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaidAdCount_result.class, metaDataMap);
    }

    public getPaidAdCount_result() {
    }

    public getPaidAdCount_result(
      int success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidAdCount_result(getPaidAdCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getPaidAdCount_result deepCopy() {
      return new getPaidAdCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getPaidAdCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getPaidAdCount_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getPaidAdCount_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidAdCount_result)
        return this.equals((getPaidAdCount_result)that);
      return false;
    }

    public boolean equals(getPaidAdCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPaidAdCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPaidAdCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaidAdCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaidAdCount_resultStandardScheme getScheme() {
        return new getPaidAdCount_resultStandardScheme();
      }
    }

    private static class getPaidAdCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPaidAdCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaidAdCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaidAdCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaidAdCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaidAdCount_resultTupleScheme getScheme() {
        return new getPaidAdCount_resultTupleScheme();
      }
    }

    private static class getPaidAdCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPaidAdCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaidAdCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaidAdCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPaidAdCountToday_args implements org.apache.thrift.TBase<getPaidAdCountToday_args, getPaidAdCountToday_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPaidAdCountToday_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaidAdCountToday_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPaidAdCountToday_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPaidAdCountToday_argsTupleSchemeFactory();

    public java.lang.String uid; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaidAdCountToday_args.class, metaDataMap);
    }

    public getPaidAdCountToday_args() {
    }

    public getPaidAdCountToday_args(
      java.lang.String uid,
      java.lang.String siteId)
    {
      this();
      this.uid = uid;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidAdCountToday_args(getPaidAdCountToday_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public getPaidAdCountToday_args deepCopy() {
      return new getPaidAdCountToday_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      this.siteId = null;
    }

    public java.lang.String getUid() {
      return this.uid;
    }

    public getPaidAdCountToday_args setUid(java.lang.String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getPaidAdCountToday_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidAdCountToday_args)
        return this.equals((getPaidAdCountToday_args)that);
      return false;
    }

    public boolean equals(getPaidAdCountToday_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
      if (isSetUid())
        hashCode = hashCode * 8191 + uid.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPaidAdCountToday_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPaidAdCountToday_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaidAdCountToday_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaidAdCountToday_argsStandardScheme getScheme() {
        return new getPaidAdCountToday_argsStandardScheme();
      }
    }

    private static class getPaidAdCountToday_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPaidAdCountToday_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaidAdCountToday_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaidAdCountToday_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaidAdCountToday_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaidAdCountToday_argsTupleScheme getScheme() {
        return new getPaidAdCountToday_argsTupleScheme();
      }
    }

    private static class getPaidAdCountToday_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPaidAdCountToday_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaidAdCountToday_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaidAdCountToday_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPaidAdCountToday_result implements org.apache.thrift.TBase<getPaidAdCountToday_result, getPaidAdCountToday_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPaidAdCountToday_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPaidAdCountToday_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPaidAdCountToday_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPaidAdCountToday_resultTupleSchemeFactory();

    public int success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPaidAdCountToday_result.class, metaDataMap);
    }

    public getPaidAdCountToday_result() {
    }

    public getPaidAdCountToday_result(
      int success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPaidAdCountToday_result(getPaidAdCountToday_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getPaidAdCountToday_result deepCopy() {
      return new getPaidAdCountToday_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public getPaidAdCountToday_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getPaidAdCountToday_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getPaidAdCountToday_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPaidAdCountToday_result)
        return this.equals((getPaidAdCountToday_result)that);
      return false;
    }

    public boolean equals(getPaidAdCountToday_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPaidAdCountToday_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPaidAdCountToday_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPaidAdCountToday_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaidAdCountToday_resultStandardScheme getScheme() {
        return new getPaidAdCountToday_resultStandardScheme();
      }
    }

    private static class getPaidAdCountToday_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPaidAdCountToday_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPaidAdCountToday_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPaidAdCountToday_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPaidAdCountToday_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPaidAdCountToday_resultTupleScheme getScheme() {
        return new getPaidAdCountToday_resultTupleScheme();
      }
    }

    private static class getPaidAdCountToday_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPaidAdCountToday_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPaidAdCountToday_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPaidAdCountToday_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendRuleNotice_args implements org.apache.thrift.TBase<sendRuleNotice_args, sendRuleNotice_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendRuleNotice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendRuleNotice_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("reason", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField ACTION_FIELD_DESC = new org.apache.thrift.protocol.TField("action", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendRuleNotice_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendRuleNotice_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String reason; // required
    public java.lang.String action; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      REASON((short)2, "reason"),
      ACTION((short)3, "action");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // REASON
            return REASON;
          case 3: // ACTION
            return ACTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REASON, new org.apache.thrift.meta_data.FieldMetaData("reason", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ACTION, new org.apache.thrift.meta_data.FieldMetaData("action", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendRuleNotice_args.class, metaDataMap);
    }

    public sendRuleNotice_args() {
    }

    public sendRuleNotice_args(
      java.lang.String adId,
      java.lang.String reason,
      java.lang.String action)
    {
      this();
      this.adId = adId;
      this.reason = reason;
      this.action = action;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendRuleNotice_args(sendRuleNotice_args other) {
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetReason()) {
        this.reason = other.reason;
      }
      if (other.isSetAction()) {
        this.action = other.action;
      }
    }

    public sendRuleNotice_args deepCopy() {
      return new sendRuleNotice_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.reason = null;
      this.action = null;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public sendRuleNotice_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getReason() {
      return this.reason;
    }

    public sendRuleNotice_args setReason(java.lang.String reason) {
      this.reason = reason;
      return this;
    }

    public void unsetReason() {
      this.reason = null;
    }

    /** Returns true if field reason is set (has been assigned a value) and false otherwise */
    public boolean isSetReason() {
      return this.reason != null;
    }

    public void setReasonIsSet(boolean value) {
      if (!value) {
        this.reason = null;
      }
    }

    public java.lang.String getAction() {
      return this.action;
    }

    public sendRuleNotice_args setAction(java.lang.String action) {
      this.action = action;
      return this;
    }

    public void unsetAction() {
      this.action = null;
    }

    /** Returns true if field action is set (has been assigned a value) and false otherwise */
    public boolean isSetAction() {
      return this.action != null;
    }

    public void setActionIsSet(boolean value) {
      if (!value) {
        this.action = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case REASON:
        if (value == null) {
          unsetReason();
        } else {
          setReason((java.lang.String)value);
        }
        break;

      case ACTION:
        if (value == null) {
          unsetAction();
        } else {
          setAction((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case REASON:
        return getReason();

      case ACTION:
        return getAction();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case REASON:
        return isSetReason();
      case ACTION:
        return isSetAction();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendRuleNotice_args)
        return this.equals((sendRuleNotice_args)that);
      return false;
    }

    public boolean equals(sendRuleNotice_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_reason = true && this.isSetReason();
      boolean that_present_reason = true && that.isSetReason();
      if (this_present_reason || that_present_reason) {
        if (!(this_present_reason && that_present_reason))
          return false;
        if (!this.reason.equals(that.reason))
          return false;
      }

      boolean this_present_action = true && this.isSetAction();
      boolean that_present_action = true && that.isSetAction();
      if (this_present_action || that_present_action) {
        if (!(this_present_action && that_present_action))
          return false;
        if (!this.action.equals(that.action))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetReason()) ? 131071 : 524287);
      if (isSetReason())
        hashCode = hashCode * 8191 + reason.hashCode();

      hashCode = hashCode * 8191 + ((isSetAction()) ? 131071 : 524287);
      if (isSetAction())
        hashCode = hashCode * 8191 + action.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendRuleNotice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReason()).compareTo(other.isSetReason());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReason()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reason, other.reason);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAction()).compareTo(other.isSetAction());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAction()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.action, other.action);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendRuleNotice_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reason:");
      if (this.reason == null) {
        sb.append("null");
      } else {
        sb.append(this.reason);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("action:");
      if (this.action == null) {
        sb.append("null");
      } else {
        sb.append(this.action);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendRuleNotice_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendRuleNotice_argsStandardScheme getScheme() {
        return new sendRuleNotice_argsStandardScheme();
      }
    }

    private static class sendRuleNotice_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendRuleNotice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendRuleNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REASON
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reason = iprot.readString();
                struct.setReasonIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // ACTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.action = iprot.readString();
                struct.setActionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendRuleNotice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.reason != null) {
          oprot.writeFieldBegin(REASON_FIELD_DESC);
          oprot.writeString(struct.reason);
          oprot.writeFieldEnd();
        }
        if (struct.action != null) {
          oprot.writeFieldBegin(ACTION_FIELD_DESC);
          oprot.writeString(struct.action);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendRuleNotice_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendRuleNotice_argsTupleScheme getScheme() {
        return new sendRuleNotice_argsTupleScheme();
      }
    }

    private static class sendRuleNotice_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendRuleNotice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendRuleNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetReason()) {
          optionals.set(1);
        }
        if (struct.isSetAction()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetReason()) {
          oprot.writeString(struct.reason);
        }
        if (struct.isSetAction()) {
          oprot.writeString(struct.action);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendRuleNotice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.reason = iprot.readString();
          struct.setReasonIsSet(true);
        }
        if (incoming.get(2)) {
          struct.action = iprot.readString();
          struct.setActionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendRuleNotice_result implements org.apache.thrift.TBase<sendRuleNotice_result, sendRuleNotice_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendRuleNotice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendRuleNotice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendRuleNotice_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendRuleNotice_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendRuleNotice_result.class, metaDataMap);
    }

    public sendRuleNotice_result() {
    }

    public sendRuleNotice_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendRuleNotice_result(sendRuleNotice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public sendRuleNotice_result deepCopy() {
      return new sendRuleNotice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public sendRuleNotice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public sendRuleNotice_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public sendRuleNotice_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendRuleNotice_result)
        return this.equals((sendRuleNotice_result)that);
      return false;
    }

    public boolean equals(sendRuleNotice_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendRuleNotice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendRuleNotice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendRuleNotice_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendRuleNotice_resultStandardScheme getScheme() {
        return new sendRuleNotice_resultStandardScheme();
      }
    }

    private static class sendRuleNotice_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendRuleNotice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendRuleNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendRuleNotice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendRuleNotice_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendRuleNotice_resultTupleScheme getScheme() {
        return new sendRuleNotice_resultTupleScheme();
      }
    }

    private static class sendRuleNotice_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendRuleNotice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendRuleNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendRuleNotice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createAdDraft_args implements org.apache.thrift.TBase<createAdDraft_args, createAdDraft_args._Fields>, java.io.Serializable, Cloneable, Comparable<createAdDraft_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAdDraft_args");

    private static final org.apache.thrift.protocol.TField AD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("adId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAdDraft_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAdDraft_argsTupleSchemeFactory();

    public java.lang.String adId; // required
    public java.lang.String siteId; // required
    public java.lang.String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      AD_ID((short)1, "adId"),
      SITE_ID((short)2, "siteId"),
      DATA((short)3, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AD_ID
            return AD_ID;
          case 2: // SITE_ID
            return SITE_ID;
          case 3: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AD_ID, new org.apache.thrift.meta_data.FieldMetaData("adId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAdDraft_args.class, metaDataMap);
    }

    public createAdDraft_args() {
    }

    public createAdDraft_args(
      java.lang.String adId,
      java.lang.String siteId,
      java.lang.String data)
    {
      this();
      this.adId = adId;
      this.siteId = siteId;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAdDraft_args(createAdDraft_args other) {
      if (other.isSetAdId()) {
        this.adId = other.adId;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public createAdDraft_args deepCopy() {
      return new createAdDraft_args(this);
    }

    @Override
    public void clear() {
      this.adId = null;
      this.siteId = null;
      this.data = null;
    }

    public java.lang.String getAdId() {
      return this.adId;
    }

    public createAdDraft_args setAdId(java.lang.String adId) {
      this.adId = adId;
      return this;
    }

    public void unsetAdId() {
      this.adId = null;
    }

    /** Returns true if field adId is set (has been assigned a value) and false otherwise */
    public boolean isSetAdId() {
      return this.adId != null;
    }

    public void setAdIdIsSet(boolean value) {
      if (!value) {
        this.adId = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public createAdDraft_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public java.lang.String getData() {
      return this.data;
    }

    public createAdDraft_args setData(java.lang.String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AD_ID:
        if (value == null) {
          unsetAdId();
        } else {
          setAdId((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AD_ID:
        return getAdId();

      case SITE_ID:
        return getSiteId();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AD_ID:
        return isSetAdId();
      case SITE_ID:
        return isSetSiteId();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAdDraft_args)
        return this.equals((createAdDraft_args)that);
      return false;
    }

    public boolean equals(createAdDraft_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_adId = true && this.isSetAdId();
      boolean that_present_adId = true && that.isSetAdId();
      if (this_present_adId || that_present_adId) {
        if (!(this_present_adId && that_present_adId))
          return false;
        if (!this.adId.equals(that.adId))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAdId()) ? 131071 : 524287);
      if (isSetAdId())
        hashCode = hashCode * 8191 + adId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAdDraft_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAdId()).compareTo(other.isSetAdId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAdId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.adId, other.adId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAdDraft_args(");
      boolean first = true;

      sb.append("adId:");
      if (this.adId == null) {
        sb.append("null");
      } else {
        sb.append(this.adId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAdDraft_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAdDraft_argsStandardScheme getScheme() {
        return new createAdDraft_argsStandardScheme();
      }
    }

    private static class createAdDraft_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAdDraft_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AD_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.adId = iprot.readString();
                struct.setAdIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAdDraft_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.adId != null) {
          oprot.writeFieldBegin(AD_ID_FIELD_DESC);
          oprot.writeString(struct.adId);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAdDraft_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAdDraft_argsTupleScheme getScheme() {
        return new createAdDraft_argsTupleScheme();
      }
    }

    private static class createAdDraft_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAdDraft_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAdId()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAdId()) {
          oprot.writeString(struct.adId);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.adId = iprot.readString();
          struct.setAdIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createAdDraft_result implements org.apache.thrift.TBase<createAdDraft_result, createAdDraft_result._Fields>, java.io.Serializable, Cloneable, Comparable<createAdDraft_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAdDraft_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAdDraft_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAdDraft_resultTupleSchemeFactory();

    public java.lang.String success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAdDraft_result.class, metaDataMap);
    }

    public createAdDraft_result() {
    }

    public createAdDraft_result(
      java.lang.String success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAdDraft_result(createAdDraft_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public createAdDraft_result deepCopy() {
      return new createAdDraft_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public createAdDraft_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public createAdDraft_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public createAdDraft_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAdDraft_result)
        return this.equals((createAdDraft_result)that);
      return false;
    }

    public boolean equals(createAdDraft_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAdDraft_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAdDraft_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAdDraft_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAdDraft_resultStandardScheme getScheme() {
        return new createAdDraft_resultStandardScheme();
      }
    }

    private static class createAdDraft_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAdDraft_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAdDraft_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAdDraft_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAdDraft_resultTupleScheme getScheme() {
        return new createAdDraft_resultTupleScheme();
      }
    }

    private static class createAdDraft_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAdDraft_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAdDraft_args implements org.apache.thrift.TBase<updateAdDraft_args, updateAdDraft_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAdDraft_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAdDraft_args");

    private static final org.apache.thrift.protocol.TField DRAFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("draftId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAdDraft_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAdDraft_argsTupleSchemeFactory();

    public java.lang.String draftId; // required
    public java.lang.String data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DRAFT_ID((short)1, "draftId"),
      DATA((short)2, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DRAFT_ID
            return DRAFT_ID;
          case 2: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DRAFT_ID, new org.apache.thrift.meta_data.FieldMetaData("draftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAdDraft_args.class, metaDataMap);
    }

    public updateAdDraft_args() {
    }

    public updateAdDraft_args(
      java.lang.String draftId,
      java.lang.String data)
    {
      this();
      this.draftId = draftId;
      this.data = data;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAdDraft_args(updateAdDraft_args other) {
      if (other.isSetDraftId()) {
        this.draftId = other.draftId;
      }
      if (other.isSetData()) {
        this.data = other.data;
      }
    }

    public updateAdDraft_args deepCopy() {
      return new updateAdDraft_args(this);
    }

    @Override
    public void clear() {
      this.draftId = null;
      this.data = null;
    }

    public java.lang.String getDraftId() {
      return this.draftId;
    }

    public updateAdDraft_args setDraftId(java.lang.String draftId) {
      this.draftId = draftId;
      return this;
    }

    public void unsetDraftId() {
      this.draftId = null;
    }

    /** Returns true if field draftId is set (has been assigned a value) and false otherwise */
    public boolean isSetDraftId() {
      return this.draftId != null;
    }

    public void setDraftIdIsSet(boolean value) {
      if (!value) {
        this.draftId = null;
      }
    }

    public java.lang.String getData() {
      return this.data;
    }

    public updateAdDraft_args setData(java.lang.String data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DRAFT_ID:
        if (value == null) {
          unsetDraftId();
        } else {
          setDraftId((java.lang.String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DRAFT_ID:
        return getDraftId();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DRAFT_ID:
        return isSetDraftId();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAdDraft_args)
        return this.equals((updateAdDraft_args)that);
      return false;
    }

    public boolean equals(updateAdDraft_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_draftId = true && this.isSetDraftId();
      boolean that_present_draftId = true && that.isSetDraftId();
      if (this_present_draftId || that_present_draftId) {
        if (!(this_present_draftId && that_present_draftId))
          return false;
        if (!this.draftId.equals(that.draftId))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDraftId()) ? 131071 : 524287);
      if (isSetDraftId())
        hashCode = hashCode * 8191 + draftId.hashCode();

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAdDraft_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDraftId()).compareTo(other.isSetDraftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDraftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.draftId, other.draftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAdDraft_args(");
      boolean first = true;

      sb.append("draftId:");
      if (this.draftId == null) {
        sb.append("null");
      } else {
        sb.append(this.draftId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAdDraft_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdDraft_argsStandardScheme getScheme() {
        return new updateAdDraft_argsStandardScheme();
      }
    }

    private static class updateAdDraft_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAdDraft_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DRAFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.draftId = iprot.readString();
                struct.setDraftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readString();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAdDraft_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.draftId != null) {
          oprot.writeFieldBegin(DRAFT_ID_FIELD_DESC);
          oprot.writeString(struct.draftId);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeString(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAdDraft_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdDraft_argsTupleScheme getScheme() {
        return new updateAdDraft_argsTupleScheme();
      }
    }

    private static class updateAdDraft_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAdDraft_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDraftId()) {
          optionals.set(0);
        }
        if (struct.isSetData()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDraftId()) {
          oprot.writeString(struct.draftId);
        }
        if (struct.isSetData()) {
          oprot.writeString(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.draftId = iprot.readString();
          struct.setDraftIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.data = iprot.readString();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAdDraft_result implements org.apache.thrift.TBase<updateAdDraft_result, updateAdDraft_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAdDraft_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAdDraft_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAdDraft_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAdDraft_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAdDraft_result.class, metaDataMap);
    }

    public updateAdDraft_result() {
    }

    public updateAdDraft_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAdDraft_result(updateAdDraft_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public updateAdDraft_result deepCopy() {
      return new updateAdDraft_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateAdDraft_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public updateAdDraft_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public updateAdDraft_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAdDraft_result)
        return this.equals((updateAdDraft_result)that);
      return false;
    }

    public boolean equals(updateAdDraft_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAdDraft_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAdDraft_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAdDraft_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdDraft_resultStandardScheme getScheme() {
        return new updateAdDraft_resultStandardScheme();
      }
    }

    private static class updateAdDraft_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAdDraft_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAdDraft_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAdDraft_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdDraft_resultTupleScheme getScheme() {
        return new updateAdDraft_resultTupleScheme();
      }
    }

    private static class updateAdDraft_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAdDraft_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAdDraftPostOrderId_args implements org.apache.thrift.TBase<updateAdDraftPostOrderId_args, updateAdDraftPostOrderId_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateAdDraftPostOrderId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAdDraftPostOrderId_args");

    private static final org.apache.thrift.protocol.TField DRAFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("draftId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField POST_ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("postOrderId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAdDraftPostOrderId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAdDraftPostOrderId_argsTupleSchemeFactory();

    public java.lang.String draftId; // required
    public java.lang.String postOrderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DRAFT_ID((short)1, "draftId"),
      POST_ORDER_ID((short)2, "postOrderId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DRAFT_ID
            return DRAFT_ID;
          case 2: // POST_ORDER_ID
            return POST_ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DRAFT_ID, new org.apache.thrift.meta_data.FieldMetaData("draftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.POST_ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("postOrderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAdDraftPostOrderId_args.class, metaDataMap);
    }

    public updateAdDraftPostOrderId_args() {
    }

    public updateAdDraftPostOrderId_args(
      java.lang.String draftId,
      java.lang.String postOrderId)
    {
      this();
      this.draftId = draftId;
      this.postOrderId = postOrderId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAdDraftPostOrderId_args(updateAdDraftPostOrderId_args other) {
      if (other.isSetDraftId()) {
        this.draftId = other.draftId;
      }
      if (other.isSetPostOrderId()) {
        this.postOrderId = other.postOrderId;
      }
    }

    public updateAdDraftPostOrderId_args deepCopy() {
      return new updateAdDraftPostOrderId_args(this);
    }

    @Override
    public void clear() {
      this.draftId = null;
      this.postOrderId = null;
    }

    public java.lang.String getDraftId() {
      return this.draftId;
    }

    public updateAdDraftPostOrderId_args setDraftId(java.lang.String draftId) {
      this.draftId = draftId;
      return this;
    }

    public void unsetDraftId() {
      this.draftId = null;
    }

    /** Returns true if field draftId is set (has been assigned a value) and false otherwise */
    public boolean isSetDraftId() {
      return this.draftId != null;
    }

    public void setDraftIdIsSet(boolean value) {
      if (!value) {
        this.draftId = null;
      }
    }

    public java.lang.String getPostOrderId() {
      return this.postOrderId;
    }

    public updateAdDraftPostOrderId_args setPostOrderId(java.lang.String postOrderId) {
      this.postOrderId = postOrderId;
      return this;
    }

    public void unsetPostOrderId() {
      this.postOrderId = null;
    }

    /** Returns true if field postOrderId is set (has been assigned a value) and false otherwise */
    public boolean isSetPostOrderId() {
      return this.postOrderId != null;
    }

    public void setPostOrderIdIsSet(boolean value) {
      if (!value) {
        this.postOrderId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DRAFT_ID:
        if (value == null) {
          unsetDraftId();
        } else {
          setDraftId((java.lang.String)value);
        }
        break;

      case POST_ORDER_ID:
        if (value == null) {
          unsetPostOrderId();
        } else {
          setPostOrderId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DRAFT_ID:
        return getDraftId();

      case POST_ORDER_ID:
        return getPostOrderId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DRAFT_ID:
        return isSetDraftId();
      case POST_ORDER_ID:
        return isSetPostOrderId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAdDraftPostOrderId_args)
        return this.equals((updateAdDraftPostOrderId_args)that);
      return false;
    }

    public boolean equals(updateAdDraftPostOrderId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_draftId = true && this.isSetDraftId();
      boolean that_present_draftId = true && that.isSetDraftId();
      if (this_present_draftId || that_present_draftId) {
        if (!(this_present_draftId && that_present_draftId))
          return false;
        if (!this.draftId.equals(that.draftId))
          return false;
      }

      boolean this_present_postOrderId = true && this.isSetPostOrderId();
      boolean that_present_postOrderId = true && that.isSetPostOrderId();
      if (this_present_postOrderId || that_present_postOrderId) {
        if (!(this_present_postOrderId && that_present_postOrderId))
          return false;
        if (!this.postOrderId.equals(that.postOrderId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDraftId()) ? 131071 : 524287);
      if (isSetDraftId())
        hashCode = hashCode * 8191 + draftId.hashCode();

      hashCode = hashCode * 8191 + ((isSetPostOrderId()) ? 131071 : 524287);
      if (isSetPostOrderId())
        hashCode = hashCode * 8191 + postOrderId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAdDraftPostOrderId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDraftId()).compareTo(other.isSetDraftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDraftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.draftId, other.draftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPostOrderId()).compareTo(other.isSetPostOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPostOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.postOrderId, other.postOrderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAdDraftPostOrderId_args(");
      boolean first = true;

      sb.append("draftId:");
      if (this.draftId == null) {
        sb.append("null");
      } else {
        sb.append(this.draftId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("postOrderId:");
      if (this.postOrderId == null) {
        sb.append("null");
      } else {
        sb.append(this.postOrderId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAdDraftPostOrderId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdDraftPostOrderId_argsStandardScheme getScheme() {
        return new updateAdDraftPostOrderId_argsStandardScheme();
      }
    }

    private static class updateAdDraftPostOrderId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAdDraftPostOrderId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAdDraftPostOrderId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DRAFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.draftId = iprot.readString();
                struct.setDraftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // POST_ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.postOrderId = iprot.readString();
                struct.setPostOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAdDraftPostOrderId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.draftId != null) {
          oprot.writeFieldBegin(DRAFT_ID_FIELD_DESC);
          oprot.writeString(struct.draftId);
          oprot.writeFieldEnd();
        }
        if (struct.postOrderId != null) {
          oprot.writeFieldBegin(POST_ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.postOrderId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAdDraftPostOrderId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdDraftPostOrderId_argsTupleScheme getScheme() {
        return new updateAdDraftPostOrderId_argsTupleScheme();
      }
    }

    private static class updateAdDraftPostOrderId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAdDraftPostOrderId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAdDraftPostOrderId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDraftId()) {
          optionals.set(0);
        }
        if (struct.isSetPostOrderId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetDraftId()) {
          oprot.writeString(struct.draftId);
        }
        if (struct.isSetPostOrderId()) {
          oprot.writeString(struct.postOrderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAdDraftPostOrderId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.draftId = iprot.readString();
          struct.setDraftIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.postOrderId = iprot.readString();
          struct.setPostOrderIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateAdDraftPostOrderId_result implements org.apache.thrift.TBase<updateAdDraftPostOrderId_result, updateAdDraftPostOrderId_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateAdDraftPostOrderId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateAdDraftPostOrderId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateAdDraftPostOrderId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateAdDraftPostOrderId_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateAdDraftPostOrderId_result.class, metaDataMap);
    }

    public updateAdDraftPostOrderId_result() {
    }

    public updateAdDraftPostOrderId_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateAdDraftPostOrderId_result(updateAdDraftPostOrderId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public updateAdDraftPostOrderId_result deepCopy() {
      return new updateAdDraftPostOrderId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public updateAdDraftPostOrderId_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public updateAdDraftPostOrderId_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public updateAdDraftPostOrderId_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateAdDraftPostOrderId_result)
        return this.equals((updateAdDraftPostOrderId_result)that);
      return false;
    }

    public boolean equals(updateAdDraftPostOrderId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateAdDraftPostOrderId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateAdDraftPostOrderId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateAdDraftPostOrderId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdDraftPostOrderId_resultStandardScheme getScheme() {
        return new updateAdDraftPostOrderId_resultStandardScheme();
      }
    }

    private static class updateAdDraftPostOrderId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateAdDraftPostOrderId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateAdDraftPostOrderId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateAdDraftPostOrderId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateAdDraftPostOrderId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateAdDraftPostOrderId_resultTupleScheme getScheme() {
        return new updateAdDraftPostOrderId_resultTupleScheme();
      }
    }

    private static class updateAdDraftPostOrderId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateAdDraftPostOrderId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateAdDraftPostOrderId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateAdDraftPostOrderId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setPaidAdDraft_args implements org.apache.thrift.TBase<setPaidAdDraft_args, setPaidAdDraft_args._Fields>, java.io.Serializable, Cloneable, Comparable<setPaidAdDraft_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPaidAdDraft_args");

    private static final org.apache.thrift.protocol.TField DRAFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("draftId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setPaidAdDraft_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setPaidAdDraft_argsTupleSchemeFactory();

    public java.lang.String draftId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DRAFT_ID((short)1, "draftId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DRAFT_ID
            return DRAFT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DRAFT_ID, new org.apache.thrift.meta_data.FieldMetaData("draftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPaidAdDraft_args.class, metaDataMap);
    }

    public setPaidAdDraft_args() {
    }

    public setPaidAdDraft_args(
      java.lang.String draftId)
    {
      this();
      this.draftId = draftId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPaidAdDraft_args(setPaidAdDraft_args other) {
      if (other.isSetDraftId()) {
        this.draftId = other.draftId;
      }
    }

    public setPaidAdDraft_args deepCopy() {
      return new setPaidAdDraft_args(this);
    }

    @Override
    public void clear() {
      this.draftId = null;
    }

    public java.lang.String getDraftId() {
      return this.draftId;
    }

    public setPaidAdDraft_args setDraftId(java.lang.String draftId) {
      this.draftId = draftId;
      return this;
    }

    public void unsetDraftId() {
      this.draftId = null;
    }

    /** Returns true if field draftId is set (has been assigned a value) and false otherwise */
    public boolean isSetDraftId() {
      return this.draftId != null;
    }

    public void setDraftIdIsSet(boolean value) {
      if (!value) {
        this.draftId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DRAFT_ID:
        if (value == null) {
          unsetDraftId();
        } else {
          setDraftId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DRAFT_ID:
        return getDraftId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DRAFT_ID:
        return isSetDraftId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setPaidAdDraft_args)
        return this.equals((setPaidAdDraft_args)that);
      return false;
    }

    public boolean equals(setPaidAdDraft_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_draftId = true && this.isSetDraftId();
      boolean that_present_draftId = true && that.isSetDraftId();
      if (this_present_draftId || that_present_draftId) {
        if (!(this_present_draftId && that_present_draftId))
          return false;
        if (!this.draftId.equals(that.draftId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDraftId()) ? 131071 : 524287);
      if (isSetDraftId())
        hashCode = hashCode * 8191 + draftId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setPaidAdDraft_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDraftId()).compareTo(other.isSetDraftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDraftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.draftId, other.draftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setPaidAdDraft_args(");
      boolean first = true;

      sb.append("draftId:");
      if (this.draftId == null) {
        sb.append("null");
      } else {
        sb.append(this.draftId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPaidAdDraft_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setPaidAdDraft_argsStandardScheme getScheme() {
        return new setPaidAdDraft_argsStandardScheme();
      }
    }

    private static class setPaidAdDraft_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setPaidAdDraft_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPaidAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DRAFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.draftId = iprot.readString();
                struct.setDraftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPaidAdDraft_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.draftId != null) {
          oprot.writeFieldBegin(DRAFT_ID_FIELD_DESC);
          oprot.writeString(struct.draftId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPaidAdDraft_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setPaidAdDraft_argsTupleScheme getScheme() {
        return new setPaidAdDraft_argsTupleScheme();
      }
    }

    private static class setPaidAdDraft_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setPaidAdDraft_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPaidAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDraftId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDraftId()) {
          oprot.writeString(struct.draftId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPaidAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.draftId = iprot.readString();
          struct.setDraftIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setPaidAdDraft_result implements org.apache.thrift.TBase<setPaidAdDraft_result, setPaidAdDraft_result._Fields>, java.io.Serializable, Cloneable, Comparable<setPaidAdDraft_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setPaidAdDraft_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setPaidAdDraft_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setPaidAdDraft_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setPaidAdDraft_result.class, metaDataMap);
    }

    public setPaidAdDraft_result() {
    }

    public setPaidAdDraft_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setPaidAdDraft_result(setPaidAdDraft_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public setPaidAdDraft_result deepCopy() {
      return new setPaidAdDraft_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setPaidAdDraft_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public setPaidAdDraft_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public setPaidAdDraft_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setPaidAdDraft_result)
        return this.equals((setPaidAdDraft_result)that);
      return false;
    }

    public boolean equals(setPaidAdDraft_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setPaidAdDraft_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setPaidAdDraft_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setPaidAdDraft_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setPaidAdDraft_resultStandardScheme getScheme() {
        return new setPaidAdDraft_resultStandardScheme();
      }
    }

    private static class setPaidAdDraft_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setPaidAdDraft_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setPaidAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setPaidAdDraft_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setPaidAdDraft_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setPaidAdDraft_resultTupleScheme getScheme() {
        return new setPaidAdDraft_resultTupleScheme();
      }
    }

    private static class setPaidAdDraft_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setPaidAdDraft_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setPaidAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setPaidAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isAdDraftPaid_args implements org.apache.thrift.TBase<isAdDraftPaid_args, isAdDraftPaid_args._Fields>, java.io.Serializable, Cloneable, Comparable<isAdDraftPaid_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isAdDraftPaid_args");

    private static final org.apache.thrift.protocol.TField DRAFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("draftId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isAdDraftPaid_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isAdDraftPaid_argsTupleSchemeFactory();

    public java.lang.String draftId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DRAFT_ID((short)1, "draftId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DRAFT_ID
            return DRAFT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DRAFT_ID, new org.apache.thrift.meta_data.FieldMetaData("draftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isAdDraftPaid_args.class, metaDataMap);
    }

    public isAdDraftPaid_args() {
    }

    public isAdDraftPaid_args(
      java.lang.String draftId)
    {
      this();
      this.draftId = draftId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isAdDraftPaid_args(isAdDraftPaid_args other) {
      if (other.isSetDraftId()) {
        this.draftId = other.draftId;
      }
    }

    public isAdDraftPaid_args deepCopy() {
      return new isAdDraftPaid_args(this);
    }

    @Override
    public void clear() {
      this.draftId = null;
    }

    public java.lang.String getDraftId() {
      return this.draftId;
    }

    public isAdDraftPaid_args setDraftId(java.lang.String draftId) {
      this.draftId = draftId;
      return this;
    }

    public void unsetDraftId() {
      this.draftId = null;
    }

    /** Returns true if field draftId is set (has been assigned a value) and false otherwise */
    public boolean isSetDraftId() {
      return this.draftId != null;
    }

    public void setDraftIdIsSet(boolean value) {
      if (!value) {
        this.draftId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DRAFT_ID:
        if (value == null) {
          unsetDraftId();
        } else {
          setDraftId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DRAFT_ID:
        return getDraftId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DRAFT_ID:
        return isSetDraftId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isAdDraftPaid_args)
        return this.equals((isAdDraftPaid_args)that);
      return false;
    }

    public boolean equals(isAdDraftPaid_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_draftId = true && this.isSetDraftId();
      boolean that_present_draftId = true && that.isSetDraftId();
      if (this_present_draftId || that_present_draftId) {
        if (!(this_present_draftId && that_present_draftId))
          return false;
        if (!this.draftId.equals(that.draftId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDraftId()) ? 131071 : 524287);
      if (isSetDraftId())
        hashCode = hashCode * 8191 + draftId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isAdDraftPaid_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDraftId()).compareTo(other.isSetDraftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDraftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.draftId, other.draftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isAdDraftPaid_args(");
      boolean first = true;

      sb.append("draftId:");
      if (this.draftId == null) {
        sb.append("null");
      } else {
        sb.append(this.draftId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isAdDraftPaid_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isAdDraftPaid_argsStandardScheme getScheme() {
        return new isAdDraftPaid_argsStandardScheme();
      }
    }

    private static class isAdDraftPaid_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<isAdDraftPaid_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isAdDraftPaid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DRAFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.draftId = iprot.readString();
                struct.setDraftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isAdDraftPaid_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.draftId != null) {
          oprot.writeFieldBegin(DRAFT_ID_FIELD_DESC);
          oprot.writeString(struct.draftId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isAdDraftPaid_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isAdDraftPaid_argsTupleScheme getScheme() {
        return new isAdDraftPaid_argsTupleScheme();
      }
    }

    private static class isAdDraftPaid_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<isAdDraftPaid_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isAdDraftPaid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDraftId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDraftId()) {
          oprot.writeString(struct.draftId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isAdDraftPaid_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.draftId = iprot.readString();
          struct.setDraftIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class isAdDraftPaid_result implements org.apache.thrift.TBase<isAdDraftPaid_result, isAdDraftPaid_result._Fields>, java.io.Serializable, Cloneable, Comparable<isAdDraftPaid_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("isAdDraftPaid_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new isAdDraftPaid_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new isAdDraftPaid_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(isAdDraftPaid_result.class, metaDataMap);
    }

    public isAdDraftPaid_result() {
    }

    public isAdDraftPaid_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public isAdDraftPaid_result(isAdDraftPaid_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public isAdDraftPaid_result deepCopy() {
      return new isAdDraftPaid_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public isAdDraftPaid_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public isAdDraftPaid_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public isAdDraftPaid_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof isAdDraftPaid_result)
        return this.equals((isAdDraftPaid_result)that);
      return false;
    }

    public boolean equals(isAdDraftPaid_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(isAdDraftPaid_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("isAdDraftPaid_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class isAdDraftPaid_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isAdDraftPaid_resultStandardScheme getScheme() {
        return new isAdDraftPaid_resultStandardScheme();
      }
    }

    private static class isAdDraftPaid_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<isAdDraftPaid_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, isAdDraftPaid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, isAdDraftPaid_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class isAdDraftPaid_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public isAdDraftPaid_resultTupleScheme getScheme() {
        return new isAdDraftPaid_resultTupleScheme();
      }
    }

    private static class isAdDraftPaid_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<isAdDraftPaid_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, isAdDraftPaid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, isAdDraftPaid_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteAdDraft_args implements org.apache.thrift.TBase<deleteAdDraft_args, deleteAdDraft_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAdDraft_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAdDraft_args");

    private static final org.apache.thrift.protocol.TField DRAFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("draftId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteAdDraft_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteAdDraft_argsTupleSchemeFactory();

    public java.lang.String draftId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DRAFT_ID((short)1, "draftId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DRAFT_ID
            return DRAFT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DRAFT_ID, new org.apache.thrift.meta_data.FieldMetaData("draftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAdDraft_args.class, metaDataMap);
    }

    public deleteAdDraft_args() {
    }

    public deleteAdDraft_args(
      java.lang.String draftId)
    {
      this();
      this.draftId = draftId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAdDraft_args(deleteAdDraft_args other) {
      if (other.isSetDraftId()) {
        this.draftId = other.draftId;
      }
    }

    public deleteAdDraft_args deepCopy() {
      return new deleteAdDraft_args(this);
    }

    @Override
    public void clear() {
      this.draftId = null;
    }

    public java.lang.String getDraftId() {
      return this.draftId;
    }

    public deleteAdDraft_args setDraftId(java.lang.String draftId) {
      this.draftId = draftId;
      return this;
    }

    public void unsetDraftId() {
      this.draftId = null;
    }

    /** Returns true if field draftId is set (has been assigned a value) and false otherwise */
    public boolean isSetDraftId() {
      return this.draftId != null;
    }

    public void setDraftIdIsSet(boolean value) {
      if (!value) {
        this.draftId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DRAFT_ID:
        if (value == null) {
          unsetDraftId();
        } else {
          setDraftId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DRAFT_ID:
        return getDraftId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DRAFT_ID:
        return isSetDraftId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAdDraft_args)
        return this.equals((deleteAdDraft_args)that);
      return false;
    }

    public boolean equals(deleteAdDraft_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_draftId = true && this.isSetDraftId();
      boolean that_present_draftId = true && that.isSetDraftId();
      if (this_present_draftId || that_present_draftId) {
        if (!(this_present_draftId && that_present_draftId))
          return false;
        if (!this.draftId.equals(that.draftId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDraftId()) ? 131071 : 524287);
      if (isSetDraftId())
        hashCode = hashCode * 8191 + draftId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteAdDraft_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDraftId()).compareTo(other.isSetDraftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDraftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.draftId, other.draftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteAdDraft_args(");
      boolean first = true;

      sb.append("draftId:");
      if (this.draftId == null) {
        sb.append("null");
      } else {
        sb.append(this.draftId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAdDraft_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAdDraft_argsStandardScheme getScheme() {
        return new deleteAdDraft_argsStandardScheme();
      }
    }

    private static class deleteAdDraft_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteAdDraft_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DRAFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.draftId = iprot.readString();
                struct.setDraftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAdDraft_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.draftId != null) {
          oprot.writeFieldBegin(DRAFT_ID_FIELD_DESC);
          oprot.writeString(struct.draftId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAdDraft_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAdDraft_argsTupleScheme getScheme() {
        return new deleteAdDraft_argsTupleScheme();
      }
    }

    private static class deleteAdDraft_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteAdDraft_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDraftId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDraftId()) {
          oprot.writeString(struct.draftId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.draftId = iprot.readString();
          struct.setDraftIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteAdDraft_result implements org.apache.thrift.TBase<deleteAdDraft_result, deleteAdDraft_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAdDraft_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAdDraft_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteAdDraft_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteAdDraft_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAdDraft_result.class, metaDataMap);
    }

    public deleteAdDraft_result() {
    }

    public deleteAdDraft_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAdDraft_result(deleteAdDraft_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public deleteAdDraft_result deepCopy() {
      return new deleteAdDraft_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public deleteAdDraft_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public deleteAdDraft_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public deleteAdDraft_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAdDraft_result)
        return this.equals((deleteAdDraft_result)that);
      return false;
    }

    public boolean equals(deleteAdDraft_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteAdDraft_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteAdDraft_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAdDraft_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAdDraft_resultStandardScheme getScheme() {
        return new deleteAdDraft_resultStandardScheme();
      }
    }

    private static class deleteAdDraft_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteAdDraft_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAdDraft_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAdDraft_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAdDraft_resultTupleScheme getScheme() {
        return new deleteAdDraft_resultTupleScheme();
      }
    }

    private static class deleteAdDraft_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteAdDraft_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdDraft_args implements org.apache.thrift.TBase<getAdDraft_args, getAdDraft_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAdDraft_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdDraft_args");

    private static final org.apache.thrift.protocol.TField DRAFT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("draftId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdDraft_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdDraft_argsTupleSchemeFactory();

    public java.lang.String draftId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DRAFT_ID((short)1, "draftId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DRAFT_ID
            return DRAFT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DRAFT_ID, new org.apache.thrift.meta_data.FieldMetaData("draftId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdDraft_args.class, metaDataMap);
    }

    public getAdDraft_args() {
    }

    public getAdDraft_args(
      java.lang.String draftId)
    {
      this();
      this.draftId = draftId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdDraft_args(getAdDraft_args other) {
      if (other.isSetDraftId()) {
        this.draftId = other.draftId;
      }
    }

    public getAdDraft_args deepCopy() {
      return new getAdDraft_args(this);
    }

    @Override
    public void clear() {
      this.draftId = null;
    }

    public java.lang.String getDraftId() {
      return this.draftId;
    }

    public getAdDraft_args setDraftId(java.lang.String draftId) {
      this.draftId = draftId;
      return this;
    }

    public void unsetDraftId() {
      this.draftId = null;
    }

    /** Returns true if field draftId is set (has been assigned a value) and false otherwise */
    public boolean isSetDraftId() {
      return this.draftId != null;
    }

    public void setDraftIdIsSet(boolean value) {
      if (!value) {
        this.draftId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case DRAFT_ID:
        if (value == null) {
          unsetDraftId();
        } else {
          setDraftId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case DRAFT_ID:
        return getDraftId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case DRAFT_ID:
        return isSetDraftId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdDraft_args)
        return this.equals((getAdDraft_args)that);
      return false;
    }

    public boolean equals(getAdDraft_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_draftId = true && this.isSetDraftId();
      boolean that_present_draftId = true && that.isSetDraftId();
      if (this_present_draftId || that_present_draftId) {
        if (!(this_present_draftId && that_present_draftId))
          return false;
        if (!this.draftId.equals(that.draftId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetDraftId()) ? 131071 : 524287);
      if (isSetDraftId())
        hashCode = hashCode * 8191 + draftId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdDraft_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetDraftId()).compareTo(other.isSetDraftId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDraftId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.draftId, other.draftId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdDraft_args(");
      boolean first = true;

      sb.append("draftId:");
      if (this.draftId == null) {
        sb.append("null");
      } else {
        sb.append(this.draftId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdDraft_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdDraft_argsStandardScheme getScheme() {
        return new getAdDraft_argsStandardScheme();
      }
    }

    private static class getAdDraft_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdDraft_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DRAFT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.draftId = iprot.readString();
                struct.setDraftIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdDraft_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.draftId != null) {
          oprot.writeFieldBegin(DRAFT_ID_FIELD_DESC);
          oprot.writeString(struct.draftId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdDraft_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdDraft_argsTupleScheme getScheme() {
        return new getAdDraft_argsTupleScheme();
      }
    }

    private static class getAdDraft_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdDraft_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetDraftId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetDraftId()) {
          oprot.writeString(struct.draftId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdDraft_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.draftId = iprot.readString();
          struct.setDraftIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAdDraft_result implements org.apache.thrift.TBase<getAdDraft_result, getAdDraft_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAdDraft_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAdDraft_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAdDraft_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAdDraft_resultTupleSchemeFactory();

    public TAdDraft success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAdDraft.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAdDraft_result.class, metaDataMap);
    }

    public getAdDraft_result() {
    }

    public getAdDraft_result(
      TAdDraft success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAdDraft_result(getAdDraft_result other) {
      if (other.isSetSuccess()) {
        this.success = new TAdDraft(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getAdDraft_result deepCopy() {
      return new getAdDraft_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TAdDraft getSuccess() {
      return this.success;
    }

    public getAdDraft_result setSuccess(TAdDraft success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getAdDraft_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getAdDraft_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TAdDraft)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAdDraft_result)
        return this.equals((getAdDraft_result)that);
      return false;
    }

    public boolean equals(getAdDraft_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAdDraft_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAdDraft_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAdDraft_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdDraft_resultStandardScheme getScheme() {
        return new getAdDraft_resultStandardScheme();
      }
    }

    private static class getAdDraft_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAdDraft_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TAdDraft();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAdDraft_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAdDraft_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAdDraft_resultTupleScheme getScheme() {
        return new getAdDraft_resultTupleScheme();
      }
    }

    private static class getAdDraft_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAdDraft_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAdDraft_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TAdDraft();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryAdDraftsByUser_args implements org.apache.thrift.TBase<queryAdDraftsByUser_args, queryAdDraftsByUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryAdDraftsByUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAdDraftsByUser_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAdDraftsByUser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAdDraftsByUser_argsTupleSchemeFactory();

    public java.lang.String uid; // required
    public java.lang.String siteId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      SITE_ID((short)2, "siteId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // SITE_ID
            return SITE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAdDraftsByUser_args.class, metaDataMap);
    }

    public queryAdDraftsByUser_args() {
    }

    public queryAdDraftsByUser_args(
      java.lang.String uid,
      java.lang.String siteId)
    {
      this();
      this.uid = uid;
      this.siteId = siteId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAdDraftsByUser_args(queryAdDraftsByUser_args other) {
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
    }

    public queryAdDraftsByUser_args deepCopy() {
      return new queryAdDraftsByUser_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      this.siteId = null;
    }

    public java.lang.String getUid() {
      return this.uid;
    }

    public queryAdDraftsByUser_args setUid(java.lang.String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public queryAdDraftsByUser_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.String)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case SITE_ID:
        return getSiteId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case SITE_ID:
        return isSetSiteId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAdDraftsByUser_args)
        return this.equals((queryAdDraftsByUser_args)that);
      return false;
    }

    public boolean equals(queryAdDraftsByUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
      if (isSetUid())
        hashCode = hashCode * 8191 + uid.hashCode();

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryAdDraftsByUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryAdDraftsByUser_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAdDraftsByUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryAdDraftsByUser_argsStandardScheme getScheme() {
        return new queryAdDraftsByUser_argsStandardScheme();
      }
    }

    private static class queryAdDraftsByUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAdDraftsByUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAdDraftsByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAdDraftsByUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAdDraftsByUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryAdDraftsByUser_argsTupleScheme getScheme() {
        return new queryAdDraftsByUser_argsTupleScheme();
      }
    }

    private static class queryAdDraftsByUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAdDraftsByUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAdDraftsByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAdDraftsByUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryAdDraftsByUser_result implements org.apache.thrift.TBase<queryAdDraftsByUser_result, queryAdDraftsByUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryAdDraftsByUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryAdDraftsByUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryAdDraftsByUser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryAdDraftsByUser_resultTupleSchemeFactory();

    public java.util.List<TAdDraft> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TAdDraft.class))));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryAdDraftsByUser_result.class, metaDataMap);
    }

    public queryAdDraftsByUser_result() {
    }

    public queryAdDraftsByUser_result(
      java.util.List<TAdDraft> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryAdDraftsByUser_result(queryAdDraftsByUser_result other) {
      if (other.isSetSuccess()) {
        java.util.List<TAdDraft> __this__success = new java.util.ArrayList<TAdDraft>(other.success.size());
        for (TAdDraft other_element : other.success) {
          __this__success.add(new TAdDraft(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public queryAdDraftsByUser_result deepCopy() {
      return new queryAdDraftsByUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TAdDraft> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TAdDraft elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<TAdDraft>();
      }
      this.success.add(elem);
    }

    public java.util.List<TAdDraft> getSuccess() {
      return this.success;
    }

    public queryAdDraftsByUser_result setSuccess(java.util.List<TAdDraft> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public queryAdDraftsByUser_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public queryAdDraftsByUser_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<TAdDraft>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryAdDraftsByUser_result)
        return this.equals((queryAdDraftsByUser_result)that);
      return false;
    }

    public boolean equals(queryAdDraftsByUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryAdDraftsByUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryAdDraftsByUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryAdDraftsByUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryAdDraftsByUser_resultStandardScheme getScheme() {
        return new queryAdDraftsByUser_resultStandardScheme();
      }
    }

    private static class queryAdDraftsByUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryAdDraftsByUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryAdDraftsByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list138 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<TAdDraft>(_list138.size);
                  TAdDraft _elem139;
                  for (int _i140 = 0; _i140 < _list138.size; ++_i140)
                  {
                    _elem139 = new TAdDraft();
                    _elem139.read(iprot);
                    struct.success.add(_elem139);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryAdDraftsByUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TAdDraft _iter141 : struct.success)
            {
              _iter141.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryAdDraftsByUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryAdDraftsByUser_resultTupleScheme getScheme() {
        return new queryAdDraftsByUser_resultTupleScheme();
      }
    }

    private static class queryAdDraftsByUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryAdDraftsByUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryAdDraftsByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TAdDraft _iter142 : struct.success)
            {
              _iter142.write(oprot);
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryAdDraftsByUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list143 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<TAdDraft>(_list143.size);
            TAdDraft _elem144;
            for (int _i145 = 0; _i145 < _list143.size; ++_i145)
            {
              _elem144 = new TAdDraft();
              _elem144.read(iprot);
              struct.success.add(_elem144);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUnreadCount_args implements org.apache.thrift.TBase<getUnreadCount_args, getUnreadCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<getUnreadCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUnreadCount_args");

    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPES_FIELD_DESC = new org.apache.thrift.protocol.TField("types", org.apache.thrift.protocol.TType.MAP, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUnreadCount_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUnreadCount_argsTupleSchemeFactory();

    public java.lang.String siteId; // required
    public java.util.Map<java.lang.String,java.lang.Integer> types; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SITE_ID((short)1, "siteId"),
      TYPES((short)2, "types");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SITE_ID
            return SITE_ID;
          case 2: // TYPES
            return TYPES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPES, new org.apache.thrift.meta_data.FieldMetaData("types", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUnreadCount_args.class, metaDataMap);
    }

    public getUnreadCount_args() {
    }

    public getUnreadCount_args(
      java.lang.String siteId,
      java.util.Map<java.lang.String,java.lang.Integer> types)
    {
      this();
      this.siteId = siteId;
      this.types = types;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUnreadCount_args(getUnreadCount_args other) {
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      if (other.isSetTypes()) {
        java.util.Map<java.lang.String,java.lang.Integer> __this__types = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.types);
        this.types = __this__types;
      }
    }

    public getUnreadCount_args deepCopy() {
      return new getUnreadCount_args(this);
    }

    @Override
    public void clear() {
      this.siteId = null;
      this.types = null;
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public getUnreadCount_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public int getTypesSize() {
      return (this.types == null) ? 0 : this.types.size();
    }

    public void putToTypes(java.lang.String key, int val) {
      if (this.types == null) {
        this.types = new java.util.HashMap<java.lang.String,java.lang.Integer>();
      }
      this.types.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.Integer> getTypes() {
      return this.types;
    }

    public getUnreadCount_args setTypes(java.util.Map<java.lang.String,java.lang.Integer> types) {
      this.types = types;
      return this;
    }

    public void unsetTypes() {
      this.types = null;
    }

    /** Returns true if field types is set (has been assigned a value) and false otherwise */
    public boolean isSetTypes() {
      return this.types != null;
    }

    public void setTypesIsSet(boolean value) {
      if (!value) {
        this.types = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case TYPES:
        if (value == null) {
          unsetTypes();
        } else {
          setTypes((java.util.Map<java.lang.String,java.lang.Integer>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SITE_ID:
        return getSiteId();

      case TYPES:
        return getTypes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SITE_ID:
        return isSetSiteId();
      case TYPES:
        return isSetTypes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUnreadCount_args)
        return this.equals((getUnreadCount_args)that);
      return false;
    }

    public boolean equals(getUnreadCount_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_types = true && this.isSetTypes();
      boolean that_present_types = true && that.isSetTypes();
      if (this_present_types || that_present_types) {
        if (!(this_present_types && that_present_types))
          return false;
        if (!this.types.equals(that.types))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + ((isSetTypes()) ? 131071 : 524287);
      if (isSetTypes())
        hashCode = hashCode * 8191 + types.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUnreadCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTypes()).compareTo(other.isSetTypes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTypes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.types, other.types);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUnreadCount_args(");
      boolean first = true;

      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("types:");
      if (this.types == null) {
        sb.append("null");
      } else {
        sb.append(this.types);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUnreadCount_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUnreadCount_argsStandardScheme getScheme() {
        return new getUnreadCount_argsStandardScheme();
      }
    }

    private static class getUnreadCount_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUnreadCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUnreadCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPES
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map146 = iprot.readMapBegin();
                  struct.types = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map146.size);
                  java.lang.String _key147;
                  int _val148;
                  for (int _i149 = 0; _i149 < _map146.size; ++_i149)
                  {
                    _key147 = iprot.readString();
                    _val148 = iprot.readI32();
                    struct.types.put(_key147, _val148);
                  }
                  iprot.readMapEnd();
                }
                struct.setTypesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUnreadCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        if (struct.types != null) {
          oprot.writeFieldBegin(TYPES_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.types.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter150 : struct.types.entrySet())
            {
              oprot.writeString(_iter150.getKey());
              oprot.writeI32(_iter150.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUnreadCount_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUnreadCount_argsTupleScheme getScheme() {
        return new getUnreadCount_argsTupleScheme();
      }
    }

    private static class getUnreadCount_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUnreadCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUnreadCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSiteId()) {
          optionals.set(0);
        }
        if (struct.isSetTypes()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetTypes()) {
          {
            oprot.writeI32(struct.types.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter151 : struct.types.entrySet())
            {
              oprot.writeString(_iter151.getKey());
              oprot.writeI32(_iter151.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUnreadCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TMap _map152 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.types = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map152.size);
            java.lang.String _key153;
            int _val154;
            for (int _i155 = 0; _i155 < _map152.size; ++_i155)
            {
              _key153 = iprot.readString();
              _val154 = iprot.readI32();
              struct.types.put(_key153, _val154);
            }
          }
          struct.setTypesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getUnreadCount_result implements org.apache.thrift.TBase<getUnreadCount_result, getUnreadCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<getUnreadCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getUnreadCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getUnreadCount_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getUnreadCount_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,java.lang.Integer> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getUnreadCount_result.class, metaDataMap);
    }

    public getUnreadCount_result() {
    }

    public getUnreadCount_result(
      java.util.Map<java.lang.String,java.lang.Integer> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getUnreadCount_result(getUnreadCount_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,java.lang.Integer> __this__success = new java.util.HashMap<java.lang.String,java.lang.Integer>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getUnreadCount_result deepCopy() {
      return new getUnreadCount_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, int val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,java.lang.Integer>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.Integer> getSuccess() {
      return this.success;
    }

    public getUnreadCount_result setSuccess(java.util.Map<java.lang.String,java.lang.Integer> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getUnreadCount_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getUnreadCount_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,java.lang.Integer>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getUnreadCount_result)
        return this.equals((getUnreadCount_result)that);
      return false;
    }

    public boolean equals(getUnreadCount_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getUnreadCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getUnreadCount_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getUnreadCount_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUnreadCount_resultStandardScheme getScheme() {
        return new getUnreadCount_resultStandardScheme();
      }
    }

    private static class getUnreadCount_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getUnreadCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getUnreadCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map156 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map156.size);
                  java.lang.String _key157;
                  int _val158;
                  for (int _i159 = 0; _i159 < _map156.size; ++_i159)
                  {
                    _key157 = iprot.readString();
                    _val158 = iprot.readI32();
                    struct.success.put(_key157, _val158);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getUnreadCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter160 : struct.success.entrySet())
            {
              oprot.writeString(_iter160.getKey());
              oprot.writeI32(_iter160.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getUnreadCount_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getUnreadCount_resultTupleScheme getScheme() {
        return new getUnreadCount_resultTupleScheme();
      }
    }

    private static class getUnreadCount_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getUnreadCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getUnreadCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.Integer> _iter161 : struct.success.entrySet())
            {
              oprot.writeString(_iter161.getKey());
              oprot.writeI32(_iter161.getValue());
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getUnreadCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map162 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,java.lang.Integer>(2*_map162.size);
            java.lang.String _key163;
            int _val164;
            for (int _i165 = 0; _i165 < _map162.size; ++_i165)
            {
              _key163 = iprot.readString();
              _val164 = iprot.readI32();
              struct.success.put(_key163, _val164);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getImageConfig_args implements org.apache.thrift.TBase<getImageConfig_args, getImageConfig_args._Fields>, java.io.Serializable, Cloneable, Comparable<getImageConfig_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImageConfig_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImageConfig_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImageConfig_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImageConfig_args.class, metaDataMap);
    }

    public getImageConfig_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImageConfig_args(getImageConfig_args other) {
    }

    public getImageConfig_args deepCopy() {
      return new getImageConfig_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImageConfig_args)
        return this.equals((getImageConfig_args)that);
      return false;
    }

    public boolean equals(getImageConfig_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getImageConfig_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImageConfig_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImageConfig_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageConfig_argsStandardScheme getScheme() {
        return new getImageConfig_argsStandardScheme();
      }
    }

    private static class getImageConfig_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImageConfig_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImageConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImageConfig_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImageConfig_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageConfig_argsTupleScheme getScheme() {
        return new getImageConfig_argsTupleScheme();
      }
    }

    private static class getImageConfig_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImageConfig_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImageConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImageConfig_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getImageConfig_result implements org.apache.thrift.TBase<getImageConfig_result, getImageConfig_result._Fields>, java.io.Serializable, Cloneable, Comparable<getImageConfig_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getImageConfig_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getImageConfig_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getImageConfig_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,TImageConfig> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TImageConfig.class))));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getImageConfig_result.class, metaDataMap);
    }

    public getImageConfig_result() {
    }

    public getImageConfig_result(
      java.util.Map<java.lang.String,TImageConfig> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getImageConfig_result(getImageConfig_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,TImageConfig> __this__success = new java.util.HashMap<java.lang.String,TImageConfig>(other.success.size());
        for (java.util.Map.Entry<java.lang.String, TImageConfig> other_element : other.success.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          TImageConfig other_element_value = other_element.getValue();

          java.lang.String __this__success_copy_key = other_element_key;

          TImageConfig __this__success_copy_value = new TImageConfig(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getImageConfig_result deepCopy() {
      return new getImageConfig_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, TImageConfig val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,TImageConfig>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,TImageConfig> getSuccess() {
      return this.success;
    }

    public getImageConfig_result setSuccess(java.util.Map<java.lang.String,TImageConfig> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getImageConfig_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getImageConfig_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,TImageConfig>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getImageConfig_result)
        return this.equals((getImageConfig_result)that);
      return false;
    }

    public boolean equals(getImageConfig_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getImageConfig_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getImageConfig_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getImageConfig_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageConfig_resultStandardScheme getScheme() {
        return new getImageConfig_resultStandardScheme();
      }
    }

    private static class getImageConfig_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getImageConfig_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getImageConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map166 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,TImageConfig>(2*_map166.size);
                  java.lang.String _key167;
                  TImageConfig _val168;
                  for (int _i169 = 0; _i169 < _map166.size; ++_i169)
                  {
                    _key167 = iprot.readString();
                    _val168 = new TImageConfig();
                    _val168.read(iprot);
                    struct.success.put(_key167, _val168);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getImageConfig_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, TImageConfig> _iter170 : struct.success.entrySet())
            {
              oprot.writeString(_iter170.getKey());
              _iter170.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getImageConfig_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getImageConfig_resultTupleScheme getScheme() {
        return new getImageConfig_resultTupleScheme();
      }
    }

    private static class getImageConfig_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getImageConfig_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getImageConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, TImageConfig> _iter171 : struct.success.entrySet())
            {
              oprot.writeString(_iter171.getKey());
              _iter171.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getImageConfig_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map172 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,TImageConfig>(2*_map172.size);
            java.lang.String _key173;
            TImageConfig _val174;
            for (int _i175 = 0; _i175 < _map172.size; ++_i175)
            {
              _key173 = iprot.readString();
              _val174 = new TImageConfig();
              _val174.read(iprot);
              struct.success.put(_key173, _val174);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSensitiveWords_args implements org.apache.thrift.TBase<getSensitiveWords_args, getSensitiveWords_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSensitiveWords_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSensitiveWords_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSensitiveWords_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSensitiveWords_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSensitiveWords_args.class, metaDataMap);
    }

    public getSensitiveWords_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSensitiveWords_args(getSensitiveWords_args other) {
    }

    public getSensitiveWords_args deepCopy() {
      return new getSensitiveWords_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSensitiveWords_args)
        return this.equals((getSensitiveWords_args)that);
      return false;
    }

    public boolean equals(getSensitiveWords_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getSensitiveWords_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSensitiveWords_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSensitiveWords_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSensitiveWords_argsStandardScheme getScheme() {
        return new getSensitiveWords_argsStandardScheme();
      }
    }

    private static class getSensitiveWords_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSensitiveWords_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSensitiveWords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSensitiveWords_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSensitiveWords_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSensitiveWords_argsTupleScheme getScheme() {
        return new getSensitiveWords_argsTupleScheme();
      }
    }

    private static class getSensitiveWords_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSensitiveWords_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSensitiveWords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSensitiveWords_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSensitiveWords_result implements org.apache.thrift.TBase<getSensitiveWords_result, getSensitiveWords_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSensitiveWords_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSensitiveWords_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSensitiveWords_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSensitiveWords_resultTupleSchemeFactory();

    public java.util.List<java.lang.String> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSensitiveWords_result.class, metaDataMap);
    }

    public getSensitiveWords_result() {
    }

    public getSensitiveWords_result(
      java.util.List<java.lang.String> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSensitiveWords_result(getSensitiveWords_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.lang.String> __this__success = new java.util.ArrayList<java.lang.String>(other.success);
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getSensitiveWords_result deepCopy() {
      return new getSensitiveWords_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.lang.String> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.lang.String elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.lang.String>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.lang.String> getSuccess() {
      return this.success;
    }

    public getSensitiveWords_result setSuccess(java.util.List<java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getSensitiveWords_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getSensitiveWords_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.lang.String>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSensitiveWords_result)
        return this.equals((getSensitiveWords_result)that);
      return false;
    }

    public boolean equals(getSensitiveWords_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSensitiveWords_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSensitiveWords_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSensitiveWords_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSensitiveWords_resultStandardScheme getScheme() {
        return new getSensitiveWords_resultStandardScheme();
      }
    }

    private static class getSensitiveWords_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSensitiveWords_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSensitiveWords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.lang.String>(_list176.size);
                  java.lang.String _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = iprot.readString();
                    struct.success.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSensitiveWords_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.lang.String _iter179 : struct.success)
            {
              oprot.writeString(_iter179);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSensitiveWords_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSensitiveWords_resultTupleScheme getScheme() {
        return new getSensitiveWords_resultTupleScheme();
      }
    }

    private static class getSensitiveWords_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSensitiveWords_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSensitiveWords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.lang.String _iter180 : struct.success)
            {
              oprot.writeString(_iter180);
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSensitiveWords_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.ArrayList<java.lang.String>(_list181.size);
            java.lang.String _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = iprot.readString();
              struct.success.add(_elem182);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendSMS_args implements org.apache.thrift.TBase<sendSMS_args, sendSMS_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendSMS_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendSMS_args");

    private static final org.apache.thrift.protocol.TField MOBILES_FIELD_DESC = new org.apache.thrift.protocol.TField("mobiles", org.apache.thrift.protocol.TType.LIST, (short)1);
    private static final org.apache.thrift.protocol.TField CONTENT_FIELD_DESC = new org.apache.thrift.protocol.TField("content", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SOURCE_FIELD_DESC = new org.apache.thrift.protocol.TField("source", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendSMS_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendSMS_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> mobiles; // required
    public java.lang.String content; // required
    public java.lang.String source; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MOBILES((short)1, "mobiles"),
      CONTENT((short)2, "content"),
      SOURCE((short)3, "source");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOBILES
            return MOBILES;
          case 2: // CONTENT
            return CONTENT;
          case 3: // SOURCE
            return SOURCE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOBILES, new org.apache.thrift.meta_data.FieldMetaData("mobiles", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.CONTENT, new org.apache.thrift.meta_data.FieldMetaData("content", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SOURCE, new org.apache.thrift.meta_data.FieldMetaData("source", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendSMS_args.class, metaDataMap);
    }

    public sendSMS_args() {
    }

    public sendSMS_args(
      java.util.List<java.lang.String> mobiles,
      java.lang.String content,
      java.lang.String source)
    {
      this();
      this.mobiles = mobiles;
      this.content = content;
      this.source = source;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendSMS_args(sendSMS_args other) {
      if (other.isSetMobiles()) {
        java.util.List<java.lang.String> __this__mobiles = new java.util.ArrayList<java.lang.String>(other.mobiles);
        this.mobiles = __this__mobiles;
      }
      if (other.isSetContent()) {
        this.content = other.content;
      }
      if (other.isSetSource()) {
        this.source = other.source;
      }
    }

    public sendSMS_args deepCopy() {
      return new sendSMS_args(this);
    }

    @Override
    public void clear() {
      this.mobiles = null;
      this.content = null;
      this.source = null;
    }

    public int getMobilesSize() {
      return (this.mobiles == null) ? 0 : this.mobiles.size();
    }

    public java.util.Iterator<java.lang.String> getMobilesIterator() {
      return (this.mobiles == null) ? null : this.mobiles.iterator();
    }

    public void addToMobiles(java.lang.String elem) {
      if (this.mobiles == null) {
        this.mobiles = new java.util.ArrayList<java.lang.String>();
      }
      this.mobiles.add(elem);
    }

    public java.util.List<java.lang.String> getMobiles() {
      return this.mobiles;
    }

    public sendSMS_args setMobiles(java.util.List<java.lang.String> mobiles) {
      this.mobiles = mobiles;
      return this;
    }

    public void unsetMobiles() {
      this.mobiles = null;
    }

    /** Returns true if field mobiles is set (has been assigned a value) and false otherwise */
    public boolean isSetMobiles() {
      return this.mobiles != null;
    }

    public void setMobilesIsSet(boolean value) {
      if (!value) {
        this.mobiles = null;
      }
    }

    public java.lang.String getContent() {
      return this.content;
    }

    public sendSMS_args setContent(java.lang.String content) {
      this.content = content;
      return this;
    }

    public void unsetContent() {
      this.content = null;
    }

    /** Returns true if field content is set (has been assigned a value) and false otherwise */
    public boolean isSetContent() {
      return this.content != null;
    }

    public void setContentIsSet(boolean value) {
      if (!value) {
        this.content = null;
      }
    }

    public java.lang.String getSource() {
      return this.source;
    }

    public sendSMS_args setSource(java.lang.String source) {
      this.source = source;
      return this;
    }

    public void unsetSource() {
      this.source = null;
    }

    /** Returns true if field source is set (has been assigned a value) and false otherwise */
    public boolean isSetSource() {
      return this.source != null;
    }

    public void setSourceIsSet(boolean value) {
      if (!value) {
        this.source = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MOBILES:
        if (value == null) {
          unsetMobiles();
        } else {
          setMobiles((java.util.List<java.lang.String>)value);
        }
        break;

      case CONTENT:
        if (value == null) {
          unsetContent();
        } else {
          setContent((java.lang.String)value);
        }
        break;

      case SOURCE:
        if (value == null) {
          unsetSource();
        } else {
          setSource((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MOBILES:
        return getMobiles();

      case CONTENT:
        return getContent();

      case SOURCE:
        return getSource();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MOBILES:
        return isSetMobiles();
      case CONTENT:
        return isSetContent();
      case SOURCE:
        return isSetSource();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendSMS_args)
        return this.equals((sendSMS_args)that);
      return false;
    }

    public boolean equals(sendSMS_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mobiles = true && this.isSetMobiles();
      boolean that_present_mobiles = true && that.isSetMobiles();
      if (this_present_mobiles || that_present_mobiles) {
        if (!(this_present_mobiles && that_present_mobiles))
          return false;
        if (!this.mobiles.equals(that.mobiles))
          return false;
      }

      boolean this_present_content = true && this.isSetContent();
      boolean that_present_content = true && that.isSetContent();
      if (this_present_content || that_present_content) {
        if (!(this_present_content && that_present_content))
          return false;
        if (!this.content.equals(that.content))
          return false;
      }

      boolean this_present_source = true && this.isSetSource();
      boolean that_present_source = true && that.isSetSource();
      if (this_present_source || that_present_source) {
        if (!(this_present_source && that_present_source))
          return false;
        if (!this.source.equals(that.source))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMobiles()) ? 131071 : 524287);
      if (isSetMobiles())
        hashCode = hashCode * 8191 + mobiles.hashCode();

      hashCode = hashCode * 8191 + ((isSetContent()) ? 131071 : 524287);
      if (isSetContent())
        hashCode = hashCode * 8191 + content.hashCode();

      hashCode = hashCode * 8191 + ((isSetSource()) ? 131071 : 524287);
      if (isSetSource())
        hashCode = hashCode * 8191 + source.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendSMS_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMobiles()).compareTo(other.isSetMobiles());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobiles()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobiles, other.mobiles);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetContent()).compareTo(other.isSetContent());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetContent()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.content, other.content);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSource()).compareTo(other.isSetSource());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSource()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.source, other.source);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendSMS_args(");
      boolean first = true;

      sb.append("mobiles:");
      if (this.mobiles == null) {
        sb.append("null");
      } else {
        sb.append(this.mobiles);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("content:");
      if (this.content == null) {
        sb.append("null");
      } else {
        sb.append(this.content);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("source:");
      if (this.source == null) {
        sb.append("null");
      } else {
        sb.append(this.source);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendSMS_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendSMS_argsStandardScheme getScheme() {
        return new sendSMS_argsStandardScheme();
      }
    }

    private static class sendSMS_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendSMS_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendSMS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MOBILES
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.mobiles = new java.util.ArrayList<java.lang.String>(_list184.size);
                  java.lang.String _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = iprot.readString();
                    struct.mobiles.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setMobilesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CONTENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.content = iprot.readString();
                struct.setContentIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SOURCE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.source = iprot.readString();
                struct.setSourceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendSMS_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mobiles != null) {
          oprot.writeFieldBegin(MOBILES_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.mobiles.size()));
            for (java.lang.String _iter187 : struct.mobiles)
            {
              oprot.writeString(_iter187);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.content != null) {
          oprot.writeFieldBegin(CONTENT_FIELD_DESC);
          oprot.writeString(struct.content);
          oprot.writeFieldEnd();
        }
        if (struct.source != null) {
          oprot.writeFieldBegin(SOURCE_FIELD_DESC);
          oprot.writeString(struct.source);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendSMS_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendSMS_argsTupleScheme getScheme() {
        return new sendSMS_argsTupleScheme();
      }
    }

    private static class sendSMS_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendSMS_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendSMS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMobiles()) {
          optionals.set(0);
        }
        if (struct.isSetContent()) {
          optionals.set(1);
        }
        if (struct.isSetSource()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetMobiles()) {
          {
            oprot.writeI32(struct.mobiles.size());
            for (java.lang.String _iter188 : struct.mobiles)
            {
              oprot.writeString(_iter188);
            }
          }
        }
        if (struct.isSetContent()) {
          oprot.writeString(struct.content);
        }
        if (struct.isSetSource()) {
          oprot.writeString(struct.source);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendSMS_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.mobiles = new java.util.ArrayList<java.lang.String>(_list189.size);
            java.lang.String _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = iprot.readString();
              struct.mobiles.add(_elem190);
            }
          }
          struct.setMobilesIsSet(true);
        }
        if (incoming.get(1)) {
          struct.content = iprot.readString();
          struct.setContentIsSet(true);
        }
        if (incoming.get(2)) {
          struct.source = iprot.readString();
          struct.setSourceIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sendSMS_result implements org.apache.thrift.TBase<sendSMS_result, sendSMS_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendSMS_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendSMS_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sendSMS_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sendSMS_resultTupleSchemeFactory();

    public int success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendSMS_result.class, metaDataMap);
    }

    public sendSMS_result() {
    }

    public sendSMS_result(
      int success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendSMS_result(sendSMS_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public sendSMS_result deepCopy() {
      return new sendSMS_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public sendSMS_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public sendSMS_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public sendSMS_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sendSMS_result)
        return this.equals((sendSMS_result)that);
      return false;
    }

    public boolean equals(sendSMS_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sendSMS_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sendSMS_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendSMS_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendSMS_resultStandardScheme getScheme() {
        return new sendSMS_resultStandardScheme();
      }
    }

    private static class sendSMS_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sendSMS_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendSMS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendSMS_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendSMS_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sendSMS_resultTupleScheme getScheme() {
        return new sendSMS_resultTupleScheme();
      }
    }

    private static class sendSMS_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sendSMS_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendSMS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendSMS_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSiteStatus_args implements org.apache.thrift.TBase<getSiteStatus_args, getSiteStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSiteStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSiteStatus_args");

    private static final org.apache.thrift.protocol.TField GID_FIELD_DESC = new org.apache.thrift.protocol.TField("gid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSiteStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSiteStatus_argsTupleSchemeFactory();

    public java.lang.String gid; // required
    public java.lang.String time; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GID((short)1, "gid"),
      TIME((short)2, "time");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GID
            return GID;
          case 2: // TIME
            return TIME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GID, new org.apache.thrift.meta_data.FieldMetaData("gid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSiteStatus_args.class, metaDataMap);
    }

    public getSiteStatus_args() {
    }

    public getSiteStatus_args(
      java.lang.String gid,
      java.lang.String time)
    {
      this();
      this.gid = gid;
      this.time = time;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSiteStatus_args(getSiteStatus_args other) {
      if (other.isSetGid()) {
        this.gid = other.gid;
      }
      if (other.isSetTime()) {
        this.time = other.time;
      }
    }

    public getSiteStatus_args deepCopy() {
      return new getSiteStatus_args(this);
    }

    @Override
    public void clear() {
      this.gid = null;
      this.time = null;
    }

    public java.lang.String getGid() {
      return this.gid;
    }

    public getSiteStatus_args setGid(java.lang.String gid) {
      this.gid = gid;
      return this;
    }

    public void unsetGid() {
      this.gid = null;
    }

    /** Returns true if field gid is set (has been assigned a value) and false otherwise */
    public boolean isSetGid() {
      return this.gid != null;
    }

    public void setGidIsSet(boolean value) {
      if (!value) {
        this.gid = null;
      }
    }

    public java.lang.String getTime() {
      return this.time;
    }

    public getSiteStatus_args setTime(java.lang.String time) {
      this.time = time;
      return this;
    }

    public void unsetTime() {
      this.time = null;
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return this.time != null;
    }

    public void setTimeIsSet(boolean value) {
      if (!value) {
        this.time = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case GID:
        if (value == null) {
          unsetGid();
        } else {
          setGid((java.lang.String)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GID:
        return getGid();

      case TIME:
        return getTime();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GID:
        return isSetGid();
      case TIME:
        return isSetTime();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSiteStatus_args)
        return this.equals((getSiteStatus_args)that);
      return false;
    }

    public boolean equals(getSiteStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_gid = true && this.isSetGid();
      boolean that_present_gid = true && that.isSetGid();
      if (this_present_gid || that_present_gid) {
        if (!(this_present_gid && that_present_gid))
          return false;
        if (!this.gid.equals(that.gid))
          return false;
      }

      boolean this_present_time = true && this.isSetTime();
      boolean that_present_time = true && that.isSetTime();
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (!this.time.equals(that.time))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGid()) ? 131071 : 524287);
      if (isSetGid())
        hashCode = hashCode * 8191 + gid.hashCode();

      hashCode = hashCode * 8191 + ((isSetTime()) ? 131071 : 524287);
      if (isSetTime())
        hashCode = hashCode * 8191 + time.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSiteStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetGid()).compareTo(other.isSetGid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gid, other.gid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSiteStatus_args(");
      boolean first = true;

      sb.append("gid:");
      if (this.gid == null) {
        sb.append("null");
      } else {
        sb.append(this.gid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      if (this.time == null) {
        sb.append("null");
      } else {
        sb.append(this.time);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSiteStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiteStatus_argsStandardScheme getScheme() {
        return new getSiteStatus_argsStandardScheme();
      }
    }

    private static class getSiteStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSiteStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSiteStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.gid = iprot.readString();
                struct.setGidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.time = iprot.readString();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSiteStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gid != null) {
          oprot.writeFieldBegin(GID_FIELD_DESC);
          oprot.writeString(struct.gid);
          oprot.writeFieldEnd();
        }
        if (struct.time != null) {
          oprot.writeFieldBegin(TIME_FIELD_DESC);
          oprot.writeString(struct.time);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSiteStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiteStatus_argsTupleScheme getScheme() {
        return new getSiteStatus_argsTupleScheme();
      }
    }

    private static class getSiteStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSiteStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSiteStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGid()) {
          optionals.set(0);
        }
        if (struct.isSetTime()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGid()) {
          oprot.writeString(struct.gid);
        }
        if (struct.isSetTime()) {
          oprot.writeString(struct.time);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSiteStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.gid = iprot.readString();
          struct.setGidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.time = iprot.readString();
          struct.setTimeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSiteStatus_result implements org.apache.thrift.TBase<getSiteStatus_result, getSiteStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSiteStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSiteStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSiteStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSiteStatus_resultTupleSchemeFactory();

    public java.util.Map<MoutanSiteStatusType,java.lang.String> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MoutanSiteStatusType.class), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSiteStatus_result.class, metaDataMap);
    }

    public getSiteStatus_result() {
    }

    public getSiteStatus_result(
      java.util.Map<MoutanSiteStatusType,java.lang.String> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSiteStatus_result(getSiteStatus_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<MoutanSiteStatusType,java.lang.String> __this__success = new java.util.HashMap<MoutanSiteStatusType,java.lang.String>(other.success.size());
        for (java.util.Map.Entry<MoutanSiteStatusType, java.lang.String> other_element : other.success.entrySet()) {

          MoutanSiteStatusType other_element_key = other_element.getKey();
          java.lang.String other_element_value = other_element.getValue();

          MoutanSiteStatusType __this__success_copy_key = other_element_key;

          java.lang.String __this__success_copy_value = other_element_value;

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getSiteStatus_result deepCopy() {
      return new getSiteStatus_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(MoutanSiteStatusType key, java.lang.String val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<MoutanSiteStatusType,java.lang.String>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<MoutanSiteStatusType,java.lang.String> getSuccess() {
      return this.success;
    }

    public getSiteStatus_result setSuccess(java.util.Map<MoutanSiteStatusType,java.lang.String> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getSiteStatus_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getSiteStatus_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<MoutanSiteStatusType,java.lang.String>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSiteStatus_result)
        return this.equals((getSiteStatus_result)that);
      return false;
    }

    public boolean equals(getSiteStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSiteStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSiteStatus_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSiteStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiteStatus_resultStandardScheme getScheme() {
        return new getSiteStatus_resultStandardScheme();
      }
    }

    private static class getSiteStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSiteStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSiteStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map192 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<MoutanSiteStatusType,java.lang.String>(2*_map192.size);
                  MoutanSiteStatusType _key193;
                  java.lang.String _val194;
                  for (int _i195 = 0; _i195 < _map192.size; ++_i195)
                  {
                    _key193 = com.baixing.thrift.moutan.MoutanSiteStatusType.findByValue(iprot.readI32());
                    _val194 = iprot.readString();
                    struct.success.put(_key193, _val194);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSiteStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, struct.success.size()));
            for (java.util.Map.Entry<MoutanSiteStatusType, java.lang.String> _iter196 : struct.success.entrySet())
            {
              oprot.writeI32(_iter196.getKey().getValue());
              oprot.writeString(_iter196.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSiteStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSiteStatus_resultTupleScheme getScheme() {
        return new getSiteStatus_resultTupleScheme();
      }
    }

    private static class getSiteStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSiteStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSiteStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<MoutanSiteStatusType, java.lang.String> _iter197 : struct.success.entrySet())
            {
              oprot.writeI32(_iter197.getKey().getValue());
              oprot.writeString(_iter197.getValue());
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSiteStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map198 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.I32, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.success = new java.util.HashMap<MoutanSiteStatusType,java.lang.String>(2*_map198.size);
            MoutanSiteStatusType _key199;
            java.lang.String _val200;
            for (int _i201 = 0; _i201 < _map198.size; ++_i201)
            {
              _key199 = com.baixing.thrift.moutan.MoutanSiteStatusType.findByValue(iprot.readI32());
              _val200 = iprot.readString();
              struct.success.put(_key199, _val200);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createOrder_args implements org.apache.thrift.TBase<createOrder_args, createOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<createOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrder_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField CONSUMER_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("consumerUid", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField ADDITION_FIELD_DESC = new org.apache.thrift.protocol.TField("addition", org.apache.thrift.protocol.TType.STRING, (short)6);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOrder_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOrder_argsTupleSchemeFactory();

    public java.lang.String uid; // required
    public int type; // required
    public java.lang.String consumerUid; // required
    public int price; // required
    public java.lang.String siteId; // required
    public java.lang.String addition; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      TYPE((short)2, "type"),
      CONSUMER_UID((short)3, "consumerUid"),
      PRICE((short)4, "price"),
      SITE_ID((short)5, "siteId"),
      ADDITION((short)6, "addition");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // TYPE
            return TYPE;
          case 3: // CONSUMER_UID
            return CONSUMER_UID;
          case 4: // PRICE
            return PRICE;
          case 5: // SITE_ID
            return SITE_ID;
          case 6: // ADDITION
            return ADDITION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private static final int __PRICE_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.CONSUMER_UID, new org.apache.thrift.meta_data.FieldMetaData("consumerUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ADDITION, new org.apache.thrift.meta_data.FieldMetaData("addition", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrder_args.class, metaDataMap);
    }

    public createOrder_args() {
    }

    public createOrder_args(
      java.lang.String uid,
      int type,
      java.lang.String consumerUid,
      int price,
      java.lang.String siteId,
      java.lang.String addition)
    {
      this();
      this.uid = uid;
      this.type = type;
      setTypeIsSet(true);
      this.consumerUid = consumerUid;
      this.price = price;
      setPriceIsSet(true);
      this.siteId = siteId;
      this.addition = addition;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrder_args(createOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      this.type = other.type;
      if (other.isSetConsumerUid()) {
        this.consumerUid = other.consumerUid;
      }
      this.price = other.price;
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      if (other.isSetAddition()) {
        this.addition = other.addition;
      }
    }

    public createOrder_args deepCopy() {
      return new createOrder_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      setTypeIsSet(false);
      this.type = 0;
      this.consumerUid = null;
      setPriceIsSet(false);
      this.price = 0;
      this.siteId = null;
      this.addition = null;
    }

    public java.lang.String getUid() {
      return this.uid;
    }

    public createOrder_args setUid(java.lang.String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public int getType() {
      return this.type;
    }

    public createOrder_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public java.lang.String getConsumerUid() {
      return this.consumerUid;
    }

    public createOrder_args setConsumerUid(java.lang.String consumerUid) {
      this.consumerUid = consumerUid;
      return this;
    }

    public void unsetConsumerUid() {
      this.consumerUid = null;
    }

    /** Returns true if field consumerUid is set (has been assigned a value) and false otherwise */
    public boolean isSetConsumerUid() {
      return this.consumerUid != null;
    }

    public void setConsumerUidIsSet(boolean value) {
      if (!value) {
        this.consumerUid = null;
      }
    }

    public int getPrice() {
      return this.price;
    }

    public createOrder_args setPrice(int price) {
      this.price = price;
      setPriceIsSet(true);
      return this;
    }

    public void unsetPrice() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
    }

    /** Returns true if field price is set (has been assigned a value) and false otherwise */
    public boolean isSetPrice() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
    }

    public void setPriceIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public createOrder_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public java.lang.String getAddition() {
      return this.addition;
    }

    public createOrder_args setAddition(java.lang.String addition) {
      this.addition = addition;
      return this;
    }

    public void unsetAddition() {
      this.addition = null;
    }

    /** Returns true if field addition is set (has been assigned a value) and false otherwise */
    public boolean isSetAddition() {
      return this.addition != null;
    }

    public void setAdditionIsSet(boolean value) {
      if (!value) {
        this.addition = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((java.lang.Integer)value);
        }
        break;

      case CONSUMER_UID:
        if (value == null) {
          unsetConsumerUid();
        } else {
          setConsumerUid((java.lang.String)value);
        }
        break;

      case PRICE:
        if (value == null) {
          unsetPrice();
        } else {
          setPrice((java.lang.Integer)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case ADDITION:
        if (value == null) {
          unsetAddition();
        } else {
          setAddition((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case TYPE:
        return getType();

      case CONSUMER_UID:
        return getConsumerUid();

      case PRICE:
        return getPrice();

      case SITE_ID:
        return getSiteId();

      case ADDITION:
        return getAddition();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case TYPE:
        return isSetType();
      case CONSUMER_UID:
        return isSetConsumerUid();
      case PRICE:
        return isSetPrice();
      case SITE_ID:
        return isSetSiteId();
      case ADDITION:
        return isSetAddition();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrder_args)
        return this.equals((createOrder_args)that);
      return false;
    }

    public boolean equals(createOrder_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_consumerUid = true && this.isSetConsumerUid();
      boolean that_present_consumerUid = true && that.isSetConsumerUid();
      if (this_present_consumerUid || that_present_consumerUid) {
        if (!(this_present_consumerUid && that_present_consumerUid))
          return false;
        if (!this.consumerUid.equals(that.consumerUid))
          return false;
      }

      boolean this_present_price = true;
      boolean that_present_price = true;
      if (this_present_price || that_present_price) {
        if (!(this_present_price && that_present_price))
          return false;
        if (this.price != that.price)
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_addition = true && this.isSetAddition();
      boolean that_present_addition = true && that.isSetAddition();
      if (this_present_addition || that_present_addition) {
        if (!(this_present_addition && that_present_addition))
          return false;
        if (!this.addition.equals(that.addition))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
      if (isSetUid())
        hashCode = hashCode * 8191 + uid.hashCode();

      hashCode = hashCode * 8191 + type;

      hashCode = hashCode * 8191 + ((isSetConsumerUid()) ? 131071 : 524287);
      if (isSetConsumerUid())
        hashCode = hashCode * 8191 + consumerUid.hashCode();

      hashCode = hashCode * 8191 + price;

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAddition()) ? 131071 : 524287);
      if (isSetAddition())
        hashCode = hashCode * 8191 + addition.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetConsumerUid()).compareTo(other.isSetConsumerUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetConsumerUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.consumerUid, other.consumerUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrice()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAddition()).compareTo(other.isSetAddition());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAddition()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.addition, other.addition);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOrder_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("consumerUid:");
      if (this.consumerUid == null) {
        sb.append("null");
      } else {
        sb.append(this.consumerUid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("addition:");
      if (this.addition == null) {
        sb.append("null");
      } else {
        sb.append(this.addition);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrder_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOrder_argsStandardScheme getScheme() {
        return new createOrder_argsStandardScheme();
      }
    }

    private static class createOrder_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CONSUMER_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.consumerUid = iprot.readString();
                struct.setConsumerUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PRICE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.price = iprot.readI32();
                struct.setPriceIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // ADDITION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.addition = iprot.readString();
                struct.setAdditionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.consumerUid != null) {
          oprot.writeFieldBegin(CONSUMER_UID_FIELD_DESC);
          oprot.writeString(struct.consumerUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeI32(struct.price);
        oprot.writeFieldEnd();
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        if (struct.addition != null) {
          oprot.writeFieldBegin(ADDITION_FIELD_DESC);
          oprot.writeString(struct.addition);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrder_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOrder_argsTupleScheme getScheme() {
        return new createOrder_argsTupleScheme();
      }
    }

    private static class createOrder_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetConsumerUid()) {
          optionals.set(2);
        }
        if (struct.isSetPrice()) {
          optionals.set(3);
        }
        if (struct.isSetSiteId()) {
          optionals.set(4);
        }
        if (struct.isSetAddition()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetConsumerUid()) {
          oprot.writeString(struct.consumerUid);
        }
        if (struct.isSetPrice()) {
          oprot.writeI32(struct.price);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetAddition()) {
          oprot.writeString(struct.addition);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.consumerUid = iprot.readString();
          struct.setConsumerUidIsSet(true);
        }
        if (incoming.get(3)) {
          struct.price = iprot.readI32();
          struct.setPriceIsSet(true);
        }
        if (incoming.get(4)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(5)) {
          struct.addition = iprot.readString();
          struct.setAdditionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createOrder_result implements org.apache.thrift.TBase<createOrder_result, createOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<createOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createOrder_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createOrder_resultTupleSchemeFactory();

    public long success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createOrder_result.class, metaDataMap);
    }

    public createOrder_result() {
    }

    public createOrder_result(
      long success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createOrder_result(createOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public createOrder_result deepCopy() {
      return new createOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public createOrder_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public createOrder_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public createOrder_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createOrder_result)
        return this.equals((createOrder_result)that);
      return false;
    }

    public boolean equals(createOrder_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createOrder_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOrder_resultStandardScheme getScheme() {
        return new createOrder_resultStandardScheme();
      }
    }

    private static class createOrder_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createOrder_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createOrder_resultTupleScheme getScheme() {
        return new createOrder_resultTupleScheme();
      }
    }

    private static class createOrder_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class disposeOrder_args implements org.apache.thrift.TBase<disposeOrder_args, disposeOrder_args._Fields>, java.io.Serializable, Cloneable, Comparable<disposeOrder_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disposeOrder_args");

    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.I64, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new disposeOrder_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new disposeOrder_argsTupleSchemeFactory();

    public long orderId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ORDER_ID((short)1, "orderId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ORDERID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disposeOrder_args.class, metaDataMap);
    }

    public disposeOrder_args() {
    }

    public disposeOrder_args(
      long orderId)
    {
      this();
      this.orderId = orderId;
      setOrderIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disposeOrder_args(disposeOrder_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.orderId = other.orderId;
    }

    public disposeOrder_args deepCopy() {
      return new disposeOrder_args(this);
    }

    @Override
    public void clear() {
      setOrderIdIsSet(false);
      this.orderId = 0;
    }

    public long getOrderId() {
      return this.orderId;
    }

    public disposeOrder_args setOrderId(long orderId) {
      this.orderId = orderId;
      setOrderIdIsSet(true);
      return this;
    }

    public void unsetOrderId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
    public boolean isSetOrderId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDERID_ISSET_ID);
    }

    public void setOrderIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDERID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ORDER_ID:
        if (value == null) {
          unsetOrderId();
        } else {
          setOrderId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ORDER_ID:
        return getOrderId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ORDER_ID:
        return isSetOrderId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof disposeOrder_args)
        return this.equals((disposeOrder_args)that);
      return false;
    }

    public boolean equals(disposeOrder_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_orderId = true;
      boolean that_present_orderId = true;
      if (this_present_orderId || that_present_orderId) {
        if (!(this_present_orderId && that_present_orderId))
          return false;
        if (this.orderId != that.orderId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(orderId);

      return hashCode;
    }

    @Override
    public int compareTo(disposeOrder_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrderId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("disposeOrder_args(");
      boolean first = true;

      sb.append("orderId:");
      sb.append(this.orderId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disposeOrder_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disposeOrder_argsStandardScheme getScheme() {
        return new disposeOrder_argsStandardScheme();
      }
    }

    private static class disposeOrder_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<disposeOrder_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disposeOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.orderId = iprot.readI64();
                struct.setOrderIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disposeOrder_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeI64(struct.orderId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disposeOrder_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disposeOrder_argsTupleScheme getScheme() {
        return new disposeOrder_argsTupleScheme();
      }
    }

    private static class disposeOrder_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<disposeOrder_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disposeOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetOrderId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetOrderId()) {
          oprot.writeI64(struct.orderId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disposeOrder_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.orderId = iprot.readI64();
          struct.setOrderIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class disposeOrder_result implements org.apache.thrift.TBase<disposeOrder_result, disposeOrder_result._Fields>, java.io.Serializable, Cloneable, Comparable<disposeOrder_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("disposeOrder_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new disposeOrder_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new disposeOrder_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(disposeOrder_result.class, metaDataMap);
    }

    public disposeOrder_result() {
    }

    public disposeOrder_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public disposeOrder_result(disposeOrder_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public disposeOrder_result deepCopy() {
      return new disposeOrder_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public disposeOrder_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public disposeOrder_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public disposeOrder_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof disposeOrder_result)
        return this.equals((disposeOrder_result)that);
      return false;
    }

    public boolean equals(disposeOrder_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(disposeOrder_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("disposeOrder_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class disposeOrder_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disposeOrder_resultStandardScheme getScheme() {
        return new disposeOrder_resultStandardScheme();
      }
    }

    private static class disposeOrder_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<disposeOrder_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, disposeOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, disposeOrder_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class disposeOrder_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public disposeOrder_resultTupleScheme getScheme() {
        return new disposeOrder_resultTupleScheme();
      }
    }

    private static class disposeOrder_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<disposeOrder_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, disposeOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, disposeOrder_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDashboardInfo_args implements org.apache.thrift.TBase<getDashboardInfo_args, getDashboardInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getDashboardInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDashboardInfo_args");

    private static final org.apache.thrift.protocol.TField UID_FIELD_DESC = new org.apache.thrift.protocol.TField("uid", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField LIMIT_FIELD_DESC = new org.apache.thrift.protocol.TField("limit", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDashboardInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDashboardInfo_argsTupleSchemeFactory();

    public java.lang.String uid; // required
    public int limit; // required
    public int offset; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UID((short)1, "uid"),
      LIMIT((short)2, "limit"),
      OFFSET((short)3, "offset");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UID
            return UID;
          case 2: // LIMIT
            return LIMIT;
          case 3: // OFFSET
            return OFFSET;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __LIMIT_ISSET_ID = 0;
    private static final int __OFFSET_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UID, new org.apache.thrift.meta_data.FieldMetaData("uid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.LIMIT, new org.apache.thrift.meta_data.FieldMetaData("limit", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDashboardInfo_args.class, metaDataMap);
    }

    public getDashboardInfo_args() {
    }

    public getDashboardInfo_args(
      java.lang.String uid,
      int limit,
      int offset)
    {
      this();
      this.uid = uid;
      this.limit = limit;
      setLimitIsSet(true);
      this.offset = offset;
      setOffsetIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDashboardInfo_args(getDashboardInfo_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUid()) {
        this.uid = other.uid;
      }
      this.limit = other.limit;
      this.offset = other.offset;
    }

    public getDashboardInfo_args deepCopy() {
      return new getDashboardInfo_args(this);
    }

    @Override
    public void clear() {
      this.uid = null;
      setLimitIsSet(false);
      this.limit = 0;
      setOffsetIsSet(false);
      this.offset = 0;
    }

    public java.lang.String getUid() {
      return this.uid;
    }

    public getDashboardInfo_args setUid(java.lang.String uid) {
      this.uid = uid;
      return this;
    }

    public void unsetUid() {
      this.uid = null;
    }

    /** Returns true if field uid is set (has been assigned a value) and false otherwise */
    public boolean isSetUid() {
      return this.uid != null;
    }

    public void setUidIsSet(boolean value) {
      if (!value) {
        this.uid = null;
      }
    }

    public int getLimit() {
      return this.limit;
    }

    public getDashboardInfo_args setLimit(int limit) {
      this.limit = limit;
      setLimitIsSet(true);
      return this;
    }

    public void unsetLimit() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    /** Returns true if field limit is set (has been assigned a value) and false otherwise */
    public boolean isSetLimit() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LIMIT_ISSET_ID);
    }

    public void setLimitIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LIMIT_ISSET_ID, value);
    }

    public int getOffset() {
      return this.offset;
    }

    public getDashboardInfo_args setOffset(int offset) {
      this.offset = offset;
      setOffsetIsSet(true);
      return this;
    }

    public void unsetOffset() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    /** Returns true if field offset is set (has been assigned a value) and false otherwise */
    public boolean isSetOffset() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
    }

    public void setOffsetIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case UID:
        if (value == null) {
          unsetUid();
        } else {
          setUid((java.lang.String)value);
        }
        break;

      case LIMIT:
        if (value == null) {
          unsetLimit();
        } else {
          setLimit((java.lang.Integer)value);
        }
        break;

      case OFFSET:
        if (value == null) {
          unsetOffset();
        } else {
          setOffset((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case UID:
        return getUid();

      case LIMIT:
        return getLimit();

      case OFFSET:
        return getOffset();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case UID:
        return isSetUid();
      case LIMIT:
        return isSetLimit();
      case OFFSET:
        return isSetOffset();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDashboardInfo_args)
        return this.equals((getDashboardInfo_args)that);
      return false;
    }

    public boolean equals(getDashboardInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_uid = true && this.isSetUid();
      boolean that_present_uid = true && that.isSetUid();
      if (this_present_uid || that_present_uid) {
        if (!(this_present_uid && that_present_uid))
          return false;
        if (!this.uid.equals(that.uid))
          return false;
      }

      boolean this_present_limit = true;
      boolean that_present_limit = true;
      if (this_present_limit || that_present_limit) {
        if (!(this_present_limit && that_present_limit))
          return false;
        if (this.limit != that.limit)
          return false;
      }

      boolean this_present_offset = true;
      boolean that_present_offset = true;
      if (this_present_offset || that_present_offset) {
        if (!(this_present_offset && that_present_offset))
          return false;
        if (this.offset != that.offset)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUid()) ? 131071 : 524287);
      if (isSetUid())
        hashCode = hashCode * 8191 + uid.hashCode();

      hashCode = hashCode * 8191 + limit;

      hashCode = hashCode * 8191 + offset;

      return hashCode;
    }

    @Override
    public int compareTo(getDashboardInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUid()).compareTo(other.isSetUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uid, other.uid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetLimit()).compareTo(other.isSetLimit());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLimit()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.limit, other.limit);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOffset()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDashboardInfo_args(");
      boolean first = true;

      sb.append("uid:");
      if (this.uid == null) {
        sb.append("null");
      } else {
        sb.append(this.uid);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("limit:");
      sb.append(this.limit);
      first = false;
      if (!first) sb.append(", ");
      sb.append("offset:");
      sb.append(this.offset);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDashboardInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDashboardInfo_argsStandardScheme getScheme() {
        return new getDashboardInfo_argsStandardScheme();
      }
    }

    private static class getDashboardInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDashboardInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDashboardInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uid = iprot.readString();
                struct.setUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // LIMIT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.limit = iprot.readI32();
                struct.setLimitIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OFFSET
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.offset = iprot.readI32();
                struct.setOffsetIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDashboardInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uid != null) {
          oprot.writeFieldBegin(UID_FIELD_DESC);
          oprot.writeString(struct.uid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(LIMIT_FIELD_DESC);
        oprot.writeI32(struct.limit);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OFFSET_FIELD_DESC);
        oprot.writeI32(struct.offset);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDashboardInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDashboardInfo_argsTupleScheme getScheme() {
        return new getDashboardInfo_argsTupleScheme();
      }
    }

    private static class getDashboardInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDashboardInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDashboardInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUid()) {
          optionals.set(0);
        }
        if (struct.isSetLimit()) {
          optionals.set(1);
        }
        if (struct.isSetOffset()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUid()) {
          oprot.writeString(struct.uid);
        }
        if (struct.isSetLimit()) {
          oprot.writeI32(struct.limit);
        }
        if (struct.isSetOffset()) {
          oprot.writeI32(struct.offset);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDashboardInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uid = iprot.readString();
          struct.setUidIsSet(true);
        }
        if (incoming.get(1)) {
          struct.limit = iprot.readI32();
          struct.setLimitIsSet(true);
        }
        if (incoming.get(2)) {
          struct.offset = iprot.readI32();
          struct.setOffsetIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getDashboardInfo_result implements org.apache.thrift.TBase<getDashboardInfo_result, getDashboardInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getDashboardInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getDashboardInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getDashboardInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getDashboardInfo_resultTupleSchemeFactory();

    public TDashboardInfo success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TDashboardInfo.class)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getDashboardInfo_result.class, metaDataMap);
    }

    public getDashboardInfo_result() {
    }

    public getDashboardInfo_result(
      TDashboardInfo success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getDashboardInfo_result(getDashboardInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = new TDashboardInfo(other.success);
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getDashboardInfo_result deepCopy() {
      return new getDashboardInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public TDashboardInfo getSuccess() {
      return this.success;
    }

    public getDashboardInfo_result setSuccess(TDashboardInfo success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getDashboardInfo_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getDashboardInfo_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((TDashboardInfo)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getDashboardInfo_result)
        return this.equals((getDashboardInfo_result)that);
      return false;
    }

    public boolean equals(getDashboardInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getDashboardInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getDashboardInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getDashboardInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDashboardInfo_resultStandardScheme getScheme() {
        return new getDashboardInfo_resultStandardScheme();
      }
    }

    private static class getDashboardInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getDashboardInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getDashboardInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new TDashboardInfo();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getDashboardInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getDashboardInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getDashboardInfo_resultTupleScheme getScheme() {
        return new getDashboardInfo_resultTupleScheme();
      }
    }

    private static class getDashboardInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getDashboardInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getDashboardInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getDashboardInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = new TDashboardInfo();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAreaLevelFirstMulti_args implements org.apache.thrift.TBase<getAreaLevelFirstMulti_args, getAreaLevelFirstMulti_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAreaLevelFirstMulti_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAreaLevelFirstMulti_args");

    private static final org.apache.thrift.protocol.TField GIDS_FIELD_DESC = new org.apache.thrift.protocol.TField("gids", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAreaLevelFirstMulti_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAreaLevelFirstMulti_argsTupleSchemeFactory();

    public java.util.List<java.lang.String> gids; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GIDS((short)1, "gids");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GIDS
            return GIDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GIDS, new org.apache.thrift.meta_data.FieldMetaData("gids", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAreaLevelFirstMulti_args.class, metaDataMap);
    }

    public getAreaLevelFirstMulti_args() {
    }

    public getAreaLevelFirstMulti_args(
      java.util.List<java.lang.String> gids)
    {
      this();
      this.gids = gids;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAreaLevelFirstMulti_args(getAreaLevelFirstMulti_args other) {
      if (other.isSetGids()) {
        java.util.List<java.lang.String> __this__gids = new java.util.ArrayList<java.lang.String>(other.gids);
        this.gids = __this__gids;
      }
    }

    public getAreaLevelFirstMulti_args deepCopy() {
      return new getAreaLevelFirstMulti_args(this);
    }

    @Override
    public void clear() {
      this.gids = null;
    }

    public int getGidsSize() {
      return (this.gids == null) ? 0 : this.gids.size();
    }

    public java.util.Iterator<java.lang.String> getGidsIterator() {
      return (this.gids == null) ? null : this.gids.iterator();
    }

    public void addToGids(java.lang.String elem) {
      if (this.gids == null) {
        this.gids = new java.util.ArrayList<java.lang.String>();
      }
      this.gids.add(elem);
    }

    public java.util.List<java.lang.String> getGids() {
      return this.gids;
    }

    public getAreaLevelFirstMulti_args setGids(java.util.List<java.lang.String> gids) {
      this.gids = gids;
      return this;
    }

    public void unsetGids() {
      this.gids = null;
    }

    /** Returns true if field gids is set (has been assigned a value) and false otherwise */
    public boolean isSetGids() {
      return this.gids != null;
    }

    public void setGidsIsSet(boolean value) {
      if (!value) {
        this.gids = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case GIDS:
        if (value == null) {
          unsetGids();
        } else {
          setGids((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case GIDS:
        return getGids();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case GIDS:
        return isSetGids();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAreaLevelFirstMulti_args)
        return this.equals((getAreaLevelFirstMulti_args)that);
      return false;
    }

    public boolean equals(getAreaLevelFirstMulti_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_gids = true && this.isSetGids();
      boolean that_present_gids = true && that.isSetGids();
      if (this_present_gids || that_present_gids) {
        if (!(this_present_gids && that_present_gids))
          return false;
        if (!this.gids.equals(that.gids))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetGids()) ? 131071 : 524287);
      if (isSetGids())
        hashCode = hashCode * 8191 + gids.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAreaLevelFirstMulti_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetGids()).compareTo(other.isSetGids());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGids()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gids, other.gids);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAreaLevelFirstMulti_args(");
      boolean first = true;

      sb.append("gids:");
      if (this.gids == null) {
        sb.append("null");
      } else {
        sb.append(this.gids);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAreaLevelFirstMulti_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAreaLevelFirstMulti_argsStandardScheme getScheme() {
        return new getAreaLevelFirstMulti_argsStandardScheme();
      }
    }

    private static class getAreaLevelFirstMulti_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAreaLevelFirstMulti_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAreaLevelFirstMulti_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GIDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list202 = iprot.readListBegin();
                  struct.gids = new java.util.ArrayList<java.lang.String>(_list202.size);
                  java.lang.String _elem203;
                  for (int _i204 = 0; _i204 < _list202.size; ++_i204)
                  {
                    _elem203 = iprot.readString();
                    struct.gids.add(_elem203);
                  }
                  iprot.readListEnd();
                }
                struct.setGidsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAreaLevelFirstMulti_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.gids != null) {
          oprot.writeFieldBegin(GIDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.gids.size()));
            for (java.lang.String _iter205 : struct.gids)
            {
              oprot.writeString(_iter205);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAreaLevelFirstMulti_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAreaLevelFirstMulti_argsTupleScheme getScheme() {
        return new getAreaLevelFirstMulti_argsTupleScheme();
      }
    }

    private static class getAreaLevelFirstMulti_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAreaLevelFirstMulti_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAreaLevelFirstMulti_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetGids()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetGids()) {
          {
            oprot.writeI32(struct.gids.size());
            for (java.lang.String _iter206 : struct.gids)
            {
              oprot.writeString(_iter206);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAreaLevelFirstMulti_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list207 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.gids = new java.util.ArrayList<java.lang.String>(_list207.size);
            java.lang.String _elem208;
            for (int _i209 = 0; _i209 < _list207.size; ++_i209)
            {
              _elem208 = iprot.readString();
              struct.gids.add(_elem208);
            }
          }
          struct.setGidsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAreaLevelFirstMulti_result implements org.apache.thrift.TBase<getAreaLevelFirstMulti_result, getAreaLevelFirstMulti_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAreaLevelFirstMulti_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAreaLevelFirstMulti_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAreaLevelFirstMulti_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAreaLevelFirstMulti_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,TArea> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TArea.class))));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAreaLevelFirstMulti_result.class, metaDataMap);
    }

    public getAreaLevelFirstMulti_result() {
    }

    public getAreaLevelFirstMulti_result(
      java.util.Map<java.lang.String,TArea> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAreaLevelFirstMulti_result(getAreaLevelFirstMulti_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,TArea> __this__success = new java.util.HashMap<java.lang.String,TArea>(other.success.size());
        for (java.util.Map.Entry<java.lang.String, TArea> other_element : other.success.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          TArea other_element_value = other_element.getValue();

          java.lang.String __this__success_copy_key = other_element_key;

          TArea __this__success_copy_value = new TArea(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getAreaLevelFirstMulti_result deepCopy() {
      return new getAreaLevelFirstMulti_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, TArea val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,TArea>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,TArea> getSuccess() {
      return this.success;
    }

    public getAreaLevelFirstMulti_result setSuccess(java.util.Map<java.lang.String,TArea> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getAreaLevelFirstMulti_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getAreaLevelFirstMulti_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,TArea>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAreaLevelFirstMulti_result)
        return this.equals((getAreaLevelFirstMulti_result)that);
      return false;
    }

    public boolean equals(getAreaLevelFirstMulti_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAreaLevelFirstMulti_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAreaLevelFirstMulti_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAreaLevelFirstMulti_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAreaLevelFirstMulti_resultStandardScheme getScheme() {
        return new getAreaLevelFirstMulti_resultStandardScheme();
      }
    }

    private static class getAreaLevelFirstMulti_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAreaLevelFirstMulti_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAreaLevelFirstMulti_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map210 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,TArea>(2*_map210.size);
                  java.lang.String _key211;
                  TArea _val212;
                  for (int _i213 = 0; _i213 < _map210.size; ++_i213)
                  {
                    _key211 = iprot.readString();
                    _val212 = new TArea();
                    _val212.read(iprot);
                    struct.success.put(_key211, _val212);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAreaLevelFirstMulti_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, TArea> _iter214 : struct.success.entrySet())
            {
              oprot.writeString(_iter214.getKey());
              _iter214.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAreaLevelFirstMulti_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAreaLevelFirstMulti_resultTupleScheme getScheme() {
        return new getAreaLevelFirstMulti_resultTupleScheme();
      }
    }

    private static class getAreaLevelFirstMulti_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAreaLevelFirstMulti_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAreaLevelFirstMulti_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, TArea> _iter215 : struct.success.entrySet())
            {
              oprot.writeString(_iter215.getKey());
              _iter215.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAreaLevelFirstMulti_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map216 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,TArea>(2*_map216.size);
            java.lang.String _key217;
            TArea _val218;
            for (int _i219 = 0; _i219 < _map216.size; ++_i219)
            {
              _key217 = iprot.readString();
              _val218 = new TArea();
              _val218.read(iprot);
              struct.success.put(_key217, _val218);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllCategories_args implements org.apache.thrift.TBase<getAllCategories_args, getAllCategories_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllCategories_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllCategories_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllCategories_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllCategories_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllCategories_args.class, metaDataMap);
    }

    public getAllCategories_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllCategories_args(getAllCategories_args other) {
    }

    public getAllCategories_args deepCopy() {
      return new getAllCategories_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllCategories_args)
        return this.equals((getAllCategories_args)that);
      return false;
    }

    public boolean equals(getAllCategories_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getAllCategories_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllCategories_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllCategories_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllCategories_argsStandardScheme getScheme() {
        return new getAllCategories_argsStandardScheme();
      }
    }

    private static class getAllCategories_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllCategories_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllCategories_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllCategories_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllCategories_argsTupleScheme getScheme() {
        return new getAllCategories_argsTupleScheme();
      }
    }

    private static class getAllCategories_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllCategories_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllCategories_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllCategories_result implements org.apache.thrift.TBase<getAllCategories_result, getAllCategories_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllCategories_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllCategories_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.MAP, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllCategories_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllCategories_resultTupleSchemeFactory();

    public java.util.Map<java.lang.String,TCategory> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TCategory.class))));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllCategories_result.class, metaDataMap);
    }

    public getAllCategories_result() {
    }

    public getAllCategories_result(
      java.util.Map<java.lang.String,TCategory> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllCategories_result(getAllCategories_result other) {
      if (other.isSetSuccess()) {
        java.util.Map<java.lang.String,TCategory> __this__success = new java.util.HashMap<java.lang.String,TCategory>(other.success.size());
        for (java.util.Map.Entry<java.lang.String, TCategory> other_element : other.success.entrySet()) {

          java.lang.String other_element_key = other_element.getKey();
          TCategory other_element_value = other_element.getValue();

          java.lang.String __this__success_copy_key = other_element_key;

          TCategory __this__success_copy_value = new TCategory(other_element_value);

          __this__success.put(__this__success_copy_key, __this__success_copy_value);
        }
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getAllCategories_result deepCopy() {
      return new getAllCategories_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public void putToSuccess(java.lang.String key, TCategory val) {
      if (this.success == null) {
        this.success = new java.util.HashMap<java.lang.String,TCategory>();
      }
      this.success.put(key, val);
    }

    public java.util.Map<java.lang.String,TCategory> getSuccess() {
      return this.success;
    }

    public getAllCategories_result setSuccess(java.util.Map<java.lang.String,TCategory> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getAllCategories_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getAllCategories_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.Map<java.lang.String,TCategory>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllCategories_result)
        return this.equals((getAllCategories_result)that);
      return false;
    }

    public boolean equals(getAllCategories_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllCategories_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllCategories_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllCategories_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllCategories_resultStandardScheme getScheme() {
        return new getAllCategories_resultStandardScheme();
      }
    }

    private static class getAllCategories_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllCategories_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map220 = iprot.readMapBegin();
                  struct.success = new java.util.HashMap<java.lang.String,TCategory>(2*_map220.size);
                  java.lang.String _key221;
                  TCategory _val222;
                  for (int _i223 = 0; _i223 < _map220.size; ++_i223)
                  {
                    _key221 = iprot.readString();
                    _val222 = new TCategory();
                    _val222.read(iprot);
                    struct.success.put(_key221, _val222);
                  }
                  iprot.readMapEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllCategories_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (java.util.Map.Entry<java.lang.String, TCategory> _iter224 : struct.success.entrySet())
            {
              oprot.writeString(_iter224.getKey());
              _iter224.getValue().write(oprot);
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllCategories_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllCategories_resultTupleScheme getScheme() {
        return new getAllCategories_resultTupleScheme();
      }
    }

    private static class getAllCategories_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllCategories_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map.Entry<java.lang.String, TCategory> _iter225 : struct.success.entrySet())
            {
              oprot.writeString(_iter225.getKey());
              _iter225.getValue().write(oprot);
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllCategories_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TMap _map226 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.HashMap<java.lang.String,TCategory>(2*_map226.size);
            java.lang.String _key227;
            TCategory _val228;
            for (int _i229 = 0; _i229 < _map226.size; ++_i229)
            {
              _key227 = iprot.readString();
              _val228 = new TCategory();
              _val228.read(iprot);
              struct.success.put(_key227, _val228);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSchema_args implements org.apache.thrift.TBase<getSchema_args, getSchema_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSchema_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSchema_args");

    private static final org.apache.thrift.protocol.TField CATEGORY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("categoryId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField AREA_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("areaId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSchema_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSchema_argsTupleSchemeFactory();

    public java.lang.String categoryId; // required
    public java.lang.String areaId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CATEGORY_ID((short)1, "categoryId"),
      AREA_ID((short)2, "areaId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CATEGORY_ID
            return CATEGORY_ID;
          case 2: // AREA_ID
            return AREA_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CATEGORY_ID, new org.apache.thrift.meta_data.FieldMetaData("categoryId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.AREA_ID, new org.apache.thrift.meta_data.FieldMetaData("areaId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSchema_args.class, metaDataMap);
    }

    public getSchema_args() {
    }

    public getSchema_args(
      java.lang.String categoryId,
      java.lang.String areaId)
    {
      this();
      this.categoryId = categoryId;
      this.areaId = areaId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSchema_args(getSchema_args other) {
      if (other.isSetCategoryId()) {
        this.categoryId = other.categoryId;
      }
      if (other.isSetAreaId()) {
        this.areaId = other.areaId;
      }
    }

    public getSchema_args deepCopy() {
      return new getSchema_args(this);
    }

    @Override
    public void clear() {
      this.categoryId = null;
      this.areaId = null;
    }

    public java.lang.String getCategoryId() {
      return this.categoryId;
    }

    public getSchema_args setCategoryId(java.lang.String categoryId) {
      this.categoryId = categoryId;
      return this;
    }

    public void unsetCategoryId() {
      this.categoryId = null;
    }

    /** Returns true if field categoryId is set (has been assigned a value) and false otherwise */
    public boolean isSetCategoryId() {
      return this.categoryId != null;
    }

    public void setCategoryIdIsSet(boolean value) {
      if (!value) {
        this.categoryId = null;
      }
    }

    public java.lang.String getAreaId() {
      return this.areaId;
    }

    public getSchema_args setAreaId(java.lang.String areaId) {
      this.areaId = areaId;
      return this;
    }

    public void unsetAreaId() {
      this.areaId = null;
    }

    /** Returns true if field areaId is set (has been assigned a value) and false otherwise */
    public boolean isSetAreaId() {
      return this.areaId != null;
    }

    public void setAreaIdIsSet(boolean value) {
      if (!value) {
        this.areaId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CATEGORY_ID:
        if (value == null) {
          unsetCategoryId();
        } else {
          setCategoryId((java.lang.String)value);
        }
        break;

      case AREA_ID:
        if (value == null) {
          unsetAreaId();
        } else {
          setAreaId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CATEGORY_ID:
        return getCategoryId();

      case AREA_ID:
        return getAreaId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CATEGORY_ID:
        return isSetCategoryId();
      case AREA_ID:
        return isSetAreaId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchema_args)
        return this.equals((getSchema_args)that);
      return false;
    }

    public boolean equals(getSchema_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_categoryId = true && this.isSetCategoryId();
      boolean that_present_categoryId = true && that.isSetCategoryId();
      if (this_present_categoryId || that_present_categoryId) {
        if (!(this_present_categoryId && that_present_categoryId))
          return false;
        if (!this.categoryId.equals(that.categoryId))
          return false;
      }

      boolean this_present_areaId = true && this.isSetAreaId();
      boolean that_present_areaId = true && that.isSetAreaId();
      if (this_present_areaId || that_present_areaId) {
        if (!(this_present_areaId && that_present_areaId))
          return false;
        if (!this.areaId.equals(that.areaId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCategoryId()) ? 131071 : 524287);
      if (isSetCategoryId())
        hashCode = hashCode * 8191 + categoryId.hashCode();

      hashCode = hashCode * 8191 + ((isSetAreaId()) ? 131071 : 524287);
      if (isSetAreaId())
        hashCode = hashCode * 8191 + areaId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSchema_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCategoryId()).compareTo(other.isSetCategoryId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCategoryId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.categoryId, other.categoryId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAreaId()).compareTo(other.isSetAreaId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAreaId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.areaId, other.areaId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSchema_args(");
      boolean first = true;

      sb.append("categoryId:");
      if (this.categoryId == null) {
        sb.append("null");
      } else {
        sb.append(this.categoryId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("areaId:");
      if (this.areaId == null) {
        sb.append("null");
      } else {
        sb.append(this.areaId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchema_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSchema_argsStandardScheme getScheme() {
        return new getSchema_argsStandardScheme();
      }
    }

    private static class getSchema_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSchema_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CATEGORY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.categoryId = iprot.readString();
                struct.setCategoryIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // AREA_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.areaId = iprot.readString();
                struct.setAreaIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSchema_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.categoryId != null) {
          oprot.writeFieldBegin(CATEGORY_ID_FIELD_DESC);
          oprot.writeString(struct.categoryId);
          oprot.writeFieldEnd();
        }
        if (struct.areaId != null) {
          oprot.writeFieldBegin(AREA_ID_FIELD_DESC);
          oprot.writeString(struct.areaId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchema_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSchema_argsTupleScheme getScheme() {
        return new getSchema_argsTupleScheme();
      }
    }

    private static class getSchema_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSchema_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCategoryId()) {
          optionals.set(0);
        }
        if (struct.isSetAreaId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCategoryId()) {
          oprot.writeString(struct.categoryId);
        }
        if (struct.isSetAreaId()) {
          oprot.writeString(struct.areaId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSchema_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.categoryId = iprot.readString();
          struct.setCategoryIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.areaId = iprot.readString();
          struct.setAreaIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSchema_result implements org.apache.thrift.TBase<getSchema_result, getSchema_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSchema_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSchema_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSchema_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSchema_resultTupleSchemeFactory();

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
                  new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSchema_result.class, metaDataMap);
    }

    public getSchema_result() {
    }

    public getSchema_result(
      java.util.List<java.util.Map<java.lang.String,java.lang.String>> success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSchema_result(getSchema_result other) {
      if (other.isSetSuccess()) {
        java.util.List<java.util.Map<java.lang.String,java.lang.String>> __this__success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(other.success.size());
        for (java.util.Map<java.lang.String,java.lang.String> other_element : other.success) {
          java.util.Map<java.lang.String,java.lang.String> __this__success_copy = new java.util.HashMap<java.lang.String,java.lang.String>(other_element);
          __this__success.add(__this__success_copy);
        }
        this.success = __this__success;
      }
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public getSchema_result deepCopy() {
      return new getSchema_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<java.util.Map<java.lang.String,java.lang.String>> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(java.util.Map<java.lang.String,java.lang.String> elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>();
      }
      this.success.add(elem);
    }

    public java.util.List<java.util.Map<java.lang.String,java.lang.String>> getSuccess() {
      return this.success;
    }

    public getSchema_result setSuccess(java.util.List<java.util.Map<java.lang.String,java.lang.String>> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public getSchema_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public getSchema_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<java.util.Map<java.lang.String,java.lang.String>>)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSchema_result)
        return this.equals((getSchema_result)that);
      return false;
    }

    public boolean equals(getSchema_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSchema_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSchema_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSchema_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSchema_resultStandardScheme getScheme() {
        return new getSchema_resultStandardScheme();
      }
    }

    private static class getSchema_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSchema_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list230 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list230.size);
                  java.util.Map<java.lang.String,java.lang.String> _elem231;
                  for (int _i232 = 0; _i232 < _list230.size; ++_i232)
                  {
                    {
                      org.apache.thrift.protocol.TMap _map233 = iprot.readMapBegin();
                      _elem231 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map233.size);
                      java.lang.String _key234;
                      java.lang.String _val235;
                      for (int _i236 = 0; _i236 < _map233.size; ++_i236)
                      {
                        _key234 = iprot.readString();
                        _val235 = iprot.readString();
                        _elem231.put(_key234, _val235);
                      }
                      iprot.readMapEnd();
                    }
                    struct.success.add(_elem231);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSchema_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, struct.success.size()));
            for (java.util.Map<java.lang.String,java.lang.String> _iter237 : struct.success)
            {
              {
                oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, _iter237.size()));
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter238 : _iter237.entrySet())
                {
                  oprot.writeString(_iter238.getKey());
                  oprot.writeString(_iter238.getValue());
                }
                oprot.writeMapEnd();
              }
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSchema_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSchema_resultTupleScheme getScheme() {
        return new getSchema_resultTupleScheme();
      }
    }

    private static class getSchema_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSchema_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (java.util.Map<java.lang.String,java.lang.String> _iter239 : struct.success)
            {
              {
                oprot.writeI32(_iter239.size());
                for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter240 : _iter239.entrySet())
                {
                  oprot.writeString(_iter240.getKey());
                  oprot.writeString(_iter240.getValue());
                }
              }
            }
          }
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSchema_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list241 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.MAP, iprot.readI32());
            struct.success = new java.util.ArrayList<java.util.Map<java.lang.String,java.lang.String>>(_list241.size);
            java.util.Map<java.lang.String,java.lang.String> _elem242;
            for (int _i243 = 0; _i243 < _list241.size; ++_i243)
            {
              {
                org.apache.thrift.protocol.TMap _map244 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
                _elem242 = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map244.size);
                java.lang.String _key245;
                java.lang.String _val246;
                for (int _i247 = 0; _i247 < _map244.size; ++_i247)
                {
                  _key245 = iprot.readString();
                  _val246 = iprot.readString();
                  _elem242.put(_key245, _val246);
                }
              }
              struct.success.add(_elem242);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class log_args implements org.apache.thrift.TBase<log_args, log_args._Fields>, java.io.Serializable, Cloneable, Comparable<log_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("log_args");

    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField SITE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("siteId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField OBJECT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("objectId", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField OBJECT_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("objectInfo", org.apache.thrift.protocol.TType.STRING, (short)5);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField ATTRIBUTE_DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("attributeData", org.apache.thrift.protocol.TType.MAP, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new log_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new log_argsTupleSchemeFactory();

    public int type; // required
    public java.lang.String siteId; // required
    public java.lang.String userId; // required
    public java.lang.String objectId; // required
    public java.lang.String objectInfo; // required
    public java.lang.String description; // required
    public java.util.Map<java.lang.String,java.lang.String> attributeData; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TYPE((short)1, "type"),
      SITE_ID((short)2, "siteId"),
      USER_ID((short)3, "userId"),
      OBJECT_ID((short)4, "objectId"),
      OBJECT_INFO((short)5, "objectInfo"),
      DESCRIPTION((short)6, "description"),
      ATTRIBUTE_DATA((short)7, "attributeData");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TYPE
            return TYPE;
          case 2: // SITE_ID
            return SITE_ID;
          case 3: // USER_ID
            return USER_ID;
          case 4: // OBJECT_ID
            return OBJECT_ID;
          case 5: // OBJECT_INFO
            return OBJECT_INFO;
          case 6: // DESCRIPTION
            return DESCRIPTION;
          case 7: // ATTRIBUTE_DATA
            return ATTRIBUTE_DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TYPE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.SITE_ID, new org.apache.thrift.meta_data.FieldMetaData("siteId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OBJECT_ID, new org.apache.thrift.meta_data.FieldMetaData("objectId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OBJECT_INFO, new org.apache.thrift.meta_data.FieldMetaData("objectInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ATTRIBUTE_DATA, new org.apache.thrift.meta_data.FieldMetaData("attributeData", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(log_args.class, metaDataMap);
    }

    public log_args() {
    }

    public log_args(
      int type,
      java.lang.String siteId,
      java.lang.String userId,
      java.lang.String objectId,
      java.lang.String objectInfo,
      java.lang.String description,
      java.util.Map<java.lang.String,java.lang.String> attributeData)
    {
      this();
      this.type = type;
      setTypeIsSet(true);
      this.siteId = siteId;
      this.userId = userId;
      this.objectId = objectId;
      this.objectInfo = objectInfo;
      this.description = description;
      this.attributeData = attributeData;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log_args(log_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.type = other.type;
      if (other.isSetSiteId()) {
        this.siteId = other.siteId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
      if (other.isSetObjectId()) {
        this.objectId = other.objectId;
      }
      if (other.isSetObjectInfo()) {
        this.objectInfo = other.objectInfo;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
      if (other.isSetAttributeData()) {
        java.util.Map<java.lang.String,java.lang.String> __this__attributeData = new java.util.HashMap<java.lang.String,java.lang.String>(other.attributeData);
        this.attributeData = __this__attributeData;
      }
    }

    public log_args deepCopy() {
      return new log_args(this);
    }

    @Override
    public void clear() {
      setTypeIsSet(false);
      this.type = 0;
      this.siteId = null;
      this.userId = null;
      this.objectId = null;
      this.objectInfo = null;
      this.description = null;
      this.attributeData = null;
    }

    public int getType() {
      return this.type;
    }

    public log_args setType(int type) {
      this.type = type;
      setTypeIsSet(true);
      return this;
    }

    public void unsetType() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
    }

    public void setTypeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
    }

    public java.lang.String getSiteId() {
      return this.siteId;
    }

    public log_args setSiteId(java.lang.String siteId) {
      this.siteId = siteId;
      return this;
    }

    public void unsetSiteId() {
      this.siteId = null;
    }

    /** Returns true if field siteId is set (has been assigned a value) and false otherwise */
    public boolean isSetSiteId() {
      return this.siteId != null;
    }

    public void setSiteIdIsSet(boolean value) {
      if (!value) {
        this.siteId = null;
      }
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public log_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public java.lang.String getObjectId() {
      return this.objectId;
    }

    public log_args setObjectId(java.lang.String objectId) {
      this.objectId = objectId;
      return this;
    }

    public void unsetObjectId() {
      this.objectId = null;
    }

    /** Returns true if field objectId is set (has been assigned a value) and false otherwise */
    public boolean isSetObjectId() {
      return this.objectId != null;
    }

    public void setObjectIdIsSet(boolean value) {
      if (!value) {
        this.objectId = null;
      }
    }

    public java.lang.String getObjectInfo() {
      return this.objectInfo;
    }

    public log_args setObjectInfo(java.lang.String objectInfo) {
      this.objectInfo = objectInfo;
      return this;
    }

    public void unsetObjectInfo() {
      this.objectInfo = null;
    }

    /** Returns true if field objectInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetObjectInfo() {
      return this.objectInfo != null;
    }

    public void setObjectInfoIsSet(boolean value) {
      if (!value) {
        this.objectInfo = null;
      }
    }

    public java.lang.String getDescription() {
      return this.description;
    }

    public log_args setDescription(java.lang.String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public int getAttributeDataSize() {
      return (this.attributeData == null) ? 0 : this.attributeData.size();
    }

    public void putToAttributeData(java.lang.String key, java.lang.String val) {
      if (this.attributeData == null) {
        this.attributeData = new java.util.HashMap<java.lang.String,java.lang.String>();
      }
      this.attributeData.put(key, val);
    }

    public java.util.Map<java.lang.String,java.lang.String> getAttributeData() {
      return this.attributeData;
    }

    public log_args setAttributeData(java.util.Map<java.lang.String,java.lang.String> attributeData) {
      this.attributeData = attributeData;
      return this;
    }

    public void unsetAttributeData() {
      this.attributeData = null;
    }

    /** Returns true if field attributeData is set (has been assigned a value) and false otherwise */
    public boolean isSetAttributeData() {
      return this.attributeData != null;
    }

    public void setAttributeDataIsSet(boolean value) {
      if (!value) {
        this.attributeData = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((java.lang.Integer)value);
        }
        break;

      case SITE_ID:
        if (value == null) {
          unsetSiteId();
        } else {
          setSiteId((java.lang.String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      case OBJECT_ID:
        if (value == null) {
          unsetObjectId();
        } else {
          setObjectId((java.lang.String)value);
        }
        break;

      case OBJECT_INFO:
        if (value == null) {
          unsetObjectInfo();
        } else {
          setObjectInfo((java.lang.String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((java.lang.String)value);
        }
        break;

      case ATTRIBUTE_DATA:
        if (value == null) {
          unsetAttributeData();
        } else {
          setAttributeData((java.util.Map<java.lang.String,java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TYPE:
        return getType();

      case SITE_ID:
        return getSiteId();

      case USER_ID:
        return getUserId();

      case OBJECT_ID:
        return getObjectId();

      case OBJECT_INFO:
        return getObjectInfo();

      case DESCRIPTION:
        return getDescription();

      case ATTRIBUTE_DATA:
        return getAttributeData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TYPE:
        return isSetType();
      case SITE_ID:
        return isSetSiteId();
      case USER_ID:
        return isSetUserId();
      case OBJECT_ID:
        return isSetObjectId();
      case OBJECT_INFO:
        return isSetObjectInfo();
      case DESCRIPTION:
        return isSetDescription();
      case ATTRIBUTE_DATA:
        return isSetAttributeData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof log_args)
        return this.equals((log_args)that);
      return false;
    }

    public boolean equals(log_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_type = true;
      boolean that_present_type = true;
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (this.type != that.type)
          return false;
      }

      boolean this_present_siteId = true && this.isSetSiteId();
      boolean that_present_siteId = true && that.isSetSiteId();
      if (this_present_siteId || that_present_siteId) {
        if (!(this_present_siteId && that_present_siteId))
          return false;
        if (!this.siteId.equals(that.siteId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      boolean this_present_objectId = true && this.isSetObjectId();
      boolean that_present_objectId = true && that.isSetObjectId();
      if (this_present_objectId || that_present_objectId) {
        if (!(this_present_objectId && that_present_objectId))
          return false;
        if (!this.objectId.equals(that.objectId))
          return false;
      }

      boolean this_present_objectInfo = true && this.isSetObjectInfo();
      boolean that_present_objectInfo = true && that.isSetObjectInfo();
      if (this_present_objectInfo || that_present_objectInfo) {
        if (!(this_present_objectInfo && that_present_objectInfo))
          return false;
        if (!this.objectInfo.equals(that.objectInfo))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      boolean this_present_attributeData = true && this.isSetAttributeData();
      boolean that_present_attributeData = true && that.isSetAttributeData();
      if (this_present_attributeData || that_present_attributeData) {
        if (!(this_present_attributeData && that_present_attributeData))
          return false;
        if (!this.attributeData.equals(that.attributeData))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + type;

      hashCode = hashCode * 8191 + ((isSetSiteId()) ? 131071 : 524287);
      if (isSetSiteId())
        hashCode = hashCode * 8191 + siteId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      hashCode = hashCode * 8191 + ((isSetObjectId()) ? 131071 : 524287);
      if (isSetObjectId())
        hashCode = hashCode * 8191 + objectId.hashCode();

      hashCode = hashCode * 8191 + ((isSetObjectInfo()) ? 131071 : 524287);
      if (isSetObjectInfo())
        hashCode = hashCode * 8191 + objectInfo.hashCode();

      hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
      if (isSetDescription())
        hashCode = hashCode * 8191 + description.hashCode();

      hashCode = hashCode * 8191 + ((isSetAttributeData()) ? 131071 : 524287);
      if (isSetAttributeData())
        hashCode = hashCode * 8191 + attributeData.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(log_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSiteId()).compareTo(other.isSetSiteId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSiteId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.siteId, other.siteId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetObjectId()).compareTo(other.isSetObjectId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjectId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectId, other.objectId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetObjectInfo()).compareTo(other.isSetObjectInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjectInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectInfo, other.objectInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAttributeData()).compareTo(other.isSetAttributeData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAttributeData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attributeData, other.attributeData);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("log_args(");
      boolean first = true;

      sb.append("type:");
      sb.append(this.type);
      first = false;
      if (!first) sb.append(", ");
      sb.append("siteId:");
      if (this.siteId == null) {
        sb.append("null");
      } else {
        sb.append(this.siteId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("objectId:");
      if (this.objectId == null) {
        sb.append("null");
      } else {
        sb.append(this.objectId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("objectInfo:");
      if (this.objectInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.objectInfo);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("attributeData:");
      if (this.attributeData == null) {
        sb.append("null");
      } else {
        sb.append(this.attributeData);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class log_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log_argsStandardScheme getScheme() {
        return new log_argsStandardScheme();
      }
    }

    private static class log_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<log_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = iprot.readI32();
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SITE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.siteId = iprot.readString();
                struct.setSiteIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // OBJECT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.objectId = iprot.readString();
                struct.setObjectIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // OBJECT_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.objectInfo = iprot.readString();
                struct.setObjectInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // ATTRIBUTE_DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
                {
                  org.apache.thrift.protocol.TMap _map248 = iprot.readMapBegin();
                  struct.attributeData = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map248.size);
                  java.lang.String _key249;
                  java.lang.String _val250;
                  for (int _i251 = 0; _i251 < _map248.size; ++_i251)
                  {
                    _key249 = iprot.readString();
                    _val250 = iprot.readString();
                    struct.attributeData.put(_key249, _val250);
                  }
                  iprot.readMapEnd();
                }
                struct.setAttributeDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, log_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type);
        oprot.writeFieldEnd();
        if (struct.siteId != null) {
          oprot.writeFieldBegin(SITE_ID_FIELD_DESC);
          oprot.writeString(struct.siteId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        if (struct.objectId != null) {
          oprot.writeFieldBegin(OBJECT_ID_FIELD_DESC);
          oprot.writeString(struct.objectId);
          oprot.writeFieldEnd();
        }
        if (struct.objectInfo != null) {
          oprot.writeFieldBegin(OBJECT_INFO_FIELD_DESC);
          oprot.writeString(struct.objectInfo);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        if (struct.attributeData != null) {
          oprot.writeFieldBegin(ATTRIBUTE_DATA_FIELD_DESC);
          {
            oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, struct.attributeData.size()));
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter252 : struct.attributeData.entrySet())
            {
              oprot.writeString(_iter252.getKey());
              oprot.writeString(_iter252.getValue());
            }
            oprot.writeMapEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class log_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log_argsTupleScheme getScheme() {
        return new log_argsTupleScheme();
      }
    }

    private static class log_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<log_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetType()) {
          optionals.set(0);
        }
        if (struct.isSetSiteId()) {
          optionals.set(1);
        }
        if (struct.isSetUserId()) {
          optionals.set(2);
        }
        if (struct.isSetObjectId()) {
          optionals.set(3);
        }
        if (struct.isSetObjectInfo()) {
          optionals.set(4);
        }
        if (struct.isSetDescription()) {
          optionals.set(5);
        }
        if (struct.isSetAttributeData()) {
          optionals.set(6);
        }
        oprot.writeBitSet(optionals, 7);
        if (struct.isSetType()) {
          oprot.writeI32(struct.type);
        }
        if (struct.isSetSiteId()) {
          oprot.writeString(struct.siteId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
        if (struct.isSetObjectId()) {
          oprot.writeString(struct.objectId);
        }
        if (struct.isSetObjectInfo()) {
          oprot.writeString(struct.objectInfo);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
        if (struct.isSetAttributeData()) {
          {
            oprot.writeI32(struct.attributeData.size());
            for (java.util.Map.Entry<java.lang.String, java.lang.String> _iter253 : struct.attributeData.entrySet())
            {
              oprot.writeString(_iter253.getKey());
              oprot.writeString(_iter253.getValue());
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, log_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(7);
        if (incoming.get(0)) {
          struct.type = iprot.readI32();
          struct.setTypeIsSet(true);
        }
        if (incoming.get(1)) {
          struct.siteId = iprot.readString();
          struct.setSiteIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.objectId = iprot.readString();
          struct.setObjectIdIsSet(true);
        }
        if (incoming.get(4)) {
          struct.objectInfo = iprot.readString();
          struct.setObjectInfoIsSet(true);
        }
        if (incoming.get(5)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
        if (incoming.get(6)) {
          {
            org.apache.thrift.protocol.TMap _map254 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.attributeData = new java.util.HashMap<java.lang.String,java.lang.String>(2*_map254.size);
            java.lang.String _key255;
            java.lang.String _val256;
            for (int _i257 = 0; _i257 < _map254.size; ++_i257)
            {
              _key255 = iprot.readString();
              _val256 = iprot.readString();
              struct.attributeData.put(_key255, _val256);
            }
          }
          struct.setAttributeDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class log_result implements org.apache.thrift.TBase<log_result, log_result._Fields>, java.io.Serializable, Cloneable, Comparable<log_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("log_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new log_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new log_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(log_result.class, metaDataMap);
    }

    public log_result() {
    }

    public log_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public log_result(log_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public log_result deepCopy() {
      return new log_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public log_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public log_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public log_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof log_result)
        return this.equals((log_result)that);
      return false;
    }

    public boolean equals(log_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(log_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("log_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class log_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log_resultStandardScheme getScheme() {
        return new log_resultStandardScheme();
      }
    }

    private static class log_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<log_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, log_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, log_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class log_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public log_resultTupleScheme getScheme() {
        return new log_resultTupleScheme();
      }
    }

    private static class log_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<log_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, log_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, log_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSiteStatus_args implements org.apache.thrift.TBase<addSiteStatus_args, addSiteStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<addSiteStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSiteStatus_args");

    private static final org.apache.thrift.protocol.TField SITE_FIELD_DESC = new org.apache.thrift.protocol.TField("site", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSiteStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSiteStatus_argsTupleSchemeFactory();

    public java.lang.String site; // required
    /**
     * 
     * @see MoutanSiteStatusType
     */
    public MoutanSiteStatusType type; // required
    public int time; // required
    public int count; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SITE((short)1, "site"),
      /**
       * 
       * @see MoutanSiteStatusType
       */
      TYPE((short)2, "type"),
      TIME((short)3, "time"),
      COUNT((short)4, "count");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SITE
            return SITE;
          case 2: // TYPE
            return TYPE;
          case 3: // TIME
            return TIME;
          case 4: // COUNT
            return COUNT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIME_ISSET_ID = 0;
    private static final int __COUNT_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SITE, new org.apache.thrift.meta_data.FieldMetaData("site", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MoutanSiteStatusType.class)));
      tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSiteStatus_args.class, metaDataMap);
    }

    public addSiteStatus_args() {
    }

    public addSiteStatus_args(
      java.lang.String site,
      MoutanSiteStatusType type,
      int time,
      int count)
    {
      this();
      this.site = site;
      this.type = type;
      this.time = time;
      setTimeIsSet(true);
      this.count = count;
      setCountIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSiteStatus_args(addSiteStatus_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetSite()) {
        this.site = other.site;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      this.time = other.time;
      this.count = other.count;
    }

    public addSiteStatus_args deepCopy() {
      return new addSiteStatus_args(this);
    }

    @Override
    public void clear() {
      this.site = null;
      this.type = null;
      setTimeIsSet(false);
      this.time = 0;
      setCountIsSet(false);
      this.count = 0;
    }

    public java.lang.String getSite() {
      return this.site;
    }

    public addSiteStatus_args setSite(java.lang.String site) {
      this.site = site;
      return this;
    }

    public void unsetSite() {
      this.site = null;
    }

    /** Returns true if field site is set (has been assigned a value) and false otherwise */
    public boolean isSetSite() {
      return this.site != null;
    }

    public void setSiteIsSet(boolean value) {
      if (!value) {
        this.site = null;
      }
    }

    /**
     * 
     * @see MoutanSiteStatusType
     */
    public MoutanSiteStatusType getType() {
      return this.type;
    }

    /**
     * 
     * @see MoutanSiteStatusType
     */
    public addSiteStatus_args setType(MoutanSiteStatusType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public int getTime() {
      return this.time;
    }

    public addSiteStatus_args setTime(int time) {
      this.time = time;
      setTimeIsSet(true);
      return this;
    }

    public void unsetTime() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    /** Returns true if field time is set (has been assigned a value) and false otherwise */
    public boolean isSetTime() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TIME_ISSET_ID, value);
    }

    public int getCount() {
      return this.count;
    }

    public addSiteStatus_args setCount(int count) {
      this.count = count;
      setCountIsSet(true);
      return this;
    }

    public void unsetCount() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    /** Returns true if field count is set (has been assigned a value) and false otherwise */
    public boolean isSetCount() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COUNT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SITE:
        if (value == null) {
          unsetSite();
        } else {
          setSite((java.lang.String)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((MoutanSiteStatusType)value);
        }
        break;

      case TIME:
        if (value == null) {
          unsetTime();
        } else {
          setTime((java.lang.Integer)value);
        }
        break;

      case COUNT:
        if (value == null) {
          unsetCount();
        } else {
          setCount((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SITE:
        return getSite();

      case TYPE:
        return getType();

      case TIME:
        return getTime();

      case COUNT:
        return getCount();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SITE:
        return isSetSite();
      case TYPE:
        return isSetType();
      case TIME:
        return isSetTime();
      case COUNT:
        return isSetCount();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addSiteStatus_args)
        return this.equals((addSiteStatus_args)that);
      return false;
    }

    public boolean equals(addSiteStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_site = true && this.isSetSite();
      boolean that_present_site = true && that.isSetSite();
      if (this_present_site || that_present_site) {
        if (!(this_present_site && that_present_site))
          return false;
        if (!this.site.equals(that.site))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_time = true;
      boolean that_present_time = true;
      if (this_present_time || that_present_time) {
        if (!(this_present_time && that_present_time))
          return false;
        if (this.time != that.time)
          return false;
      }

      boolean this_present_count = true;
      boolean that_present_count = true;
      if (this_present_count || that_present_count) {
        if (!(this_present_count && that_present_count))
          return false;
        if (this.count != that.count)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSite()) ? 131071 : 524287);
      if (isSetSite())
        hashCode = hashCode * 8191 + site.hashCode();

      hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType())
        hashCode = hashCode * 8191 + type.getValue();

      hashCode = hashCode * 8191 + time;

      hashCode = hashCode * 8191 + count;

      return hashCode;
    }

    @Override
    public int compareTo(addSiteStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSite()).compareTo(other.isSetSite());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSite()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.site, other.site);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTime()).compareTo(other.isSetTime());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTime()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, other.time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCount()).compareTo(other.isSetCount());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCount()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, other.count);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addSiteStatus_args(");
      boolean first = true;

      sb.append("site:");
      if (this.site == null) {
        sb.append("null");
      } else {
        sb.append(this.site);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("time:");
      sb.append(this.time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("count:");
      sb.append(this.count);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSiteStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSiteStatus_argsStandardScheme getScheme() {
        return new addSiteStatus_argsStandardScheme();
      }
    }

    private static class addSiteStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSiteStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSiteStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SITE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.site = iprot.readString();
                struct.setSiteIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = com.baixing.thrift.moutan.MoutanSiteStatusType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.time = iprot.readI32();
                struct.setTimeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // COUNT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.count = iprot.readI32();
                struct.setCountIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSiteStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.site != null) {
          oprot.writeFieldBegin(SITE_FIELD_DESC);
          oprot.writeString(struct.site);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI32(struct.time);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(struct.count);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSiteStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSiteStatus_argsTupleScheme getScheme() {
        return new addSiteStatus_argsTupleScheme();
      }
    }

    private static class addSiteStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSiteStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSiteStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSite()) {
          optionals.set(0);
        }
        if (struct.isSetType()) {
          optionals.set(1);
        }
        if (struct.isSetTime()) {
          optionals.set(2);
        }
        if (struct.isSetCount()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetSite()) {
          oprot.writeString(struct.site);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetTime()) {
          oprot.writeI32(struct.time);
        }
        if (struct.isSetCount()) {
          oprot.writeI32(struct.count);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSiteStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.site = iprot.readString();
          struct.setSiteIsSet(true);
        }
        if (incoming.get(1)) {
          struct.type = com.baixing.thrift.moutan.MoutanSiteStatusType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.time = iprot.readI32();
          struct.setTimeIsSet(true);
        }
        if (incoming.get(3)) {
          struct.count = iprot.readI32();
          struct.setCountIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addSiteStatus_result implements org.apache.thrift.TBase<addSiteStatus_result, addSiteStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<addSiteStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addSiteStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addSiteStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addSiteStatus_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addSiteStatus_result.class, metaDataMap);
    }

    public addSiteStatus_result() {
    }

    public addSiteStatus_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addSiteStatus_result(addSiteStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public addSiteStatus_result deepCopy() {
      return new addSiteStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public addSiteStatus_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public addSiteStatus_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public addSiteStatus_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addSiteStatus_result)
        return this.equals((addSiteStatus_result)that);
      return false;
    }

    public boolean equals(addSiteStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addSiteStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addSiteStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addSiteStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSiteStatus_resultStandardScheme getScheme() {
        return new addSiteStatus_resultStandardScheme();
      }
    }

    private static class addSiteStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addSiteStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addSiteStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addSiteStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addSiteStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addSiteStatus_resultTupleScheme getScheme() {
        return new addSiteStatus_resultTupleScheme();
      }
    }

    private static class addSiteStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addSiteStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addSiteStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addSiteStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class smsUnsubscribe_args implements org.apache.thrift.TBase<smsUnsubscribe_args, smsUnsubscribe_args._Fields>, java.io.Serializable, Cloneable, Comparable<smsUnsubscribe_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("smsUnsubscribe_args");

    private static final org.apache.thrift.protocol.TField MOBILE_FIELD_DESC = new org.apache.thrift.protocol.TField("mobile", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new smsUnsubscribe_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new smsUnsubscribe_argsTupleSchemeFactory();

    public java.lang.String mobile; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      MOBILE((short)1, "mobile");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // MOBILE
            return MOBILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.MOBILE, new org.apache.thrift.meta_data.FieldMetaData("mobile", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(smsUnsubscribe_args.class, metaDataMap);
    }

    public smsUnsubscribe_args() {
    }

    public smsUnsubscribe_args(
      java.lang.String mobile)
    {
      this();
      this.mobile = mobile;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public smsUnsubscribe_args(smsUnsubscribe_args other) {
      if (other.isSetMobile()) {
        this.mobile = other.mobile;
      }
    }

    public smsUnsubscribe_args deepCopy() {
      return new smsUnsubscribe_args(this);
    }

    @Override
    public void clear() {
      this.mobile = null;
    }

    public java.lang.String getMobile() {
      return this.mobile;
    }

    public smsUnsubscribe_args setMobile(java.lang.String mobile) {
      this.mobile = mobile;
      return this;
    }

    public void unsetMobile() {
      this.mobile = null;
    }

    /** Returns true if field mobile is set (has been assigned a value) and false otherwise */
    public boolean isSetMobile() {
      return this.mobile != null;
    }

    public void setMobileIsSet(boolean value) {
      if (!value) {
        this.mobile = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case MOBILE:
        if (value == null) {
          unsetMobile();
        } else {
          setMobile((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case MOBILE:
        return getMobile();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case MOBILE:
        return isSetMobile();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof smsUnsubscribe_args)
        return this.equals((smsUnsubscribe_args)that);
      return false;
    }

    public boolean equals(smsUnsubscribe_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_mobile = true && this.isSetMobile();
      boolean that_present_mobile = true && that.isSetMobile();
      if (this_present_mobile || that_present_mobile) {
        if (!(this_present_mobile && that_present_mobile))
          return false;
        if (!this.mobile.equals(that.mobile))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetMobile()) ? 131071 : 524287);
      if (isSetMobile())
        hashCode = hashCode * 8191 + mobile.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(smsUnsubscribe_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetMobile()).compareTo(other.isSetMobile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMobile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mobile, other.mobile);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("smsUnsubscribe_args(");
      boolean first = true;

      sb.append("mobile:");
      if (this.mobile == null) {
        sb.append("null");
      } else {
        sb.append(this.mobile);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class smsUnsubscribe_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public smsUnsubscribe_argsStandardScheme getScheme() {
        return new smsUnsubscribe_argsStandardScheme();
      }
    }

    private static class smsUnsubscribe_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<smsUnsubscribe_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, smsUnsubscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // MOBILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mobile = iprot.readString();
                struct.setMobileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, smsUnsubscribe_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.mobile != null) {
          oprot.writeFieldBegin(MOBILE_FIELD_DESC);
          oprot.writeString(struct.mobile);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class smsUnsubscribe_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public smsUnsubscribe_argsTupleScheme getScheme() {
        return new smsUnsubscribe_argsTupleScheme();
      }
    }

    private static class smsUnsubscribe_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<smsUnsubscribe_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, smsUnsubscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetMobile()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetMobile()) {
          oprot.writeString(struct.mobile);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, smsUnsubscribe_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.mobile = iprot.readString();
          struct.setMobileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class smsUnsubscribe_result implements org.apache.thrift.TBase<smsUnsubscribe_result, smsUnsubscribe_result._Fields>, java.io.Serializable, Cloneable, Comparable<smsUnsubscribe_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("smsUnsubscribe_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField SYS_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CODE_EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("code_exc", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new smsUnsubscribe_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new smsUnsubscribe_resultTupleSchemeFactory();

    public boolean success; // required
    public SystemException sys_exc; // required
    public CodeException code_exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      SYS_EXC((short)1, "sys_exc"),
      CODE_EXC((short)2, "code_exc");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // SYS_EXC
            return SYS_EXC;
          case 2: // CODE_EXC
            return CODE_EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.SYS_EXC, new org.apache.thrift.meta_data.FieldMetaData("sys_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SystemException.class)));
      tmpMap.put(_Fields.CODE_EXC, new org.apache.thrift.meta_data.FieldMetaData("code_exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CodeException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(smsUnsubscribe_result.class, metaDataMap);
    }

    public smsUnsubscribe_result() {
    }

    public smsUnsubscribe_result(
      boolean success,
      SystemException sys_exc,
      CodeException code_exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.sys_exc = sys_exc;
      this.code_exc = code_exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public smsUnsubscribe_result(smsUnsubscribe_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetSys_exc()) {
        this.sys_exc = new SystemException(other.sys_exc);
      }
      if (other.isSetCode_exc()) {
        this.code_exc = new CodeException(other.code_exc);
      }
    }

    public smsUnsubscribe_result deepCopy() {
      return new smsUnsubscribe_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.sys_exc = null;
      this.code_exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public smsUnsubscribe_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public SystemException getSys_exc() {
      return this.sys_exc;
    }

    public smsUnsubscribe_result setSys_exc(SystemException sys_exc) {
      this.sys_exc = sys_exc;
      return this;
    }

    public void unsetSys_exc() {
      this.sys_exc = null;
    }

    /** Returns true if field sys_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_exc() {
      return this.sys_exc != null;
    }

    public void setSys_excIsSet(boolean value) {
      if (!value) {
        this.sys_exc = null;
      }
    }

    public CodeException getCode_exc() {
      return this.code_exc;
    }

    public smsUnsubscribe_result setCode_exc(CodeException code_exc) {
      this.code_exc = code_exc;
      return this;
    }

    public void unsetCode_exc() {
      this.code_exc = null;
    }

    /** Returns true if field code_exc is set (has been assigned a value) and false otherwise */
    public boolean isSetCode_exc() {
      return this.code_exc != null;
    }

    public void setCode_excIsSet(boolean value) {
      if (!value) {
        this.code_exc = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case SYS_EXC:
        if (value == null) {
          unsetSys_exc();
        } else {
          setSys_exc((SystemException)value);
        }
        break;

      case CODE_EXC:
        if (value == null) {
          unsetCode_exc();
        } else {
          setCode_exc((CodeException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case SYS_EXC:
        return getSys_exc();

      case CODE_EXC:
        return getCode_exc();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case SYS_EXC:
        return isSetSys_exc();
      case CODE_EXC:
        return isSetCode_exc();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof smsUnsubscribe_result)
        return this.equals((smsUnsubscribe_result)that);
      return false;
    }

    public boolean equals(smsUnsubscribe_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_sys_exc = true && this.isSetSys_exc();
      boolean that_present_sys_exc = true && that.isSetSys_exc();
      if (this_present_sys_exc || that_present_sys_exc) {
        if (!(this_present_sys_exc && that_present_sys_exc))
          return false;
        if (!this.sys_exc.equals(that.sys_exc))
          return false;
      }

      boolean this_present_code_exc = true && this.isSetCode_exc();
      boolean that_present_code_exc = true && that.isSetCode_exc();
      if (this_present_code_exc || that_present_code_exc) {
        if (!(this_present_code_exc && that_present_code_exc))
          return false;
        if (!this.code_exc.equals(that.code_exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetSys_exc()) ? 131071 : 524287);
      if (isSetSys_exc())
        hashCode = hashCode * 8191 + sys_exc.hashCode();

      hashCode = hashCode * 8191 + ((isSetCode_exc()) ? 131071 : 524287);
      if (isSetCode_exc())
        hashCode = hashCode * 8191 + code_exc.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(smsUnsubscribe_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_exc()).compareTo(other.isSetSys_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_exc, other.sys_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCode_exc()).compareTo(other.isSetCode_exc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCode_exc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code_exc, other.code_exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("smsUnsubscribe_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_exc:");
      if (this.sys_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("code_exc:");
      if (this.code_exc == null) {
        sb.append("null");
      } else {
        sb.append(this.code_exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class smsUnsubscribe_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public smsUnsubscribe_resultStandardScheme getScheme() {
        return new smsUnsubscribe_resultStandardScheme();
      }
    }

    private static class smsUnsubscribe_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<smsUnsubscribe_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, smsUnsubscribe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // SYS_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_exc = new SystemException();
                struct.sys_exc.read(iprot);
                struct.setSys_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CODE_EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.code_exc = new CodeException();
                struct.code_exc.read(iprot);
                struct.setCode_excIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, smsUnsubscribe_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.sys_exc != null) {
          oprot.writeFieldBegin(SYS_EXC_FIELD_DESC);
          struct.sys_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.code_exc != null) {
          oprot.writeFieldBegin(CODE_EXC_FIELD_DESC);
          struct.code_exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class smsUnsubscribe_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public smsUnsubscribe_resultTupleScheme getScheme() {
        return new smsUnsubscribe_resultTupleScheme();
      }
    }

    private static class smsUnsubscribe_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<smsUnsubscribe_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, smsUnsubscribe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetSys_exc()) {
          optionals.set(1);
        }
        if (struct.isSetCode_exc()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetSys_exc()) {
          struct.sys_exc.write(oprot);
        }
        if (struct.isSetCode_exc()) {
          struct.code_exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, smsUnsubscribe_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_exc = new SystemException();
          struct.sys_exc.read(iprot);
          struct.setSys_excIsSet(true);
        }
        if (incoming.get(2)) {
          struct.code_exc = new CodeException();
          struct.code_exc.read(iprot);
          struct.setCode_excIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
