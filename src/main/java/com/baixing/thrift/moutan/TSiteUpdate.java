/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.baixing.thrift.moutan;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-06-13")
public class TSiteUpdate implements org.apache.thrift.TBase<TSiteUpdate, TSiteUpdate._Fields>, java.io.Serializable, Cloneable, Comparable<TSiteUpdate> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TSiteUpdate");

  private static final org.apache.thrift.protocol.TField TITLE_FIELD_DESC = new org.apache.thrift.protocol.TField("title", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ANNOUNCEMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("announcement", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField AUTO_COLLECT_FIELD_DESC = new org.apache.thrift.protocol.TField("autoCollect", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new TSiteUpdateStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new TSiteUpdateTupleSchemeFactory();

  public java.lang.String title; // optional
  public java.lang.String announcement; // optional
  /**
   * 
   * @see SiteAutoCollectStatus
   */
  public SiteAutoCollectStatus autoCollect; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TITLE((short)1, "title"),
    ANNOUNCEMENT((short)2, "announcement"),
    /**
     * 
     * @see SiteAutoCollectStatus
     */
    AUTO_COLLECT((short)3, "autoCollect");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TITLE
          return TITLE;
        case 2: // ANNOUNCEMENT
          return ANNOUNCEMENT;
        case 3: // AUTO_COLLECT
          return AUTO_COLLECT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.TITLE,_Fields.ANNOUNCEMENT,_Fields.AUTO_COLLECT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TITLE, new org.apache.thrift.meta_data.FieldMetaData("title", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ANNOUNCEMENT, new org.apache.thrift.meta_data.FieldMetaData("announcement", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AUTO_COLLECT, new org.apache.thrift.meta_data.FieldMetaData("autoCollect", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, SiteAutoCollectStatus.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TSiteUpdate.class, metaDataMap);
  }

  public TSiteUpdate() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TSiteUpdate(TSiteUpdate other) {
    if (other.isSetTitle()) {
      this.title = other.title;
    }
    if (other.isSetAnnouncement()) {
      this.announcement = other.announcement;
    }
    if (other.isSetAutoCollect()) {
      this.autoCollect = other.autoCollect;
    }
  }

  public TSiteUpdate deepCopy() {
    return new TSiteUpdate(this);
  }

  @Override
  public void clear() {
    this.title = null;
    this.announcement = null;
    this.autoCollect = null;
  }

  public java.lang.String getTitle() {
    return this.title;
  }

  public TSiteUpdate setTitle(java.lang.String title) {
    this.title = title;
    return this;
  }

  public void unsetTitle() {
    this.title = null;
  }

  /** Returns true if field title is set (has been assigned a value) and false otherwise */
  public boolean isSetTitle() {
    return this.title != null;
  }

  public void setTitleIsSet(boolean value) {
    if (!value) {
      this.title = null;
    }
  }

  public java.lang.String getAnnouncement() {
    return this.announcement;
  }

  public TSiteUpdate setAnnouncement(java.lang.String announcement) {
    this.announcement = announcement;
    return this;
  }

  public void unsetAnnouncement() {
    this.announcement = null;
  }

  /** Returns true if field announcement is set (has been assigned a value) and false otherwise */
  public boolean isSetAnnouncement() {
    return this.announcement != null;
  }

  public void setAnnouncementIsSet(boolean value) {
    if (!value) {
      this.announcement = null;
    }
  }

  /**
   * 
   * @see SiteAutoCollectStatus
   */
  public SiteAutoCollectStatus getAutoCollect() {
    return this.autoCollect;
  }

  /**
   * 
   * @see SiteAutoCollectStatus
   */
  public TSiteUpdate setAutoCollect(SiteAutoCollectStatus autoCollect) {
    this.autoCollect = autoCollect;
    return this;
  }

  public void unsetAutoCollect() {
    this.autoCollect = null;
  }

  /** Returns true if field autoCollect is set (has been assigned a value) and false otherwise */
  public boolean isSetAutoCollect() {
    return this.autoCollect != null;
  }

  public void setAutoCollectIsSet(boolean value) {
    if (!value) {
      this.autoCollect = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TITLE:
      if (value == null) {
        unsetTitle();
      } else {
        setTitle((java.lang.String)value);
      }
      break;

    case ANNOUNCEMENT:
      if (value == null) {
        unsetAnnouncement();
      } else {
        setAnnouncement((java.lang.String)value);
      }
      break;

    case AUTO_COLLECT:
      if (value == null) {
        unsetAutoCollect();
      } else {
        setAutoCollect((SiteAutoCollectStatus)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TITLE:
      return getTitle();

    case ANNOUNCEMENT:
      return getAnnouncement();

    case AUTO_COLLECT:
      return getAutoCollect();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TITLE:
      return isSetTitle();
    case ANNOUNCEMENT:
      return isSetAnnouncement();
    case AUTO_COLLECT:
      return isSetAutoCollect();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof TSiteUpdate)
      return this.equals((TSiteUpdate)that);
    return false;
  }

  public boolean equals(TSiteUpdate that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_title = true && this.isSetTitle();
    boolean that_present_title = true && that.isSetTitle();
    if (this_present_title || that_present_title) {
      if (!(this_present_title && that_present_title))
        return false;
      if (!this.title.equals(that.title))
        return false;
    }

    boolean this_present_announcement = true && this.isSetAnnouncement();
    boolean that_present_announcement = true && that.isSetAnnouncement();
    if (this_present_announcement || that_present_announcement) {
      if (!(this_present_announcement && that_present_announcement))
        return false;
      if (!this.announcement.equals(that.announcement))
        return false;
    }

    boolean this_present_autoCollect = true && this.isSetAutoCollect();
    boolean that_present_autoCollect = true && that.isSetAutoCollect();
    if (this_present_autoCollect || that_present_autoCollect) {
      if (!(this_present_autoCollect && that_present_autoCollect))
        return false;
      if (!this.autoCollect.equals(that.autoCollect))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTitle()) ? 131071 : 524287);
    if (isSetTitle())
      hashCode = hashCode * 8191 + title.hashCode();

    hashCode = hashCode * 8191 + ((isSetAnnouncement()) ? 131071 : 524287);
    if (isSetAnnouncement())
      hashCode = hashCode * 8191 + announcement.hashCode();

    hashCode = hashCode * 8191 + ((isSetAutoCollect()) ? 131071 : 524287);
    if (isSetAutoCollect())
      hashCode = hashCode * 8191 + autoCollect.getValue();

    return hashCode;
  }

  @Override
  public int compareTo(TSiteUpdate other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTitle()).compareTo(other.isSetTitle());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTitle()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.title, other.title);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAnnouncement()).compareTo(other.isSetAnnouncement());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAnnouncement()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.announcement, other.announcement);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAutoCollect()).compareTo(other.isSetAutoCollect());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAutoCollect()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.autoCollect, other.autoCollect);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("TSiteUpdate(");
    boolean first = true;

    if (isSetTitle()) {
      sb.append("title:");
      if (this.title == null) {
        sb.append("null");
      } else {
        sb.append(this.title);
      }
      first = false;
    }
    if (isSetAnnouncement()) {
      if (!first) sb.append(", ");
      sb.append("announcement:");
      if (this.announcement == null) {
        sb.append("null");
      } else {
        sb.append(this.announcement);
      }
      first = false;
    }
    if (isSetAutoCollect()) {
      if (!first) sb.append(", ");
      sb.append("autoCollect:");
      if (this.autoCollect == null) {
        sb.append("null");
      } else {
        sb.append(this.autoCollect);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TSiteUpdateStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSiteUpdateStandardScheme getScheme() {
      return new TSiteUpdateStandardScheme();
    }
  }

  private static class TSiteUpdateStandardScheme extends org.apache.thrift.scheme.StandardScheme<TSiteUpdate> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TSiteUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TITLE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.title = iprot.readString();
              struct.setTitleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ANNOUNCEMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.announcement = iprot.readString();
              struct.setAnnouncementIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // AUTO_COLLECT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.autoCollect = com.baixing.thrift.moutan.SiteAutoCollectStatus.findByValue(iprot.readI32());
              struct.setAutoCollectIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TSiteUpdate struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.title != null) {
        if (struct.isSetTitle()) {
          oprot.writeFieldBegin(TITLE_FIELD_DESC);
          oprot.writeString(struct.title);
          oprot.writeFieldEnd();
        }
      }
      if (struct.announcement != null) {
        if (struct.isSetAnnouncement()) {
          oprot.writeFieldBegin(ANNOUNCEMENT_FIELD_DESC);
          oprot.writeString(struct.announcement);
          oprot.writeFieldEnd();
        }
      }
      if (struct.autoCollect != null) {
        if (struct.isSetAutoCollect()) {
          oprot.writeFieldBegin(AUTO_COLLECT_FIELD_DESC);
          oprot.writeI32(struct.autoCollect.getValue());
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TSiteUpdateTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public TSiteUpdateTupleScheme getScheme() {
      return new TSiteUpdateTupleScheme();
    }
  }

  private static class TSiteUpdateTupleScheme extends org.apache.thrift.scheme.TupleScheme<TSiteUpdate> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TSiteUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTitle()) {
        optionals.set(0);
      }
      if (struct.isSetAnnouncement()) {
        optionals.set(1);
      }
      if (struct.isSetAutoCollect()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetTitle()) {
        oprot.writeString(struct.title);
      }
      if (struct.isSetAnnouncement()) {
        oprot.writeString(struct.announcement);
      }
      if (struct.isSetAutoCollect()) {
        oprot.writeI32(struct.autoCollect.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TSiteUpdate struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.title = iprot.readString();
        struct.setTitleIsSet(true);
      }
      if (incoming.get(1)) {
        struct.announcement = iprot.readString();
        struct.setAnnouncementIsSet(true);
      }
      if (incoming.get(2)) {
        struct.autoCollect = com.baixing.thrift.moutan.SiteAutoCollectStatus.findByValue(iprot.readI32());
        struct.setAutoCollectIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

